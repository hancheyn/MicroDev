
F446RE_T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038ac  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a88  08003a88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a90  08003a90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a94  08003a94  00013a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  2000000c  08003aa4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  08003aa4  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009754  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186b  00000000  00000000  00029790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0002b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002b7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d17  00000000  00000000  0002bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e91  00000000  00000000  0004cc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c759c  00000000  00000000  00056af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e08c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f6c  00000000  00000000  0011e0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003a58 	.word	0x08003a58

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003a58 	.word	0x08003a58

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000516:	2b00      	cmp	r3, #0
 8000518:	db0b      	blt.n	8000532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f003 021f 	and.w	r2, r3, #31
 8000520:	4907      	ldr	r1, [pc, #28]	; (8000540 <__NVIC_EnableIRQ+0x38>)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	095b      	lsrs	r3, r3, #5
 8000528:	2001      	movs	r0, #1
 800052a:	fa00 f202 	lsl.w	r2, r0, r2
 800052e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e000e100 	.word	0xe000e100

08000544 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800054a:	f001 fc75 	bl	8001e38 <HAL_Init>
	SystemClock_Config();
 800054e:	f000 fd89 	bl	8001064 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000552:	f000 fe1f 	bl	8001194 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000556:	f000 fdf3 	bl	8001140 <MX_USART2_UART_Init>

	//IO INITs
	init_pins(PINS_);
 800055a:	4819      	ldr	r0, [pc, #100]	; (80005c0 <main+0x7c>)
 800055c:	f000 feca 	bl	80012f4 <init_pins>
	// pinMode(0, OUTPUT);
	// digitalWrite(0, HIGH);

  	//GPIOC Input
  	RCC->AHB1ENR |= 4; //GPIOC clock
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <main+0x80>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000564:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <main+0x80>)
 8000566:	f043 0304 	orr.w	r3, r3, #4
 800056a:	6313      	str	r3, [r2, #48]	; 0x30
  	GPIOC->MODER &= ~0x0C000000;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <main+0x84>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a15      	ldr	r2, [pc, #84]	; (80005c8 <main+0x84>)
 8000572:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000576:	6013      	str	r3, [r2, #0]

    while (1) {
  	  if(GPIOC->IDR & 0x2000) {
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <main+0x84>)
 800057a:	691b      	ldr	r3, [r3, #16]
 800057c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0f9      	beq.n	8000578 <main+0x34>
  		  // GPIOA->ODR |= 0x00000020; //turn on
  		  // digitalWrite(0, LOW);
  		  // delay(500);

  		    uint8_t RMSG[4] = {'\0'};
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]

  		    //Write Test
  			command_read(RMSG);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fcca 	bl	8000f24 <command_read>
  			delay(50);	//delay is important
 8000590:	2032      	movs	r0, #50	; 0x32
 8000592:	f000 fe72 	bl	800127a <delay>

  			if(crc_decode(RMSG)){
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fd31 	bl	8001000 <crc_decode>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0e9      	beq.n	8000578 <main+0x34>
  				//GPIOA->ODR &= ~0x00000020;
  				//digitalWrite(0, LOW);

  				//Interpret Instructions
  				run_tests(RMSG);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f810 	bl	80005cc <run_tests>

  				//Send Back Results
  				command_write(RMSG[0], RMSG[1], RMSG[2]);
 80005ac:	793b      	ldrb	r3, [r7, #4]
 80005ae:	4618      	mov	r0, r3
 80005b0:	797b      	ldrb	r3, [r7, #5]
 80005b2:	4619      	mov	r1, r3
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	461a      	mov	r2, r3
 80005b8:	f000 fcc6 	bl	8000f48 <command_write>
  	  if(GPIOC->IDR & 0x2000) {
 80005bc:	e7dc      	b.n	8000578 <main+0x34>
 80005be:	bf00      	nop
 80005c0:	20000028 	.word	0x20000028
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020800 	.word	0x40020800

080005cc <run_tests>:


/********************************************************/
//Tests
/********************************************************/
void run_tests(unsigned char data[]) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

	unsigned char pin = data[0];
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	73fb      	strb	r3, [r7, #15]
	unsigned char instruction = data[1];
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	73bb      	strb	r3, [r7, #14]

	// Test #1
	if(data[2] == 1) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3302      	adds	r3, #2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d113      	bne.n	8000612 <run_tests+0x46>
		else if(instruction == 0) {
			pinMode(pin, OUTPUT);
			digitalWrite(pin, 0);
		}
		*/
		configure_output(pin, instruction);
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	7bba      	ldrb	r2, [r7, #14]
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f8b0 	bl	8000756 <configure_output>
		command_write(data[0], data[1], data[2]);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4619      	mov	r1, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3302      	adds	r3, #2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	f000 fc9c 	bl	8000f48 <command_write>
			configure_sleep_mode(4, pin);
		}

	}

}
 8000610:	e09d      	b.n	800074e <run_tests+0x182>
	else if(data[2] == 2) {
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3302      	adds	r3, #2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b02      	cmp	r3, #2
 800061a:	d113      	bne.n	8000644 <run_tests+0x78>
		configure_output(pin, instruction);
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	7bba      	ldrb	r2, [r7, #14]
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f897 	bl	8000756 <configure_output>
		command_write(data[0], data[1], data[2]);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3302      	adds	r3, #2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	f000 fc83 	bl	8000f48 <command_write>
}
 8000642:	e084      	b.n	800074e <run_tests+0x182>
	else if(data[2] == 3) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3302      	adds	r3, #2
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b03      	cmp	r3, #3
 800064c:	d111      	bne.n	8000672 <run_tests+0xa6>
		configure_input_pullup(pin);
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f8ae 	bl	80007b2 <configure_input_pullup>
		command_write(data[0], data[1], data[2]);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	4619      	mov	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3302      	adds	r3, #2
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	f000 fc6c 	bl	8000f48 <command_write>
}
 8000670:	e06d      	b.n	800074e <run_tests+0x182>
	else if(data[2] == 4) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3302      	adds	r3, #2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d111      	bne.n	80006a0 <run_tests+0xd4>
		configure_input_pulldown(pin);
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f8a4 	bl	80007cc <configure_input_pulldown>
		command_write(data[0], data[1], data[2]);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3302      	adds	r3, #2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	f000 fc55 	bl	8000f48 <command_write>
}
 800069e:	e056      	b.n	800074e <run_tests+0x182>
	else if(data[2] == 5) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3302      	adds	r3, #2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b05      	cmp	r3, #5
 80006a8:	d116      	bne.n	80006d8 <run_tests+0x10c>
		data[1] = configure_input(pin);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f86e 	bl	800078e <configure_input>
 80006b2:	4602      	mov	r2, r0
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3301      	adds	r3, #1
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	701a      	strb	r2, [r3, #0]
		command_write(data[0], data[1], data[2]);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3301      	adds	r3, #1
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3302      	adds	r3, #2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	f000 fc39 	bl	8000f48 <command_write>
}
 80006d6:	e03a      	b.n	800074e <run_tests+0x182>
	else if(data[2] == 6) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3302      	adds	r3, #2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d116      	bne.n	8000710 <run_tests+0x144>
		data[1] = configure_analog_input(pin);
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 f87e 	bl	80007e6 <configure_analog_input>
 80006ea:	4602      	mov	r2, r0
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	701a      	strb	r2, [r3, #0]
		command_write(data[0], data[1], data[2]);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3302      	adds	r3, #2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	f000 fc1d 	bl	8000f48 <command_write>
}
 800070e:	e01e      	b.n	800074e <run_tests+0x182>
	else if(data[2] == 7) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3302      	adds	r3, #2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b07      	cmp	r3, #7
 8000718:	d119      	bne.n	800074e <run_tests+0x182>
		if(instruction == 1) {
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d105      	bne.n	800072c <run_tests+0x160>
			configure_sleep_mode(1, pin);
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	4619      	mov	r1, r3
 8000724:	2001      	movs	r0, #1
 8000726:	f000 f86d 	bl	8000804 <configure_sleep_mode>
}
 800072a:	e010      	b.n	800074e <run_tests+0x182>
		else if(instruction == 2) {
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b02      	cmp	r3, #2
 8000730:	d105      	bne.n	800073e <run_tests+0x172>
			configure_sleep_mode(2, pin);
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	4619      	mov	r1, r3
 8000736:	2002      	movs	r0, #2
 8000738:	f000 f864 	bl	8000804 <configure_sleep_mode>
}
 800073c:	e007      	b.n	800074e <run_tests+0x182>
		else if(instruction == 3) {
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d104      	bne.n	800074e <run_tests+0x182>
			configure_sleep_mode(4, pin);
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	4619      	mov	r1, r3
 8000748:	2004      	movs	r0, #4
 800074a:	f000 f85b 	bl	8000804 <configure_sleep_mode>
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <configure_output>:
 * Description: Configures GPIO pin as OUTPUT and turns the output to HIGH. Used for testing GPIO output voltage under load sourcing.
 * Accepts: unsigned int pin - the pin number to configure as OUTPUT
 *          unsigned int logic - HIGH or LOW logic
 * Returns: void
 */
void configure_output(unsigned int pin, unsigned int logic) {
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	6039      	str	r1, [r7, #0]
    pinMode(pin, OUTPUT);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2103      	movs	r1, #3
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f9a5 	bl	8000ab4 <pinMode>
    if(logic) {
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d005      	beq.n	800077c <configure_output+0x26>
      digitalWrite(pin, HIGH);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2101      	movs	r1, #1
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fb7f 	bl	8000e78 <digitalWrite>
    }
    else {
      digitalWrite(pin, LOW);
    }
    return;
 800077a:	e005      	b.n	8000788 <configure_output+0x32>
      digitalWrite(pin, LOW);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fb79 	bl	8000e78 <digitalWrite>
    return;
 8000786:	bf00      	nop
}
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <configure_input>:
 * Description: Configures GPIO pin as an INPUT. Used for testing input logic levels. The input pin cannot be a pullup,
 * as that would allow the pin to act as a current source and could damage the testing device's DAC.
 * Accepts: unsigned int pin - the pin number to configure as INPUT
 * Returns: int - 0 or 1 depending on input voltage of the pin (LOGIC LOW OR HIGH)
 */
int configure_input(unsigned int pin) {
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
    pinMode(pin, INPUT);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f98a 	bl	8000ab4 <pinMode>
    return digitalRead(pin);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fb42 	bl	8000e2c <digitalRead>
 80007a8:	4603      	mov	r3, r0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <configure_input_pullup>:
 * Description: Configures GPIO pin as INPUT_PULLUP. Used for testing the pin's unloaded pullup voltage and internal
 * resistance value.
 * Accepts: unsigned int pin - the pin number to configure as INPUT_PULLUP
 * Returns: void
 */
void configure_input_pullup(unsigned int pin) {
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
    pinMode(pin,INPUT_PULLUP);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2101      	movs	r1, #1
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f978 	bl	8000ab4 <pinMode>
    return;
 80007c4:	bf00      	nop
}
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <configure_input_pulldown>:
 * Description: Configures GPIO pin as INPUT_PULLDOWN. Used for testing the pin's unloaded pullup voltage and internal
 * resistance value.
 * Accepts: unsigned int pin - the pin number to configure as INPUT_PULLDOWN
 * Returns: void
 */
void configure_input_pulldown(unsigned int pin) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
    pinMode(pin,INPUT_PULLDOWN);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2102      	movs	r1, #2
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f96b 	bl	8000ab4 <pinMode>
    return;
 80007de:	bf00      	nop
}
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <configure_analog_input>:
 * Description: Returns the analog reading of the selected analog pin (A0, A1, ..., A5). Used for testing the Arduino's
 * ADC.
 * Accepts: unsigned int analogPin - the analog pin number to read
 * Returns: int - 0 to 1023, depending on the voltage reading of the ADC. (0 = GND, 1023 = 5V)
 */
int configure_analog_input(unsigned int analogPin) {
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
   return (analogRead(analogPin) >> 2); //returns a value 0-1023 (0=GND, 1023 = 5V)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f8fb 	bl	80009ec <analogRead>
 80007f6:	4603      	mov	r3, r0
 80007f8:	109b      	asrs	r3, r3, #2
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <configure_sleep_mode>:
/********************************************************/
//IO  Sleep Modes / PINS
/********************************************************/

//
void configure_sleep_mode(unsigned int mode, unsigned int interruptPin) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]

	// SLEEP == 1
	// Wake Up = ?PA0 | D13
	if(mode == 1) {
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d113      	bne.n	800083c <configure_sleep_mode+0x38>
		HAL_SuspendTick();
 8000814:	f001 fb82 	bl	8001f1c <HAL_SuspendTick>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		//HAL_PWR_EnableSleepOnExit();
		wakeUp(interruptPin);
 8000818:	6838      	ldr	r0, [r7, #0]
 800081a:	f000 f84b 	bl	80008b4 <wakeUp>
		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800081e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000822:	f001 fe2f 	bl	8002484 <HAL_PWR_EnableWakeUpPin>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <configure_sleep_mode+0xac>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <configure_sleep_mode+0xac>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6013      	str	r3, [r2, #0]
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000832:	2101      	movs	r1, #1
 8000834:	2000      	movs	r0, #0
 8000836:	f001 fe37 	bl	80024a8 <HAL_PWR_EnterSLEEPMode>
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
		}
		HAL_PWR_EnterSTANDBYMode();
	}

}
 800083a:	e034      	b.n	80008a6 <configure_sleep_mode+0xa2>
	else if(mode == 2) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d113      	bne.n	800086a <configure_sleep_mode+0x66>
		HAL_SuspendTick();
 8000842:	f001 fb6b 	bl	8001f1c <HAL_SuspendTick>
		wakeUp(interruptPin);
 8000846:	6838      	ldr	r0, [r7, #0]
 8000848:	f000 f834 	bl	80008b4 <wakeUp>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <configure_sleep_mode+0xac>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <configure_sleep_mode+0xac>)
 8000852:	f043 0304 	orr.w	r3, r3, #4
 8000856:	6013      	str	r3, [r2, #0]
		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000858:	f44f 7080 	mov.w	r0, #256	; 0x100
 800085c:	f001 fe12 	bl	8002484 <HAL_PWR_EnableWakeUpPin>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000860:	2101      	movs	r1, #1
 8000862:	2001      	movs	r0, #1
 8000864:	f001 fe3c 	bl	80024e0 <HAL_PWR_EnterSTOPMode>
}
 8000868:	e01d      	b.n	80008a6 <configure_sleep_mode+0xa2>
	else if(mode == 4) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b04      	cmp	r3, #4
 800086e:	d11a      	bne.n	80008a6 <configure_sleep_mode+0xa2>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <configure_sleep_mode+0xac>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <configure_sleep_mode+0xac>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6013      	str	r3, [r2, #0]
		if(interruptPin == 1) {
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d104      	bne.n	800088c <configure_sleep_mode+0x88>
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000882:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000886:	f001 fdfd 	bl	8002484 <HAL_PWR_EnableWakeUpPin>
 800088a:	e00a      	b.n	80008a2 <configure_sleep_mode+0x9e>
		else if (interruptPin == 2) {
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d103      	bne.n	800089a <configure_sleep_mode+0x96>
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2);
 8000892:	2080      	movs	r0, #128	; 0x80
 8000894:	f001 fdf6 	bl	8002484 <HAL_PWR_EnableWakeUpPin>
 8000898:	e003      	b.n	80008a2 <configure_sleep_mode+0x9e>
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800089a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800089e:	f001 fdf1 	bl	8002484 <HAL_PWR_EnableWakeUpPin>
		HAL_PWR_EnterSTANDBYMode();
 80008a2:	f001 fe49 	bl	8002538 <HAL_PWR_EnterSTANDBYMode>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40007000 	.word	0x40007000

080008b4 <wakeUp>:

//FIX : TEST if this is needed
// EXTI Interrupt Function
void wakeUp(int pin) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
	__disable_irq();

	if(pin == 2) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d134      	bne.n	8000930 <wakeUp+0x7c>
		RCC->AHB1ENR |= 4;
 80008c6:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <wakeUp+0xf0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a36      	ldr	r2, [pc, #216]	; (80009a4 <wakeUp+0xf0>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER &= ~0x0C000000;
 80008d2:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <wakeUp+0xf4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a34      	ldr	r2, [pc, #208]	; (80009a8 <wakeUp+0xf4>)
 80008d8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80008dc:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR &= ~0x0C000000;
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <wakeUp+0xf4>)
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	4a31      	ldr	r2, [pc, #196]	; (80009a8 <wakeUp+0xf4>)
 80008e4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80008e8:	60d3      	str	r3, [r2, #12]
		GPIOC->PUPDR |= 0x04000000;
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <wakeUp+0xf4>)
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <wakeUp+0xf4>)
 80008f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008f4:	60d3      	str	r3, [r2, #12]

		SYSCFG->EXTICR[3] &= ~0x00F0;
 80008f6:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <wakeUp+0xf8>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a2c      	ldr	r2, [pc, #176]	; (80009ac <wakeUp+0xf8>)
 80008fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000900:	6153      	str	r3, [r2, #20]
		SYSCFG->EXTICR[3] |= 0x0020;
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <wakeUp+0xf8>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	4a29      	ldr	r2, [pc, #164]	; (80009ac <wakeUp+0xf8>)
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	6153      	str	r3, [r2, #20]
		EXTI->IMR |= 0x2000;
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <wakeUp+0xfc>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a27      	ldr	r2, [pc, #156]	; (80009b0 <wakeUp+0xfc>)
 8000914:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000918:	6013      	str	r3, [r2, #0]
		EXTI->FTSR |= 0x2000;
 800091a:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <wakeUp+0xfc>)
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	4a24      	ldr	r2, [pc, #144]	; (80009b0 <wakeUp+0xfc>)
 8000920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000924:	60d3      	str	r3, [r2, #12]

		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000926:	2028      	movs	r0, #40	; 0x28
 8000928:	f7ff fdee 	bl	8000508 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800092c:	b662      	cpsie	i
}
 800092e:	e034      	b.n	800099a <wakeUp+0xe6>
		__enable_irq();
	}
	else {
		RCC->AHB1ENR |= 1;
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <wakeUp+0xf0>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <wakeUp+0xf0>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER &= ~0x00000003;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <wakeUp+0xf4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <wakeUp+0xf4>)
 8000942:	f023 0303 	bic.w	r3, r3, #3
 8000946:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR &= ~0x00000003;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <wakeUp+0xf4>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <wakeUp+0xf4>)
 800094e:	f023 0303 	bic.w	r3, r3, #3
 8000952:	60d3      	str	r3, [r2, #12]
		GPIOC->PUPDR |= 0x00000001;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <wakeUp+0xf4>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <wakeUp+0xf4>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	60d3      	str	r3, [r2, #12]

		SYSCFG->EXTICR[0] &= ~0x000F;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <wakeUp+0xf8>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	4a11      	ldr	r2, [pc, #68]	; (80009ac <wakeUp+0xf8>)
 8000966:	f023 030f 	bic.w	r3, r3, #15
 800096a:	6093      	str	r3, [r2, #8]
		SYSCFG->EXTICR[0] |= 0x0002;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <wakeUp+0xf8>)
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <wakeUp+0xf8>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	6093      	str	r3, [r2, #8]
		EXTI->IMR |= 0x0001;
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <wakeUp+0xfc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <wakeUp+0xfc>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6013      	str	r3, [r2, #0]
		EXTI->FTSR |= 0x0001;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <wakeUp+0xfc>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <wakeUp+0xfc>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	60d3      	str	r3, [r2, #12]

		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000990:	2028      	movs	r0, #40	; 0x28
 8000992:	f7ff fdb9 	bl	8000508 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000996:	b662      	cpsie	i
}
 8000998:	bf00      	nop
		__enable_irq();
	}
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40013c00 	.word	0x40013c00

080009b4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	if(EXTI->PR == 0x2000) {
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <EXTI15_10_IRQHandler+0x34>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009c0:	d106      	bne.n	80009d0 <EXTI15_10_IRQHandler+0x1c>
		HAL_ResumeTick();
 80009c2:	f001 fabb 	bl	8001f3c <HAL_ResumeTick>
		EXTI->PR = 0x2000;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <EXTI15_10_IRQHandler+0x34>)
 80009c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009cc:	615a      	str	r2, [r3, #20]
	}
	else if(EXTI->PR == 0x0001) {
		HAL_ResumeTick();
		EXTI->PR = 0x0001;
	}
}
 80009ce:	e008      	b.n	80009e2 <EXTI15_10_IRQHandler+0x2e>
	else if(EXTI->PR == 0x0001) {
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <EXTI15_10_IRQHandler+0x34>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d104      	bne.n	80009e2 <EXTI15_10_IRQHandler+0x2e>
		HAL_ResumeTick();
 80009d8:	f001 fab0 	bl	8001f3c <HAL_ResumeTick>
		EXTI->PR = 0x0001;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <EXTI15_10_IRQHandler+0x34>)
 80009de:	2201      	movs	r2, #1
 80009e0:	615a      	str	r2, [r3, #20]
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40013c00 	.word	0x40013c00

080009ec <analogRead>:

/********************************************************/
// Read & Write Functions
/********************************************************/

int analogRead(int pin) { //!IN PROGRESS [NEED TO DEVELOP DEBUGGING METHOD]
 80009ec:	b490      	push	{r4, r7}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

	int result;
	//SET REGESTERS p213

	//Pin Setup
	RCC->AHB1ENR |= PINS_[pin].clock;  //clock for pin
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <analogRead+0xbc>)
 80009f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009f8:	482c      	ldr	r0, [pc, #176]	; (8000aac <analogRead+0xc0>)
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	4403      	add	r3, r0
 8000a06:	330c      	adds	r3, #12
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a27      	ldr	r2, [pc, #156]	; (8000aa8 <analogRead+0xbc>)
 8000a0c:	430b      	orrs	r3, r1
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
	PINS_[pin].GPIO->MODER |= (0x03 << (PINS_[pin].pin * 2)); // Set to ADC mode
 8000a10:	4926      	ldr	r1, [pc, #152]	; (8000aac <analogRead+0xc0>)
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	440b      	add	r3, r1
 8000a1e:	3310      	adds	r3, #16
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	6819      	ldr	r1, [r3, #0]
 8000a24:	4821      	ldr	r0, [pc, #132]	; (8000aac <analogRead+0xc0>)
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	4403      	add	r3, r0
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2203      	movs	r2, #3
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	461c      	mov	r4, r3
 8000a3e:	481b      	ldr	r0, [pc, #108]	; (8000aac <analogRead+0xc0>)
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	4613      	mov	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	4403      	add	r3, r0
 8000a4c:	3310      	adds	r3, #16
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	ea41 0204 	orr.w	r2, r1, r4
 8000a54:	601a      	str	r2, [r3, #0]

	//ADC1
	RCC->APB2ENR |= 0x00000100; /* Enable ADC1 clock */
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <analogRead+0xbc>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <analogRead+0xbc>)
 8000a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a60:	6453      	str	r3, [r2, #68]	; 0x44
	/* Setup for ACD1 */
	ADC1->CR2 = 0;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <analogRead+0xc4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
	ADC1->SQR3 = 1;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <analogRead+0xc4>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->SQR1 = 0;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <analogRead+0xc4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->CR2 = 1;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <analogRead+0xc4>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	609a      	str	r2, [r3, #8]

	//FIND VALUE in ADC1
	ADC1->CR2 |= 0x40000000;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <analogRead+0xc4>)
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	4a0c      	ldr	r2, [pc, #48]	; (8000ab0 <analogRead+0xc4>)
 8000a80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000a84:	6093      	str	r3, [r2, #8]
	while(!(ADC1->SR & 2)) {}
 8000a86:	bf00      	nop
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <analogRead+0xc4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0f9      	beq.n	8000a88 <analogRead+0x9c>
	result = ADC1->DR;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <analogRead+0xc4>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a98:	60fb      	str	r3, [r7, #12]

	return result;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc90      	pop	{r4, r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	20000028 	.word	0x20000028
 8000ab0:	40012000 	.word	0x40012000

08000ab4 <pinMode>:

void pinMode(int pin, int mode) {
 8000ab4:	b490      	push	{r4, r7}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]

	if(mode == INPUT_PULLUP) {
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d179      	bne.n	8000bb8 <pinMode+0x104>
		RCC->AHB1ENR |= PINS_[pin].clock;
 8000ac4:	4ba7      	ldr	r3, [pc, #668]	; (8000d64 <pinMode+0x2b0>)
 8000ac6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ac8:	48a7      	ldr	r0, [pc, #668]	; (8000d68 <pinMode+0x2b4>)
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4613      	mov	r3, r2
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	4403      	add	r3, r0
 8000ad6:	330c      	adds	r3, #12
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4aa2      	ldr	r2, [pc, #648]	; (8000d64 <pinMode+0x2b0>)
 8000adc:	430b      	orrs	r3, r1
 8000ade:	6313      	str	r3, [r2, #48]	; 0x30
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
 8000ae0:	49a1      	ldr	r1, [pc, #644]	; (8000d68 <pinMode+0x2b4>)
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	440b      	add	r3, r1
 8000aee:	3310      	adds	r3, #16
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6819      	ldr	r1, [r3, #0]
 8000af4:	489c      	ldr	r0, [pc, #624]	; (8000d68 <pinMode+0x2b4>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	4403      	add	r3, r0
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	2203      	movs	r2, #3
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	461c      	mov	r4, r3
 8000b10:	4895      	ldr	r0, [pc, #596]	; (8000d68 <pinMode+0x2b4>)
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4613      	mov	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	4413      	add	r3, r2
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	4403      	add	r3, r0
 8000b1e:	3310      	adds	r3, #16
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	ea01 0204 	and.w	r2, r1, r4
 8000b26:	601a      	str	r2, [r3, #0]
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Pull-up resister by setting bit 0x01 */
 8000b28:	498f      	ldr	r1, [pc, #572]	; (8000d68 <pinMode+0x2b4>)
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	440b      	add	r3, r1
 8000b36:	3310      	adds	r3, #16
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68d9      	ldr	r1, [r3, #12]
 8000b3c:	488a      	ldr	r0, [pc, #552]	; (8000d68 <pinMode+0x2b4>)
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	4403      	add	r3, r0
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	2203      	movs	r2, #3
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	461c      	mov	r4, r3
 8000b58:	4883      	ldr	r0, [pc, #524]	; (8000d68 <pinMode+0x2b4>)
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4413      	add	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4403      	add	r3, r0
 8000b66:	3310      	adds	r3, #16
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	ea01 0204 	and.w	r2, r1, r4
 8000b6e:	60da      	str	r2, [r3, #12]
		PINS_[pin].GPIO->PUPDR |= (0x01 << (PINS_[pin].pin * 2));
 8000b70:	497d      	ldr	r1, [pc, #500]	; (8000d68 <pinMode+0x2b4>)
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3310      	adds	r3, #16
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68d9      	ldr	r1, [r3, #12]
 8000b84:	4878      	ldr	r0, [pc, #480]	; (8000d68 <pinMode+0x2b4>)
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4403      	add	r3, r0
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2201      	movs	r2, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	461c      	mov	r4, r3
 8000b9e:	4872      	ldr	r0, [pc, #456]	; (8000d68 <pinMode+0x2b4>)
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4403      	add	r3, r0
 8000bac:	3310      	adds	r3, #16
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	ea41 0204 	orr.w	r2, r1, r4
 8000bb4:	60da      	str	r2, [r3, #12]
		RCC->AHB1ENR |= PINS_[pin].clock;
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Floating by setting bit 0x01 */
	}

}
 8000bb6:	e12f      	b.n	8000e18 <pinMode+0x364>
	else if(mode == INPUT_PULLDOWN) {
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d179      	bne.n	8000cb2 <pinMode+0x1fe>
		RCC->AHB1ENR |= PINS_[pin].clock;
 8000bbe:	4b69      	ldr	r3, [pc, #420]	; (8000d64 <pinMode+0x2b0>)
 8000bc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bc2:	4869      	ldr	r0, [pc, #420]	; (8000d68 <pinMode+0x2b4>)
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4403      	add	r3, r0
 8000bd0:	330c      	adds	r3, #12
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a63      	ldr	r2, [pc, #396]	; (8000d64 <pinMode+0x2b0>)
 8000bd6:	430b      	orrs	r3, r1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
 8000bda:	4963      	ldr	r1, [pc, #396]	; (8000d68 <pinMode+0x2b4>)
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	440b      	add	r3, r1
 8000be8:	3310      	adds	r3, #16
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6819      	ldr	r1, [r3, #0]
 8000bee:	485e      	ldr	r0, [pc, #376]	; (8000d68 <pinMode+0x2b4>)
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	4403      	add	r3, r0
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	461c      	mov	r4, r3
 8000c0a:	4857      	ldr	r0, [pc, #348]	; (8000d68 <pinMode+0x2b4>)
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	4403      	add	r3, r0
 8000c18:	3310      	adds	r3, #16
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	ea01 0204 	and.w	r2, r1, r4
 8000c20:	601a      	str	r2, [r3, #0]
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Pull-down resister by setting bit 0x02 */
 8000c22:	4951      	ldr	r1, [pc, #324]	; (8000d68 <pinMode+0x2b4>)
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	440b      	add	r3, r1
 8000c30:	3310      	adds	r3, #16
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68d9      	ldr	r1, [r3, #12]
 8000c36:	484c      	ldr	r0, [pc, #304]	; (8000d68 <pinMode+0x2b4>)
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	4403      	add	r3, r0
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2203      	movs	r2, #3
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	461c      	mov	r4, r3
 8000c52:	4845      	ldr	r0, [pc, #276]	; (8000d68 <pinMode+0x2b4>)
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4403      	add	r3, r0
 8000c60:	3310      	adds	r3, #16
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	ea01 0204 	and.w	r2, r1, r4
 8000c68:	60da      	str	r2, [r3, #12]
		PINS_[pin].GPIO->PUPDR |= (0x02 << (PINS_[pin].pin * 2));
 8000c6a:	493f      	ldr	r1, [pc, #252]	; (8000d68 <pinMode+0x2b4>)
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	4413      	add	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	440b      	add	r3, r1
 8000c78:	3310      	adds	r3, #16
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68d9      	ldr	r1, [r3, #12]
 8000c7e:	483a      	ldr	r0, [pc, #232]	; (8000d68 <pinMode+0x2b4>)
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	4403      	add	r3, r0
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2202      	movs	r2, #2
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	461c      	mov	r4, r3
 8000c98:	4833      	ldr	r0, [pc, #204]	; (8000d68 <pinMode+0x2b4>)
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	4403      	add	r3, r0
 8000ca6:	3310      	adds	r3, #16
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	ea41 0204 	orr.w	r2, r1, r4
 8000cae:	60da      	str	r2, [r3, #12]
}
 8000cb0:	e0b2      	b.n	8000e18 <pinMode+0x364>
	else if(mode == OUTPUT) {
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d159      	bne.n	8000d6c <pinMode+0x2b8>
		RCC->AHB1ENR |= PINS_[pin].clock; 							/* Enable Port Clock */
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <pinMode+0x2b0>)
 8000cba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cbc:	482a      	ldr	r0, [pc, #168]	; (8000d68 <pinMode+0x2b4>)
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4403      	add	r3, r0
 8000cca:	330c      	adds	r3, #12
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a25      	ldr	r2, [pc, #148]	; (8000d64 <pinMode+0x2b0>)
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
		(PINS_[pin].GPIO)->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode */
 8000cd4:	4924      	ldr	r1, [pc, #144]	; (8000d68 <pinMode+0x2b4>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	440b      	add	r3, r1
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6819      	ldr	r1, [r3, #0]
 8000ce8:	481f      	ldr	r0, [pc, #124]	; (8000d68 <pinMode+0x2b4>)
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	4403      	add	r3, r0
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	461c      	mov	r4, r3
 8000d04:	4818      	ldr	r0, [pc, #96]	; (8000d68 <pinMode+0x2b4>)
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4403      	add	r3, r0
 8000d12:	3310      	adds	r3, #16
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	ea01 0204 	and.w	r2, r1, r4
 8000d1a:	601a      	str	r2, [r3, #0]
		(PINS_[pin].GPIO)->MODER |= (0x01 << (PINS_[pin].pin * 2));			/* Set Mode to Output */
 8000d1c:	4912      	ldr	r1, [pc, #72]	; (8000d68 <pinMode+0x2b4>)
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	3310      	adds	r3, #16
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6819      	ldr	r1, [r3, #0]
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <pinMode+0x2b4>)
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	4413      	add	r3, r2
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4403      	add	r3, r0
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2201      	movs	r2, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	461c      	mov	r4, r3
 8000d4a:	4807      	ldr	r0, [pc, #28]	; (8000d68 <pinMode+0x2b4>)
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4403      	add	r3, r0
 8000d58:	3310      	adds	r3, #16
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	ea41 0204 	orr.w	r2, r1, r4
 8000d60:	601a      	str	r2, [r3, #0]
}
 8000d62:	e059      	b.n	8000e18 <pinMode+0x364>
 8000d64:	40023800 	.word	0x40023800
 8000d68:	20000028 	.word	0x20000028
		RCC->AHB1ENR |= PINS_[pin].clock;
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <pinMode+0x370>)
 8000d6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d70:	482d      	ldr	r0, [pc, #180]	; (8000e28 <pinMode+0x374>)
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	4403      	add	r3, r0
 8000d7e:	330c      	adds	r3, #12
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a28      	ldr	r2, [pc, #160]	; (8000e24 <pinMode+0x370>)
 8000d84:	430b      	orrs	r3, r1
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
 8000d88:	4927      	ldr	r1, [pc, #156]	; (8000e28 <pinMode+0x374>)
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3310      	adds	r3, #16
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6819      	ldr	r1, [r3, #0]
 8000d9c:	4822      	ldr	r0, [pc, #136]	; (8000e28 <pinMode+0x374>)
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	4403      	add	r3, r0
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	461c      	mov	r4, r3
 8000db8:	481b      	ldr	r0, [pc, #108]	; (8000e28 <pinMode+0x374>)
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4403      	add	r3, r0
 8000dc6:	3310      	adds	r3, #16
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	ea01 0204 	and.w	r2, r1, r4
 8000dce:	601a      	str	r2, [r3, #0]
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Floating by setting bit 0x01 */
 8000dd0:	4915      	ldr	r1, [pc, #84]	; (8000e28 <pinMode+0x374>)
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	440b      	add	r3, r1
 8000dde:	3310      	adds	r3, #16
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68d9      	ldr	r1, [r3, #12]
 8000de4:	4810      	ldr	r0, [pc, #64]	; (8000e28 <pinMode+0x374>)
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	4613      	mov	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4403      	add	r3, r0
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	461c      	mov	r4, r3
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <pinMode+0x374>)
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	4403      	add	r3, r0
 8000e0e:	3310      	adds	r3, #16
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	ea01 0204 	and.w	r2, r1, r4
 8000e16:	60da      	str	r2, [r3, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc90      	pop	{r4, r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	20000028 	.word	0x20000028

08000e2c <digitalRead>:

int digitalRead(int pin_num) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

	//RCC->AHB1ENR |= PINS_[pin_num].clock;
	//PINS_[pin_num].GPIO->MODER &= ~PINS_[pin_num].pin_clear_mode; 	/* Clear Mode to Input */
	//PINS_[pin_num].GPIO->PUPDR |= 0x00 << (PINS_[pin_num].pin * 2); 	/* Enable Pull-up resister by setting bit 0x01 */

	int out = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]

 	if(PINS_[pin_num].GPIO->IDR & PINS_[pin_num].pin) {
 8000e38:	490e      	ldr	r1, [pc, #56]	; (8000e74 <digitalRead+0x48>)
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	440b      	add	r3, r1
 8000e46:	3310      	adds	r3, #16
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6919      	ldr	r1, [r3, #16]
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <digitalRead+0x48>)
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4403      	add	r3, r0
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <digitalRead+0x3a>
 		out = 1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 	}

	return out;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	20000028 	.word	0x20000028

08000e78 <digitalWrite>:


void digitalWrite(int pin, int logic) {
 8000e78:	b490      	push	{r4, r7}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	//RCC->AHB1ENR |= PINS_[pin].clock; 						/* Enable Port Clock */
	//PINS_[pin].GPIO->MODER &= ~PINS_[pin].pin_clear_mode; 	/* Clear Mode */
	//PINS_[pin].GPIO->MODER |= PINS_[pin].pin_out_mode;		/* Set Mode to Output */

	if(logic) {
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d022      	beq.n	8000ece <digitalWrite+0x56>
		PINS_[pin].GPIO->BSRR |= 0x01 << PINS_[pin].pin;
 8000e88:	4925      	ldr	r1, [pc, #148]	; (8000f20 <digitalWrite+0xa8>)
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	440b      	add	r3, r1
 8000e96:	3310      	adds	r3, #16
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6999      	ldr	r1, [r3, #24]
 8000e9c:	4820      	ldr	r0, [pc, #128]	; (8000f20 <digitalWrite+0xa8>)
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	4403      	add	r3, r0
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2201      	movs	r2, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	461c      	mov	r4, r3
 8000eb4:	481a      	ldr	r0, [pc, #104]	; (8000f20 <digitalWrite+0xa8>)
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	4403      	add	r3, r0
 8000ec2:	3310      	adds	r3, #16
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	ea41 0204 	orr.w	r2, r1, r4
 8000eca:	619a      	str	r2, [r3, #24]
	}
	else {
		PINS_[pin].GPIO->BSRR |= 0x01 << (PINS_[pin].pin + 16);
	}

}
 8000ecc:	e022      	b.n	8000f14 <digitalWrite+0x9c>
		PINS_[pin].GPIO->BSRR |= 0x01 << (PINS_[pin].pin + 16);
 8000ece:	4914      	ldr	r1, [pc, #80]	; (8000f20 <digitalWrite+0xa8>)
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	3310      	adds	r3, #16
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6999      	ldr	r1, [r3, #24]
 8000ee2:	480f      	ldr	r0, [pc, #60]	; (8000f20 <digitalWrite+0xa8>)
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	4403      	add	r3, r0
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3310      	adds	r3, #16
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	461c      	mov	r4, r3
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <digitalWrite+0xa8>)
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	4613      	mov	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4403      	add	r3, r0
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	ea41 0204 	orr.w	r2, r1, r4
 8000f12:	619a      	str	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc90      	pop	{r4, r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000028 	.word	0x20000028

08000f24 <command_read>:
/********************************************************/
//SERIAL
/********************************************************/


int command_read(unsigned char data[]) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(&huart2, data, 3, 10000);
 8000f2c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f30:	2203      	movs	r2, #3
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <command_read+0x20>)
 8000f36:	f002 f9de 	bl	80032f6 <HAL_UART_Receive>
	return 0;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000628 	.word	0x20000628

08000f48 <command_write>:

int command_write(unsigned int pin, unsigned int result, unsigned int test) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	//Write
	unsigned char data[3];
	crc_encode(data, pin, result, test);
 8000f54:	f107 0014 	add.w	r0, r7, #20
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	68f9      	ldr	r1, [r7, #12]
 8000f5e:	f000 f80f 	bl	8000f80 <crc_encode>
	HAL_UART_Transmit(&huart2, data, 3, 100);
 8000f62:	f107 0114 	add.w	r1, r7, #20
 8000f66:	2364      	movs	r3, #100	; 0x64
 8000f68:	2203      	movs	r2, #3
 8000f6a:	4804      	ldr	r0, [pc, #16]	; (8000f7c <command_write+0x34>)
 8000f6c:	f002 f931 	bl	80031d2 <HAL_UART_Transmit>
	return 0;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000628 	.word	0x20000628

08000f80 <crc_encode>:

int crc_encode(unsigned char data[], unsigned int pin, unsigned int result, unsigned int test) {
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
	// Find the data
	unsigned long int crc_packet = ((pin << 16) & 0xFF0000) + ((result << 8) & 0xFF00) + ((test << 4) & 0xF0);
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	61fb      	str	r3, [r7, #28]

	// Calculate CRC Number
	unsigned int remainder = crc_packet % CRC_KEY;
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <crc_encode+0x7c>)
 8000fac:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb0:	0899      	lsrs	r1, r3, #2
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	61bb      	str	r3, [r7, #24]
	unsigned int crc = CRC_KEY - remainder;
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	f1c3 0305 	rsb	r3, r3, #5
 8000fc2:	617b      	str	r3, [r7, #20]

	crc_packet += crc;
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	4413      	add	r3, r2
 8000fca:	61fb      	str	r3, [r7, #28]

	data[0] = ((crc_packet >> 16)) & 0xFF;
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	0c1b      	lsrs	r3, r3, #16
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	701a      	strb	r2, [r3, #0]
	data[1] = ((crc_packet >> 8)) & 0xFF;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	0a1a      	lsrs	r2, r3, #8
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	701a      	strb	r2, [r3, #0]
	data[2] = ((crc_packet) & 0xFF);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	701a      	strb	r2, [r3, #0]

	return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	cccccccd 	.word	0xcccccccd

08001000 <crc_decode>:


int crc_decode(unsigned char data[]) {
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

	// Find the data
	unsigned long int crc_packet = (((unsigned long int)data[0] << 16) & 0xFF0000)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
			+ (((unsigned long int)data[1] << 8) & 0xFF00) + (((unsigned long int)data[2]));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3301      	adds	r3, #1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	3202      	adds	r2, #2
 8001022:	7812      	ldrb	r2, [r2, #0]
	unsigned long int crc_packet = (((unsigned long int)data[0] << 16) & 0xFF0000)
 8001024:	4413      	add	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]

	if(crc_packet % CRC_KEY) {
 8001028:	68f9      	ldr	r1, [r7, #12]
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <crc_decode+0x60>)
 800102c:	fba3 2301 	umull	r2, r3, r3, r1
 8001030:	089a      	lsrs	r2, r3, #2
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	1aca      	subs	r2, r1, r3
 800103a:	2a00      	cmp	r2, #0
 800103c:	d001      	beq.n	8001042 <crc_decode+0x42>
		return 0;
 800103e:	2300      	movs	r3, #0
 8001040:	e008      	b.n	8001054 <crc_decode+0x54>
	}

	data[2] = (data[2] & 0xF0) >> 4;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3302      	adds	r3, #2
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3302      	adds	r3, #2
 800104c:	0912      	lsrs	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]

	return 1;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	cccccccd 	.word	0xcccccccd

08001064 <SystemClock_Config>:

/***********************************************************/
/********* BASIC AUTO-GENERATED STM CONFIGURATIONS *********/
/***********************************************************/
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	2234      	movs	r2, #52	; 0x34
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f002 fce8 	bl	8003a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <SystemClock_Config+0xd4>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a29      	ldr	r2, [pc, #164]	; (8001138 <SystemClock_Config+0xd4>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <SystemClock_Config+0xd4>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <SystemClock_Config+0xd8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010b0:	4a22      	ldr	r2, [pc, #136]	; (800113c <SystemClock_Config+0xd8>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <SystemClock_Config+0xd8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010d8:	2310      	movs	r3, #16
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 fd82 	bl	8002bfc <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010fe:	f000 f8b7 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	230f      	movs	r3, #15
 8001104:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2302      	movs	r3, #2
 8001108:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2102      	movs	r1, #2
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fa22 	bl	8002568 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800112a:	f000 f8a1 	bl	8001270 <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	; 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART2_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001178:	f001 ffde 	bl	8003138 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f000 f875 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000628 	.word	0x20000628
 8001190:	40004400 	.word	0x40004400

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a2c      	ldr	r2, [pc, #176]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a25      	ldr	r2, [pc, #148]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_GPIO_Init+0xd0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <MX_GPIO_Init+0xd0>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_GPIO_Init+0xd0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2120      	movs	r1, #32
 800121e:	4812      	ldr	r0, [pc, #72]	; (8001268 <MX_GPIO_Init+0xd4>)
 8001220:	f001 f916 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_GPIO_Init+0xd8>)
 800123c:	f000 ff74 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001240:	2320      	movs	r3, #32
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_GPIO_Init+0xd4>)
 8001258:	f000 ff66 	bl	8002128 <HAL_GPIO_Init>

}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020800 	.word	0x40020800

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	e7fe      	b.n	8001278 <Error_Handler+0x8>

0800127a <delay>:
#include "main.h"
#include "setup.h"


//Basic Delay
void delay(int n) {
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	int i;
	for(; n > 0; n--) {
 8001282:	e00d      	b.n	80012a0 <delay+0x26>
		for(i =0; i < 3195; i++);
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e002      	b.n	8001290 <delay+0x16>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3301      	adds	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f640 427a 	movw	r2, #3194	; 0xc7a
 8001296:	4293      	cmp	r3, r2
 8001298:	ddf7      	ble.n	800128a <delay+0x10>
	for(; n > 0; n--) {
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3b01      	subs	r3, #1
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	dcee      	bgt.n	8001284 <delay+0xa>
	}

}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <pin_set>:

struct pin pin_set(uint32_t pin, uint32_t clock, GPIO_TypeDef * gpio,  uint8_t pin_id) {
 80012b4:	b4b0      	push	{r4, r5, r7}
 80012b6:	b08b      	sub	sp, #44	; 0x2c
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	603b      	str	r3, [r7, #0]

	struct pin P;
	P.pin = pin;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	613b      	str	r3, [r7, #16]
	P.pin_id = pin_id;
 80012c6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	P.clock = clock;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	61fb      	str	r3, [r7, #28]
	P.GPIO = gpio;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	623b      	str	r3, [r7, #32]

	return P;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	461d      	mov	r5, r3
 80012da:	f107 0410 	add.w	r4, r7, #16
 80012de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	372c      	adds	r7, #44	; 0x2c
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bcb0      	pop	{r4, r5, r7}
 80012f2:	4770      	bx	lr

080012f4 <init_pins>:

//Initialize pin struct array
void init_pins(struct pin pins[]) {
 80012f4:	b5b0      	push	{r4, r5, r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	61f8      	str	r0, [r7, #28]

	//Pin 0 Example | PA5
	pins[0] = pin_set(0x05, 0x01, GPIOA, 0);
 80012fc:	69fc      	ldr	r4, [r7, #28]
 80012fe:	4638      	mov	r0, r7
 8001300:	2300      	movs	r3, #0
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	4bc9      	ldr	r3, [pc, #804]	; (800162c <init_pins+0x338>)
 8001306:	2201      	movs	r2, #1
 8001308:	2105      	movs	r1, #5
 800130a:	f7ff ffd3 	bl	80012b4 <pin_set>
 800130e:	4625      	mov	r5, r4
 8001310:	463c      	mov	r4, r7
 8001312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001316:	e894 0003 	ldmia.w	r4, {r0, r1}
 800131a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 1 | PD2
	pins[1] = pin_set(0x02, 0x08, GPIOD, 1);
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	f103 0418 	add.w	r4, r3, #24
 8001324:	4638      	mov	r0, r7
 8001326:	2301      	movs	r3, #1
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4bc1      	ldr	r3, [pc, #772]	; (8001630 <init_pins+0x33c>)
 800132c:	2208      	movs	r2, #8
 800132e:	2102      	movs	r1, #2
 8001330:	f7ff ffc0 	bl	80012b4 <pin_set>
 8001334:	4625      	mov	r5, r4
 8001336:	463c      	mov	r4, r7
 8001338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001340:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 2 | PC12
	pins[2] = pin_set(0x0C, 0x04, GPIOC, 2);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800134a:	4638      	mov	r0, r7
 800134c:	2302      	movs	r3, #2
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	4bb8      	ldr	r3, [pc, #736]	; (8001634 <init_pins+0x340>)
 8001352:	2204      	movs	r2, #4
 8001354:	210c      	movs	r1, #12
 8001356:	f7ff ffad 	bl	80012b4 <pin_set>
 800135a:	4625      	mov	r5, r4
 800135c:	463c      	mov	r4, r7
 800135e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001362:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001366:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 3 | PC11
	pins[3] = pin_set(0x0B, 0x04, GPIOC, 3);
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001370:	4638      	mov	r0, r7
 8001372:	2303      	movs	r3, #3
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	4baf      	ldr	r3, [pc, #700]	; (8001634 <init_pins+0x340>)
 8001378:	2204      	movs	r2, #4
 800137a:	210b      	movs	r1, #11
 800137c:	f7ff ff9a 	bl	80012b4 <pin_set>
 8001380:	4625      	mov	r5, r4
 8001382:	463c      	mov	r4, r7
 8001384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001388:	e894 0003 	ldmia.w	r4, {r0, r1}
 800138c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 4 | PC10
	pins[4] = pin_set(0x0A, 0x04, GPIOC, 4);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001396:	4638      	mov	r0, r7
 8001398:	2304      	movs	r3, #4
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	4ba5      	ldr	r3, [pc, #660]	; (8001634 <init_pins+0x340>)
 800139e:	2204      	movs	r2, #4
 80013a0:	210a      	movs	r1, #10
 80013a2:	f7ff ff87 	bl	80012b4 <pin_set>
 80013a6:	4625      	mov	r5, r4
 80013a8:	463c      	mov	r4, r7
 80013aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013b2:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 5 | PB8
	pins[5] = pin_set(0x08, 0x02, GPIOB, 5);
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80013bc:	4638      	mov	r0, r7
 80013be:	2305      	movs	r3, #5
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4b9d      	ldr	r3, [pc, #628]	; (8001638 <init_pins+0x344>)
 80013c4:	2202      	movs	r2, #2
 80013c6:	2108      	movs	r1, #8
 80013c8:	f7ff ff74 	bl	80012b4 <pin_set>
 80013cc:	4625      	mov	r5, r4
 80013ce:	463c      	mov	r4, r7
 80013d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d8:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 6 | PC6
	pins[6] = pin_set(0x06, 0x04, GPIOC, 6);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f103 0490 	add.w	r4, r3, #144	; 0x90
 80013e2:	4638      	mov	r0, r7
 80013e4:	2306      	movs	r3, #6
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	4b92      	ldr	r3, [pc, #584]	; (8001634 <init_pins+0x340>)
 80013ea:	2204      	movs	r2, #4
 80013ec:	2106      	movs	r1, #6
 80013ee:	f7ff ff61 	bl	80012b4 <pin_set>
 80013f2:	4625      	mov	r5, r4
 80013f4:	463c      	mov	r4, r7
 80013f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013fe:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 7 | PC9
	pins[7] = pin_set(0x09, 0x04, GPIOC, 7);
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8001408:	4638      	mov	r0, r7
 800140a:	2307      	movs	r3, #7
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4b89      	ldr	r3, [pc, #548]	; (8001634 <init_pins+0x340>)
 8001410:	2204      	movs	r2, #4
 8001412:	2109      	movs	r1, #9
 8001414:	f7ff ff4e 	bl	80012b4 <pin_set>
 8001418:	4625      	mov	r5, r4
 800141a:	463c      	mov	r4, r7
 800141c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001420:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001424:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 8 | PC8
	pins[8] = pin_set(0x08, 0x04, GPIOC, 8);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 800142e:	4638      	mov	r0, r7
 8001430:	2308      	movs	r3, #8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	4b7f      	ldr	r3, [pc, #508]	; (8001634 <init_pins+0x340>)
 8001436:	2204      	movs	r2, #4
 8001438:	2108      	movs	r1, #8
 800143a:	f7ff ff3b 	bl	80012b4 <pin_set>
 800143e:	4625      	mov	r5, r4
 8001440:	463c      	mov	r4, r7
 8001442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	e894 0003 	ldmia.w	r4, {r0, r1}
 800144a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 9 | REF
	pins[9] = pin_set(0x00, 0x00, GPIOA, 9);
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8001454:	4638      	mov	r0, r7
 8001456:	2309      	movs	r3, #9
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	4b74      	ldr	r3, [pc, #464]	; (800162c <init_pins+0x338>)
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	f7ff ff28 	bl	80012b4 <pin_set>
 8001464:	4625      	mov	r5, r4
 8001466:	463c      	mov	r4, r7
 8001468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001470:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 10 | BOOT0
	pins[10] = pin_set(0x00, 0x00, GPIOA, 10);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800147a:	4638      	mov	r0, r7
 800147c:	230a      	movs	r3, #10
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <init_pins+0x338>)
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	f7ff ff15 	bl	80012b4 <pin_set>
 800148a:	4625      	mov	r5, r4
 800148c:	463c      	mov	r4, r7
 800148e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001496:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 11 | E5V
	pins[11] = pin_set(0x00, 0x00, GPIOA, 11);
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f503 7484 	add.w	r4, r3, #264	; 0x108
 80014a0:	4638      	mov	r0, r7
 80014a2:	230b      	movs	r3, #11
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	4b61      	ldr	r3, [pc, #388]	; (800162c <init_pins+0x338>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	f7ff ff02 	bl	80012b4 <pin_set>
 80014b0:	4625      	mov	r5, r4
 80014b2:	463c      	mov	r4, r7
 80014b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014bc:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 12 | VDD
	pins[12] = pin_set(0x00, 0x00, GPIOA, 12);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80014c6:	4638      	mov	r0, r7
 80014c8:	230c      	movs	r3, #12
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4b57      	ldr	r3, [pc, #348]	; (800162c <init_pins+0x338>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	f7ff feef 	bl	80012b4 <pin_set>
 80014d6:	4625      	mov	r5, r4
 80014d8:	463c      	mov	r4, r7
 80014da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014e2:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 13 | AVDD
	pins[13] = pin_set(0x00, 0x00, GPIOA, 13);
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f503 749c 	add.w	r4, r3, #312	; 0x138
 80014ec:	4638      	mov	r0, r7
 80014ee:	230d      	movs	r3, #13
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	4b4e      	ldr	r3, [pc, #312]	; (800162c <init_pins+0x338>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	f7ff fedc 	bl	80012b4 <pin_set>
 80014fc:	4625      	mov	r5, r4
 80014fe:	463c      	mov	r4, r7
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001508:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 14 | U5V
	pins[14] = pin_set(0x00, 0x00, GPIOA, 14);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8001512:	4638      	mov	r0, r7
 8001514:	230e      	movs	r3, #14
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	4b44      	ldr	r3, [pc, #272]	; (800162c <init_pins+0x338>)
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	f7ff fec9 	bl	80012b4 <pin_set>
 8001522:	4625      	mov	r5, r4
 8001524:	463c      	mov	r4, r7
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800152e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 15 | PB9
	pins[15] = pin_set(0x09, 0x04, GPIOC, 15);
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8001538:	4638      	mov	r0, r7
 800153a:	230f      	movs	r3, #15
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <init_pins+0x340>)
 8001540:	2204      	movs	r2, #4
 8001542:	2109      	movs	r1, #9
 8001544:	f7ff feb6 	bl	80012b4 <pin_set>
 8001548:	4625      	mov	r5, r4
 800154a:	463c      	mov	r4, r7
 800154c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001550:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001554:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 16 | PC5
	pins[16] = pin_set(0x05, 0x04, GPIOC, 16);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 800155e:	4638      	mov	r0, r7
 8001560:	2310      	movs	r3, #16
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4b33      	ldr	r3, [pc, #204]	; (8001634 <init_pins+0x340>)
 8001566:	2204      	movs	r2, #4
 8001568:	2105      	movs	r1, #5
 800156a:	f7ff fea3 	bl	80012b4 <pin_set>
 800156e:	4625      	mov	r5, r4
 8001570:	463c      	mov	r4, r7
 8001572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001576:	e894 0003 	ldmia.w	r4, {r0, r1}
 800157a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 17 | PA14
	pins[17] = pin_set(0x0E, 0x01, GPIOA, 17);
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 8001584:	4638      	mov	r0, r7
 8001586:	2311      	movs	r3, #17
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <init_pins+0x338>)
 800158c:	2201      	movs	r2, #1
 800158e:	210e      	movs	r1, #14
 8001590:	f7ff fe90 	bl	80012b4 <pin_set>
 8001594:	4625      	mov	r5, r4
 8001596:	463c      	mov	r4, r7
 8001598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a0:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 18 | 3V3
	pins[18] = pin_set(0x00, 0x00, GPIOA, 18);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 80015aa:	4638      	mov	r0, r7
 80015ac:	2312      	movs	r3, #18
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <init_pins+0x338>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	f7ff fe7d 	bl	80012b4 <pin_set>
 80015ba:	4625      	mov	r5, r4
 80015bc:	463c      	mov	r4, r7
 80015be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015c6:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 19 | PA13
	pins[19] = pin_set(0x0D, 0x01, GPIOA, 19);
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 80015d0:	4638      	mov	r0, r7
 80015d2:	2313      	movs	r3, #19
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <init_pins+0x338>)
 80015d8:	2201      	movs	r2, #1
 80015da:	210d      	movs	r1, #13
 80015dc:	f7ff fe6a 	bl	80012b4 <pin_set>
 80015e0:	4625      	mov	r5, r4
 80015e2:	463c      	mov	r4, r7
 80015e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ec:	e885 0003 	stmia.w	r5, {r0, r1}


	//Pin 20 | RESET
	pins[20] = pin_set(0x00, 0x00, GPIOA, 20);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 80015f6:	4638      	mov	r0, r7
 80015f8:	2314      	movs	r3, #20
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <init_pins+0x338>)
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	f7ff fe57 	bl	80012b4 <pin_set>
 8001606:	4625      	mov	r5, r4
 8001608:	463c      	mov	r4, r7
 800160a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001612:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 21 | PA6
	pins[21] = pin_set(0x06, 0x01, GPIOA, 21);
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800161c:	4638      	mov	r0, r7
 800161e:	2315      	movs	r3, #21
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4b02      	ldr	r3, [pc, #8]	; (800162c <init_pins+0x338>)
 8001624:	2201      	movs	r2, #1
 8001626:	2106      	movs	r1, #6
 8001628:	e008      	b.n	800163c <init_pins+0x348>
 800162a:	bf00      	nop
 800162c:	40020000 	.word	0x40020000
 8001630:	40020c00 	.word	0x40020c00
 8001634:	40020800 	.word	0x40020800
 8001638:	40020400 	.word	0x40020400
 800163c:	f7ff fe3a 	bl	80012b4 <pin_set>
 8001640:	4625      	mov	r5, r4
 8001642:	463c      	mov	r4, r7
 8001644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001648:	e894 0003 	ldmia.w	r4, {r0, r1}
 800164c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 22 | PA11
	pins[22] = pin_set(0x0B, 0x01, GPIOA, 22);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8001656:	4638      	mov	r0, r7
 8001658:	2316      	movs	r3, #22
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	4bc9      	ldr	r3, [pc, #804]	; (8001984 <init_pins+0x690>)
 800165e:	2201      	movs	r2, #1
 8001660:	210b      	movs	r1, #11
 8001662:	f7ff fe27 	bl	80012b4 <pin_set>
 8001666:	4625      	mov	r5, r4
 8001668:	463c      	mov	r4, r7
 800166a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800166e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001672:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 23 | PA5
	pins[23] = pin_set(0x05, 0x01, GPIOA, 23);
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f503 740a 	add.w	r4, r3, #552	; 0x228
 800167c:	4638      	mov	r0, r7
 800167e:	2317      	movs	r3, #23
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	4bc0      	ldr	r3, [pc, #768]	; (8001984 <init_pins+0x690>)
 8001684:	2201      	movs	r2, #1
 8001686:	2105      	movs	r1, #5
 8001688:	f7ff fe14 	bl	80012b4 <pin_set>
 800168c:	4625      	mov	r5, r4
 800168e:	463c      	mov	r4, r7
 8001690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001694:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001698:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 24 | PA12
	pins[24] = pin_set(0x0C, 0x01, GPIOA, 24);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f503 7410 	add.w	r4, r3, #576	; 0x240
 80016a2:	4638      	mov	r0, r7
 80016a4:	2318      	movs	r3, #24
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4bb6      	ldr	r3, [pc, #728]	; (8001984 <init_pins+0x690>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	210c      	movs	r1, #12
 80016ae:	f7ff fe01 	bl	80012b4 <pin_set>
 80016b2:	4625      	mov	r5, r4
 80016b4:	463c      	mov	r4, r7
 80016b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016be:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 25 | PC13
	pins[25] = pin_set(0x0D, 0x04, GPIOC, 25);
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f503 7416 	add.w	r4, r3, #600	; 0x258
 80016c8:	4638      	mov	r0, r7
 80016ca:	2319      	movs	r3, #25
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	4bae      	ldr	r3, [pc, #696]	; (8001988 <init_pins+0x694>)
 80016d0:	2204      	movs	r2, #4
 80016d2:	210d      	movs	r1, #13
 80016d4:	f7ff fdee 	bl	80012b4 <pin_set>
 80016d8:	4625      	mov	r5, r4
 80016da:	463c      	mov	r4, r7
 80016dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e4:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 26 | PB7
	pins[26] = pin_set(0x07, 0x02, GPIOB, 26);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f503 741c 	add.w	r4, r3, #624	; 0x270
 80016ee:	4638      	mov	r0, r7
 80016f0:	231a      	movs	r3, #26
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	4ba5      	ldr	r3, [pc, #660]	; (800198c <init_pins+0x698>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	2107      	movs	r1, #7
 80016fa:	f7ff fddb 	bl	80012b4 <pin_set>
 80016fe:	4625      	mov	r5, r4
 8001700:	463c      	mov	r4, r7
 8001702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001706:	e894 0003 	ldmia.w	r4, {r0, r1}
 800170a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 27 | PA15
	pins[27] = pin_set(0x0F, 0x01, GPIOA, 27);
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f503 7422 	add.w	r4, r3, #648	; 0x288
 8001714:	4638      	mov	r0, r7
 8001716:	231b      	movs	r3, #27
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	4b9a      	ldr	r3, [pc, #616]	; (8001984 <init_pins+0x690>)
 800171c:	2201      	movs	r2, #1
 800171e:	210f      	movs	r1, #15
 8001720:	f7ff fdc8 	bl	80012b4 <pin_set>
 8001724:	4625      	mov	r5, r4
 8001726:	463c      	mov	r4, r7
 8001728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001730:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 28 | 5V
	pins[28] = pin_set(0x00, 0x00, GPIOA, 28);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 800173a:	4638      	mov	r0, r7
 800173c:	231c      	movs	r3, #28
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	4b90      	ldr	r3, [pc, #576]	; (8001984 <init_pins+0x690>)
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	f7ff fdb5 	bl	80012b4 <pin_set>
 800174a:	4625      	mov	r5, r4
 800174c:	463c      	mov	r4, r7
 800174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001756:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 29 | PB2
	pins[29] = pin_set(0x02, 0x02, GPIOB, 29);
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 8001760:	4638      	mov	r0, r7
 8001762:	231d      	movs	r3, #29
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	4b89      	ldr	r3, [pc, #548]	; (800198c <init_pins+0x698>)
 8001768:	2202      	movs	r2, #2
 800176a:	2102      	movs	r1, #2
 800176c:	f7ff fda2 	bl	80012b4 <pin_set>
 8001770:	4625      	mov	r5, r4
 8001772:	463c      	mov	r4, r7
 8001774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001778:	e894 0003 	ldmia.w	r4, {r0, r1}
 800177c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 30 | PB6
	pins[30] = pin_set(0x06, 0x02, GPIOB, 30);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 8001786:	4638      	mov	r0, r7
 8001788:	231e      	movs	r3, #30
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	4b7f      	ldr	r3, [pc, #508]	; (800198c <init_pins+0x698>)
 800178e:	2202      	movs	r2, #2
 8001790:	2106      	movs	r1, #6
 8001792:	f7ff fd8f 	bl	80012b4 <pin_set>
 8001796:	4625      	mov	r5, r4
 8001798:	463c      	mov	r4, r7
 800179a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800179e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017a2:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 31 | PB12
	pins[31] = pin_set(0x0C, 0x02, GPIOC, 31);
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 80017ac:	4638      	mov	r0, r7
 80017ae:	231f      	movs	r3, #31
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4b75      	ldr	r3, [pc, #468]	; (8001988 <init_pins+0x694>)
 80017b4:	2202      	movs	r2, #2
 80017b6:	210c      	movs	r1, #12
 80017b8:	f7ff fd7c 	bl	80012b4 <pin_set>
 80017bc:	4625      	mov	r5, r4
 80017be:	463c      	mov	r4, r7
 80017c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017c8:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 32 | PA7
	pins[32] = pin_set(0x07, 0x01, GPIOA, 32);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f503 7440 	add.w	r4, r3, #768	; 0x300
 80017d2:	4638      	mov	r0, r7
 80017d4:	2320      	movs	r3, #32
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	4b6a      	ldr	r3, [pc, #424]	; (8001984 <init_pins+0x690>)
 80017da:	2201      	movs	r2, #1
 80017dc:	2107      	movs	r1, #7
 80017de:	f7ff fd69 	bl	80012b4 <pin_set>
 80017e2:	4625      	mov	r5, r4
 80017e4:	463c      	mov	r4, r7
 80017e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ee:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 33 | PC15
	pins[33] = pin_set(0x0F, 0x04, GPIOC, 33);
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f503 7446 	add.w	r4, r3, #792	; 0x318
 80017f8:	4638      	mov	r0, r7
 80017fa:	2321      	movs	r3, #33	; 0x21
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	4b62      	ldr	r3, [pc, #392]	; (8001988 <init_pins+0x694>)
 8001800:	2204      	movs	r2, #4
 8001802:	210f      	movs	r1, #15
 8001804:	f7ff fd56 	bl	80012b4 <pin_set>
 8001808:	4625      	mov	r5, r4
 800180a:	463c      	mov	r4, r7
 800180c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001810:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001814:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 34 | PA0
	pins[34] = pin_set(0x00, 0x01, GPIOA, 34);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f503 744c 	add.w	r4, r3, #816	; 0x330
 800181e:	4638      	mov	r0, r7
 8001820:	2322      	movs	r3, #34	; 0x22
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	4b57      	ldr	r3, [pc, #348]	; (8001984 <init_pins+0x690>)
 8001826:	2201      	movs	r2, #1
 8001828:	2100      	movs	r1, #0
 800182a:	f7ff fd43 	bl	80012b4 <pin_set>
 800182e:	4625      	mov	r5, r4
 8001830:	463c      	mov	r4, r7
 8001832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001836:	e894 0003 	ldmia.w	r4, {r0, r1}
 800183a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 35 | PC14
	pins[35] = pin_set(0x0E, 0x04, GPIOC, 35);
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8001844:	4638      	mov	r0, r7
 8001846:	2323      	movs	r3, #35	; 0x23
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	4b4f      	ldr	r3, [pc, #316]	; (8001988 <init_pins+0x694>)
 800184c:	2204      	movs	r2, #4
 800184e:	210e      	movs	r1, #14
 8001850:	f7ff fd30 	bl	80012b4 <pin_set>
 8001854:	4625      	mov	r5, r4
 8001856:	463c      	mov	r4, r7
 8001858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001860:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 36 | VIN
	pins[36] = pin_set(0x00, 0x00, GPIOA, 36);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f503 7458 	add.w	r4, r3, #864	; 0x360
 800186a:	4638      	mov	r0, r7
 800186c:	2324      	movs	r3, #36	; 0x24
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <init_pins+0x690>)
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	f7ff fd1d 	bl	80012b4 <pin_set>
 800187a:	4625      	mov	r5, r4
 800187c:	463c      	mov	r4, r7
 800187e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001882:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001886:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 37 | PA8
	pins[37] = pin_set(0x08, 0x01, GPIOA, 37);
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 745e 	add.w	r4, r3, #888	; 0x378
 8001890:	4638      	mov	r0, r7
 8001892:	2325      	movs	r3, #37	; 0x25
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <init_pins+0x690>)
 8001898:	2201      	movs	r2, #1
 800189a:	2108      	movs	r1, #8
 800189c:	f7ff fd0a 	bl	80012b4 <pin_set>
 80018a0:	4625      	mov	r5, r4
 80018a2:	463c      	mov	r4, r7
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ac:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 38 | PB1
	pins[38] = pin_set(0x01, 0x02, GPIOB, 38);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 7464 	add.w	r4, r3, #912	; 0x390
 80018b6:	4638      	mov	r0, r7
 80018b8:	2326      	movs	r3, #38	; 0x26
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	4b33      	ldr	r3, [pc, #204]	; (800198c <init_pins+0x698>)
 80018be:	2202      	movs	r2, #2
 80018c0:	2101      	movs	r1, #1
 80018c2:	f7ff fcf7 	bl	80012b4 <pin_set>
 80018c6:	4625      	mov	r5, r4
 80018c8:	463c      	mov	r4, r7
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018d2:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 39 | PA9
	pins[39] = pin_set(0x09, 0x01, GPIOA, 39);
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f503 746a 	add.w	r4, r3, #936	; 0x3a8
 80018dc:	4638      	mov	r0, r7
 80018de:	2327      	movs	r3, #39	; 0x27
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	4b28      	ldr	r3, [pc, #160]	; (8001984 <init_pins+0x690>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	2109      	movs	r1, #9
 80018e8:	f7ff fce4 	bl	80012b4 <pin_set>
 80018ec:	4625      	mov	r5, r4
 80018ee:	463c      	mov	r4, r7
 80018f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018f8:	e885 0003 	stmia.w	r5, {r0, r1}


	//Pin 40 | PC7
	pins[40] = pin_set(0x07, 0x04, GPIOC, 40);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f503 7470 	add.w	r4, r3, #960	; 0x3c0
 8001902:	4638      	mov	r0, r7
 8001904:	2328      	movs	r3, #40	; 0x28
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <init_pins+0x694>)
 800190a:	2204      	movs	r2, #4
 800190c:	2107      	movs	r1, #7
 800190e:	f7ff fcd1 	bl	80012b4 <pin_set>
 8001912:	4625      	mov	r5, r4
 8001914:	463c      	mov	r4, r7
 8001916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800191e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 41 | PH1
	pins[41] = pin_set(0x00, 0x00, GPIOA, 41);
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f503 7476 	add.w	r4, r3, #984	; 0x3d8
 8001928:	4638      	mov	r0, r7
 800192a:	2329      	movs	r3, #41	; 0x29
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <init_pins+0x690>)
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	f7ff fcbe 	bl	80012b4 <pin_set>
 8001938:	4625      	mov	r5, r4
 800193a:	463c      	mov	r4, r7
 800193c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001940:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001944:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 42 | PA4
	pins[42] = pin_set(0x04, 0x01, GPIOA, 42);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f503 747c 	add.w	r4, r3, #1008	; 0x3f0
 800194e:	4638      	mov	r0, r7
 8001950:	232a      	movs	r3, #42	; 0x2a
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <init_pins+0x690>)
 8001956:	2201      	movs	r2, #1
 8001958:	2104      	movs	r1, #4
 800195a:	f7ff fcab 	bl	80012b4 <pin_set>
 800195e:	4625      	mov	r5, r4
 8001960:	463c      	mov	r4, r7
 8001962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001966:	e894 0003 	ldmia.w	r4, {r0, r1}
 800196a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 43 | PH0
	pins[43] = pin_set(0x00, 0x00, GPIOA, 43);
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f503 6481 	add.w	r4, r3, #1032	; 0x408
 8001974:	4638      	mov	r0, r7
 8001976:	232b      	movs	r3, #43	; 0x2b
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4b02      	ldr	r3, [pc, #8]	; (8001984 <init_pins+0x690>)
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	e006      	b.n	8001990 <init_pins+0x69c>
 8001982:	bf00      	nop
 8001984:	40020000 	.word	0x40020000
 8001988:	40020800 	.word	0x40020800
 800198c:	40020400 	.word	0x40020400
 8001990:	f7ff fc90 	bl	80012b4 <pin_set>
 8001994:	4625      	mov	r5, r4
 8001996:	463c      	mov	r4, r7
 8001998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800199a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019a0:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 44 | PA1
	pins[44] = pin_set(0x01, 0x01, GPIOA, 44);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f503 6484 	add.w	r4, r3, #1056	; 0x420
 80019aa:	4638      	mov	r0, r7
 80019ac:	232c      	movs	r3, #44	; 0x2c
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	4bb3      	ldr	r3, [pc, #716]	; (8001c80 <init_pins+0x98c>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	2101      	movs	r1, #1
 80019b6:	f7ff fc7d 	bl	80012b4 <pin_set>
 80019ba:	4625      	mov	r5, r4
 80019bc:	463c      	mov	r4, r7
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c6:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 45 | PB4
	pins[45] = pin_set(0x04, 0x02, GPIOB, 45);
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f503 6487 	add.w	r4, r3, #1080	; 0x438
 80019d0:	4638      	mov	r0, r7
 80019d2:	232d      	movs	r3, #45	; 0x2d
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	4bab      	ldr	r3, [pc, #684]	; (8001c84 <init_pins+0x990>)
 80019d8:	2202      	movs	r2, #2
 80019da:	2104      	movs	r1, #4
 80019dc:	f7ff fc6a 	bl	80012b4 <pin_set>
 80019e0:	4625      	mov	r5, r4
 80019e2:	463c      	mov	r4, r7
 80019e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ec:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 46 | PB14
	pins[46] = pin_set(0x0E, 0x02, GPIOB, 46);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 80019f6:	4638      	mov	r0, r7
 80019f8:	232e      	movs	r3, #46	; 0x2e
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	4ba1      	ldr	r3, [pc, #644]	; (8001c84 <init_pins+0x990>)
 80019fe:	2202      	movs	r2, #2
 8001a00:	210e      	movs	r1, #14
 8001a02:	f7ff fc57 	bl	80012b4 <pin_set>
 8001a06:	4625      	mov	r5, r4
 8001a08:	463c      	mov	r4, r7
 8001a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a12:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 47 | PB10
	pins[47] = pin_set(0x0A, 0x02, GPIOB, 47);
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f503 648d 	add.w	r4, r3, #1128	; 0x468
 8001a1c:	4638      	mov	r0, r7
 8001a1e:	232f      	movs	r3, #47	; 0x2f
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	4b98      	ldr	r3, [pc, #608]	; (8001c84 <init_pins+0x990>)
 8001a24:	2202      	movs	r2, #2
 8001a26:	210a      	movs	r1, #10
 8001a28:	f7ff fc44 	bl	80012b4 <pin_set>
 8001a2c:	4625      	mov	r5, r4
 8001a2e:	463c      	mov	r4, r7
 8001a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a38:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 48 | PB15
	pins[48] = pin_set(0x0F, 0x02, GPIOB, 48);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f503 6490 	add.w	r4, r3, #1152	; 0x480
 8001a42:	4638      	mov	r0, r7
 8001a44:	2330      	movs	r3, #48	; 0x30
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4b8e      	ldr	r3, [pc, #568]	; (8001c84 <init_pins+0x990>)
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	210f      	movs	r1, #15
 8001a4e:	f7ff fc31 	bl	80012b4 <pin_set>
 8001a52:	4625      	mov	r5, r4
 8001a54:	463c      	mov	r4, r7
 8001a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a5e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 49 | PC2
	pins[49] = pin_set(0x02, 0x04, GPIOC, 49);
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8001a68:	4638      	mov	r0, r7
 8001a6a:	2331      	movs	r3, #49	; 0x31
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	4b86      	ldr	r3, [pc, #536]	; (8001c88 <init_pins+0x994>)
 8001a70:	2204      	movs	r2, #4
 8001a72:	2102      	movs	r1, #2
 8001a74:	f7ff fc1e 	bl	80012b4 <pin_set>
 8001a78:	4625      	mov	r5, r4
 8001a7a:	463c      	mov	r4, r7
 8001a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a84:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 50 | PC1
	pins[50] = pin_set(0x01, 0x04, GPIOC, 50);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f503 6496 	add.w	r4, r3, #1200	; 0x4b0
 8001a8e:	4638      	mov	r0, r7
 8001a90:	2332      	movs	r3, #50	; 0x32
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4b7c      	ldr	r3, [pc, #496]	; (8001c88 <init_pins+0x994>)
 8001a96:	2204      	movs	r2, #4
 8001a98:	2101      	movs	r1, #1
 8001a9a:	f7ff fc0b 	bl	80012b4 <pin_set>
 8001a9e:	4625      	mov	r5, r4
 8001aa0:	463c      	mov	r4, r7
 8001aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aaa:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 51 | VBAT
	pins[51] = pin_set(0x00, 0x00, GPIOA, 51);
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 8001ab4:	4638      	mov	r0, r7
 8001ab6:	2333      	movs	r3, #51	; 0x33
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	4b71      	ldr	r3, [pc, #452]	; (8001c80 <init_pins+0x98c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	f7ff fbf8 	bl	80012b4 <pin_set>
 8001ac4:	4625      	mov	r5, r4
 8001ac6:	463c      	mov	r4, r7
 8001ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001acc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ad0:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 52 | PB0
	pins[52] = pin_set(0x00, 0x02, GPIOB, 52);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f503 649c 	add.w	r4, r3, #1248	; 0x4e0
 8001ada:	4638      	mov	r0, r7
 8001adc:	2334      	movs	r3, #52	; 0x34
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	4b68      	ldr	r3, [pc, #416]	; (8001c84 <init_pins+0x990>)
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f7ff fbe5 	bl	80012b4 <pin_set>
 8001aea:	4625      	mov	r5, r4
 8001aec:	463c      	mov	r4, r7
 8001aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af6:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 53 | PB3
	pins[53] = pin_set(0x03, 0x02, GPIOB, 53);
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f503 649f 	add.w	r4, r3, #1272	; 0x4f8
 8001b00:	4638      	mov	r0, r7
 8001b02:	2335      	movs	r3, #53	; 0x35
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	4b5f      	ldr	r3, [pc, #380]	; (8001c84 <init_pins+0x990>)
 8001b08:	2202      	movs	r2, #2
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	f7ff fbd2 	bl	80012b4 <pin_set>
 8001b10:	4625      	mov	r5, r4
 8001b12:	463c      	mov	r4, r7
 8001b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b1c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 54 | AGND
	pins[54] = pin_set(0x00, 0x00, GPIOA, 54);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f503 64a2 	add.w	r4, r3, #1296	; 0x510
 8001b26:	4638      	mov	r0, r7
 8001b28:	2336      	movs	r3, #54	; 0x36
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	4b54      	ldr	r3, [pc, #336]	; (8001c80 <init_pins+0x98c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2100      	movs	r1, #0
 8001b32:	f7ff fbbf 	bl	80012b4 <pin_set>
 8001b36:	4625      	mov	r5, r4
 8001b38:	463c      	mov	r4, r7
 8001b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b42:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 55 | PB5
	pins[55] = pin_set(0x05, 0x02, GPIOB, 55);
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f503 64a5 	add.w	r4, r3, #1320	; 0x528
 8001b4c:	4638      	mov	r0, r7
 8001b4e:	2337      	movs	r3, #55	; 0x37
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <init_pins+0x990>)
 8001b54:	2202      	movs	r2, #2
 8001b56:	2105      	movs	r1, #5
 8001b58:	f7ff fbac 	bl	80012b4 <pin_set>
 8001b5c:	4625      	mov	r5, r4
 8001b5e:	463c      	mov	r4, r7
 8001b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b68:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 56 | PB13
	pins[56] = pin_set(0x0D, 0x02, GPIOB, 56);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f503 64a8 	add.w	r4, r3, #1344	; 0x540
 8001b72:	4638      	mov	r0, r7
 8001b74:	2338      	movs	r3, #56	; 0x38
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <init_pins+0x990>)
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	210d      	movs	r1, #13
 8001b7e:	f7ff fb99 	bl	80012b4 <pin_set>
 8001b82:	4625      	mov	r5, r4
 8001b84:	463c      	mov	r4, r7
 8001b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b8e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 57 | PC3
	pins[57] = pin_set(0x03, 0x04, GPIOC, 57);
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f503 64ab 	add.w	r4, r3, #1368	; 0x558
 8001b98:	4638      	mov	r0, r7
 8001b9a:	2339      	movs	r3, #57	; 0x39
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <init_pins+0x994>)
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	2103      	movs	r1, #3
 8001ba4:	f7ff fb86 	bl	80012b4 <pin_set>
 8001ba8:	4625      	mov	r5, r4
 8001baa:	463c      	mov	r4, r7
 8001bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bb4:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 58 | PC0
	pins[58] = pin_set(0x00, 0x04, GPIOC, 58);
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f503 64ae 	add.w	r4, r3, #1392	; 0x570
 8001bbe:	4638      	mov	r0, r7
 8001bc0:	233a      	movs	r3, #58	; 0x3a
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <init_pins+0x994>)
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	2100      	movs	r1, #0
 8001bca:	f7ff fb73 	bl	80012b4 <pin_set>
 8001bce:	4625      	mov	r5, r4
 8001bd0:	463c      	mov	r4, r7
 8001bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bda:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 59 | PA3
	pins[59] = pin_set(0x03, 0x01, GPIOA, 59);
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f503 64b1 	add.w	r4, r3, #1416	; 0x588
 8001be4:	4638      	mov	r0, r7
 8001be6:	233b      	movs	r3, #59	; 0x3b
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <init_pins+0x98c>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	2103      	movs	r1, #3
 8001bf0:	f7ff fb60 	bl	80012b4 <pin_set>
 8001bf4:	4625      	mov	r5, r4
 8001bf6:	463c      	mov	r4, r7
 8001bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c00:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 60 | PA2
	pins[60] = pin_set(0x02, 0x01, GPIOA, 60);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8001c0a:	4638      	mov	r0, r7
 8001c0c:	233c      	movs	r3, #60	; 0x3c
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <init_pins+0x98c>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	2102      	movs	r1, #2
 8001c16:	f7ff fb4d 	bl	80012b4 <pin_set>
 8001c1a:	4625      	mov	r5, r4
 8001c1c:	463c      	mov	r4, r7
 8001c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c26:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 61 | PA10
	pins[61] = pin_set(0x0A, 0x01, GPIOA, 61);
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f503 64b7 	add.w	r4, r3, #1464	; 0x5b8
 8001c30:	4638      	mov	r0, r7
 8001c32:	233d      	movs	r3, #61	; 0x3d
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <init_pins+0x98c>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	210a      	movs	r1, #10
 8001c3c:	f7ff fb3a 	bl	80012b4 <pin_set>
 8001c40:	4625      	mov	r5, r4
 8001c42:	463c      	mov	r4, r7
 8001c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c4c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 62 | PC4
	pins[62] = pin_set(0x04, 0x04, GPIOC, 62);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f503 64ba 	add.w	r4, r3, #1488	; 0x5d0
 8001c56:	4638      	mov	r0, r7
 8001c58:	233e      	movs	r3, #62	; 0x3e
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <init_pins+0x994>)
 8001c5e:	2204      	movs	r2, #4
 8001c60:	2104      	movs	r1, #4
 8001c62:	f7ff fb27 	bl	80012b4 <pin_set>
 8001c66:	4625      	mov	r5, r4
 8001c68:	463c      	mov	r4, r7
 8001c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c72:	e885 0003 	stmia.w	r5, {r0, r1}

}
 8001c76:	bf00      	nop
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40020800 	.word	0x40020800

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cca:	2007      	movs	r0, #7
 8001ccc:	f000 f9f8 	bl	80020c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_UART_MspInit+0x84>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d12b      	bne.n	8001d56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d36:	230c      	movs	r3, #12
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d46:	2307      	movs	r3, #7
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_UART_MspInit+0x8c>)
 8001d52:	f000 f9e9 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40004400 	.word	0x40004400
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020000 	.word	0x40020000

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <NMI_Handler+0x4>

08001d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <MemManage_Handler+0x4>

08001d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db8:	f000 f890 	bl	8001edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <SystemInit+0x20>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dca:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <SystemInit+0x20>)
 8001dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de8:	480d      	ldr	r0, [pc, #52]	; (8001e20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dea:	490e      	ldr	r1, [pc, #56]	; (8001e24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dec:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df0:	e002      	b.n	8001df8 <LoopCopyDataInit>

08001df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df6:	3304      	adds	r3, #4

08001df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dfc:	d3f9      	bcc.n	8001df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfe:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e00:	4c0b      	ldr	r4, [pc, #44]	; (8001e30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e04:	e001      	b.n	8001e0a <LoopFillZerobss>

08001e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e08:	3204      	adds	r2, #4

08001e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e0c:	d3fb      	bcc.n	8001e06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e0e:	f7ff ffd7 	bl	8001dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e12:	f001 fdf5 	bl	8003a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e16:	f7fe fb95 	bl	8000544 <main>
  bx  lr    
 8001e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e28:	08003a98 	.word	0x08003a98
  ldr r2, =_sbss
 8001e2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e30:	20000670 	.word	0x20000670

08001e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e34:	e7fe      	b.n	8001e34 <ADC_IRQHandler>
	...

08001e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_Init+0x40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_Init+0x40>)
 8001e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_Init+0x40>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_Init+0x40>)
 8001e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_Init+0x40>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e60:	2003      	movs	r0, #3
 8001e62:	f000 f92d 	bl	80020c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 f808 	bl	8001e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6c:	f7ff ff0e 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023c00 	.word	0x40023c00

08001e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_InitTick+0x54>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_InitTick+0x58>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f937 	bl	800210e <HAL_SYSTICK_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00e      	b.n	8001ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b0f      	cmp	r3, #15
 8001eae:	d80a      	bhi.n	8001ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb8:	f000 f90d 	bl	80020d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ebc:	4a06      	ldr	r2, [pc, #24]	; (8001ed8 <HAL_InitTick+0x5c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e000      	b.n	8001ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x20>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x24>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_IncTick+0x24>)
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000008 	.word	0x20000008
 8001f00:	2000066c 	.word	0x2000066c

08001f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_GetTick+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	2000066c 	.word	0x2000066c

08001f1c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_SuspendTick+0x1c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_SuspendTick+0x1c>)
 8001f26:	f023 0302 	bic.w	r3, r3, #2
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_ResumeTick+0x1c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_ResumeTick+0x1c>)
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e010 	.word	0xe000e010

08001f5c <__NVIC_SetPriorityGrouping>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800208c:	d301      	bcc.n	8002092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208e:	2301      	movs	r3, #1
 8002090:	e00f      	b.n	80020b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <SysTick_Config+0x40>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209a:	210f      	movs	r1, #15
 800209c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a0:	f7ff ff8e 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SysTick_Config+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <SysTick_Config+0x40>)
 80020ac:	2207      	movs	r2, #7
 80020ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	e000e010 	.word	0xe000e010

080020c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff47 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e8:	f7ff ff5c 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 80020ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	f7ff ff8e 	bl	8002014 <NVIC_EncodePriority>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff5d 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffb0 	bl	800207c <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	e165      	b.n	8002410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002144:	2201      	movs	r2, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	429a      	cmp	r2, r3
 800215e:	f040 8154 	bne.w	800240a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b01      	cmp	r3, #1
 800216c:	d005      	beq.n	800217a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002176:	2b02      	cmp	r3, #2
 8002178:	d130      	bne.n	80021dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2203      	movs	r2, #3
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b0:	2201      	movs	r2, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 0201 	and.w	r2, r3, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d017      	beq.n	8002218 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d123      	bne.n	800226c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	220f      	movs	r2, #15
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	08da      	lsrs	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3208      	adds	r2, #8
 8002266:	69b9      	ldr	r1, [r7, #24]
 8002268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0203 	and.w	r2, r3, #3
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80ae 	beq.w	800240a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_GPIO_Init+0x300>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a5c      	ldr	r2, [pc, #368]	; (8002428 <HAL_GPIO_Init+0x300>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b5a      	ldr	r3, [pc, #360]	; (8002428 <HAL_GPIO_Init+0x300>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ca:	4a58      	ldr	r2, [pc, #352]	; (800242c <HAL_GPIO_Init+0x304>)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3302      	adds	r3, #2
 80022d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4f      	ldr	r2, [pc, #316]	; (8002430 <HAL_GPIO_Init+0x308>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d025      	beq.n	8002342 <HAL_GPIO_Init+0x21a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <HAL_GPIO_Init+0x30c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01f      	beq.n	800233e <HAL_GPIO_Init+0x216>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4d      	ldr	r2, [pc, #308]	; (8002438 <HAL_GPIO_Init+0x310>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d019      	beq.n	800233a <HAL_GPIO_Init+0x212>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4c      	ldr	r2, [pc, #304]	; (800243c <HAL_GPIO_Init+0x314>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0x20e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <HAL_GPIO_Init+0x318>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00d      	beq.n	8002332 <HAL_GPIO_Init+0x20a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4a      	ldr	r2, [pc, #296]	; (8002444 <HAL_GPIO_Init+0x31c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <HAL_GPIO_Init+0x206>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a49      	ldr	r2, [pc, #292]	; (8002448 <HAL_GPIO_Init+0x320>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_GPIO_Init+0x202>
 8002326:	2306      	movs	r3, #6
 8002328:	e00c      	b.n	8002344 <HAL_GPIO_Init+0x21c>
 800232a:	2307      	movs	r3, #7
 800232c:	e00a      	b.n	8002344 <HAL_GPIO_Init+0x21c>
 800232e:	2305      	movs	r3, #5
 8002330:	e008      	b.n	8002344 <HAL_GPIO_Init+0x21c>
 8002332:	2304      	movs	r3, #4
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x21c>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x21c>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x21c>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x21c>
 8002342:	2300      	movs	r3, #0
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f002 0203 	and.w	r2, r2, #3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002354:	4935      	ldr	r1, [pc, #212]	; (800242c <HAL_GPIO_Init+0x304>)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002362:	4b3a      	ldr	r3, [pc, #232]	; (800244c <HAL_GPIO_Init+0x324>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002386:	4a31      	ldr	r2, [pc, #196]	; (800244c <HAL_GPIO_Init+0x324>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800238c:	4b2f      	ldr	r3, [pc, #188]	; (800244c <HAL_GPIO_Init+0x324>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b0:	4a26      	ldr	r2, [pc, #152]	; (800244c <HAL_GPIO_Init+0x324>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023b6:	4b25      	ldr	r3, [pc, #148]	; (800244c <HAL_GPIO_Init+0x324>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023da:	4a1c      	ldr	r2, [pc, #112]	; (800244c <HAL_GPIO_Init+0x324>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_GPIO_Init+0x324>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002404:	4a11      	ldr	r2, [pc, #68]	; (800244c <HAL_GPIO_Init+0x324>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	f67f ae96 	bls.w	8002144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40013800 	.word	0x40013800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020400 	.word	0x40020400
 8002438:	40020800 	.word	0x40020800
 800243c:	40020c00 	.word	0x40020c00
 8002440:	40021000 	.word	0x40021000
 8002444:	40021400 	.word	0x40021400
 8002448:	40021800 	.word	0x40021800
 800244c:	40013c00 	.word	0x40013c00

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_PWR_EnableWakeUpPin+0x20>)
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4904      	ldr	r1, [pc, #16]	; (80024a4 <HAL_PWR_EnableWakeUpPin+0x20>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40007000 	.word	0x40007000

080024a8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_PWR_EnterSLEEPMode+0x34>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_PWR_EnterSLEEPMode+0x34>)
 80024ba:	f023 0304 	bic.w	r3, r3, #4
 80024be:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80024c6:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80024c8:	e002      	b.n	80024d0 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80024ca:	bf40      	sev
    __WFE();
 80024cc:	bf20      	wfe
    __WFE();
 80024ce:	bf20      	wfe
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_PWR_EnterSTOPMode+0x50>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 0203 	bic.w	r2, r3, #3
 80024f4:	490e      	ldr	r1, [pc, #56]	; (8002530 <HAL_PWR_EnterSTOPMode+0x50>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80024fc:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_PWR_EnterSTOPMode+0x54>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <HAL_PWR_EnterSTOPMode+0x54>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800250e:	bf30      	wfi
 8002510:	e002      	b.n	8002518 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002512:	bf40      	sev
    __WFE();
 8002514:	bf20      	wfe
    __WFE();
 8002516:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_PWR_EnterSTOPMode+0x54>)
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	4a05      	ldr	r2, [pc, #20]	; (8002534 <HAL_PWR_EnterSTOPMode+0x54>)
 800251e:	f023 0304 	bic.w	r3, r3, #4
 8002522:	6113      	str	r3, [r2, #16]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40007000 	.word	0x40007000
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a07      	ldr	r2, [pc, #28]	; (8002560 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	4a05      	ldr	r2, [pc, #20]	; (8002564 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002554:	bf30      	wfi
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40007000 	.word	0x40007000
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0cc      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b68      	ldr	r3, [pc, #416]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d90c      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b65      	ldr	r3, [pc, #404]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b63      	ldr	r3, [pc, #396]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0b8      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a58      	ldr	r2, [pc, #352]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d4:	4b53      	ldr	r3, [pc, #332]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a52      	ldr	r2, [pc, #328]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e0:	4b50      	ldr	r3, [pc, #320]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	494d      	ldr	r1, [pc, #308]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d044      	beq.n	8002688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d119      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e07f      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d003      	beq.n	8002626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002622:	2b03      	cmp	r3, #3
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002626:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e06f      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e067      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002646:	4b37      	ldr	r3, [pc, #220]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f023 0203 	bic.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4934      	ldr	r1, [pc, #208]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	4313      	orrs	r3, r2
 8002656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002658:	f7ff fc54 	bl	8001f04 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	e00a      	b.n	8002676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002660:	f7ff fc50 	bl	8001f04 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e04f      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 020c 	and.w	r2, r3, #12
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	429a      	cmp	r2, r3
 8002686:	d1eb      	bne.n	8002660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002688:	4b25      	ldr	r3, [pc, #148]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d20c      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b22      	ldr	r3, [pc, #136]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e032      	b.n	8002716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4916      	ldr	r1, [pc, #88]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	490e      	ldr	r1, [pc, #56]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ee:	f000 f855 	bl	800279c <HAL_RCC_GetSysClockFreq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	490a      	ldr	r1, [pc, #40]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	5ccb      	ldrb	r3, [r1, r3]
 8002702:	fa22 f303 	lsr.w	r3, r2, r3
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fbb4 	bl	8001e7c <HAL_InitTick>

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023c00 	.word	0x40023c00
 8002724:	40023800 	.word	0x40023800
 8002728:	08003a70 	.word	0x08003a70
 800272c:	20000000 	.word	0x20000000
 8002730:	20000004 	.word	0x20000004

08002734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_RCC_GetHCLKFreq+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000000 	.word	0x20000000

0800274c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002750:	f7ff fff0 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	0a9b      	lsrs	r3, r3, #10
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	4903      	ldr	r1, [pc, #12]	; (8002770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40023800 	.word	0x40023800
 8002770:	08003a80 	.word	0x08003a80

08002774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002778:	f7ff ffdc 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0b5b      	lsrs	r3, r3, #13
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4903      	ldr	r1, [pc, #12]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800278a:	5ccb      	ldrb	r3, [r1, r3]
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	08003a80 	.word	0x08003a80

0800279c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800279c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a0:	b0ae      	sub	sp, #184	; 0xb8
 80027a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027c2:	4bcb      	ldr	r3, [pc, #812]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	f200 8206 	bhi.w	8002bdc <HAL_RCC_GetSysClockFreq+0x440>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	0800280d 	.word	0x0800280d
 80027dc:	08002bdd 	.word	0x08002bdd
 80027e0:	08002bdd 	.word	0x08002bdd
 80027e4:	08002bdd 	.word	0x08002bdd
 80027e8:	08002815 	.word	0x08002815
 80027ec:	08002bdd 	.word	0x08002bdd
 80027f0:	08002bdd 	.word	0x08002bdd
 80027f4:	08002bdd 	.word	0x08002bdd
 80027f8:	0800281d 	.word	0x0800281d
 80027fc:	08002bdd 	.word	0x08002bdd
 8002800:	08002bdd 	.word	0x08002bdd
 8002804:	08002bdd 	.word	0x08002bdd
 8002808:	08002a0d 	.word	0x08002a0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800280c:	4bb9      	ldr	r3, [pc, #740]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x358>)
 800280e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002812:	e1e7      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002814:	4bb8      	ldr	r3, [pc, #736]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800281a:	e1e3      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800281c:	4bb4      	ldr	r3, [pc, #720]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002828:	4bb1      	ldr	r3, [pc, #708]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d071      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002834:	4bae      	ldr	r3, [pc, #696]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	099b      	lsrs	r3, r3, #6
 800283a:	2200      	movs	r2, #0
 800283c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002840:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002844:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800285a:	4622      	mov	r2, r4
 800285c:	462b      	mov	r3, r5
 800285e:	f04f 0000 	mov.w	r0, #0
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	0159      	lsls	r1, r3, #5
 8002868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286c:	0150      	lsls	r0, r2, #5
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4621      	mov	r1, r4
 8002874:	1a51      	subs	r1, r2, r1
 8002876:	6439      	str	r1, [r7, #64]	; 0x40
 8002878:	4629      	mov	r1, r5
 800287a:	eb63 0301 	sbc.w	r3, r3, r1
 800287e:	647b      	str	r3, [r7, #68]	; 0x44
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800288c:	4649      	mov	r1, r9
 800288e:	018b      	lsls	r3, r1, #6
 8002890:	4641      	mov	r1, r8
 8002892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002896:	4641      	mov	r1, r8
 8002898:	018a      	lsls	r2, r1, #6
 800289a:	4641      	mov	r1, r8
 800289c:	1a51      	subs	r1, r2, r1
 800289e:	63b9      	str	r1, [r7, #56]	; 0x38
 80028a0:	4649      	mov	r1, r9
 80028a2:	eb63 0301 	sbc.w	r3, r3, r1
 80028a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80028b4:	4649      	mov	r1, r9
 80028b6:	00cb      	lsls	r3, r1, #3
 80028b8:	4641      	mov	r1, r8
 80028ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028be:	4641      	mov	r1, r8
 80028c0:	00ca      	lsls	r2, r1, #3
 80028c2:	4610      	mov	r0, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	4603      	mov	r3, r0
 80028c8:	4622      	mov	r2, r4
 80028ca:	189b      	adds	r3, r3, r2
 80028cc:	633b      	str	r3, [r7, #48]	; 0x30
 80028ce:	462b      	mov	r3, r5
 80028d0:	460a      	mov	r2, r1
 80028d2:	eb42 0303 	adc.w	r3, r2, r3
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028e4:	4629      	mov	r1, r5
 80028e6:	024b      	lsls	r3, r1, #9
 80028e8:	4621      	mov	r1, r4
 80028ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028ee:	4621      	mov	r1, r4
 80028f0:	024a      	lsls	r2, r1, #9
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002900:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002904:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002908:	f7fd fc7c 	bl	8000204 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4613      	mov	r3, r2
 8002912:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002916:	e067      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002918:	4b75      	ldr	r3, [pc, #468]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	099b      	lsrs	r3, r3, #6
 800291e:	2200      	movs	r2, #0
 8002920:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002924:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002928:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800292c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002930:	67bb      	str	r3, [r7, #120]	; 0x78
 8002932:	2300      	movs	r3, #0
 8002934:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002936:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800293a:	4622      	mov	r2, r4
 800293c:	462b      	mov	r3, r5
 800293e:	f04f 0000 	mov.w	r0, #0
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	0159      	lsls	r1, r3, #5
 8002948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800294c:	0150      	lsls	r0, r2, #5
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4621      	mov	r1, r4
 8002954:	1a51      	subs	r1, r2, r1
 8002956:	62b9      	str	r1, [r7, #40]	; 0x28
 8002958:	4629      	mov	r1, r5
 800295a:	eb63 0301 	sbc.w	r3, r3, r1
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800296c:	4649      	mov	r1, r9
 800296e:	018b      	lsls	r3, r1, #6
 8002970:	4641      	mov	r1, r8
 8002972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002976:	4641      	mov	r1, r8
 8002978:	018a      	lsls	r2, r1, #6
 800297a:	4641      	mov	r1, r8
 800297c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002980:	4649      	mov	r1, r9
 8002982:	eb63 0b01 	sbc.w	fp, r3, r1
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002992:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800299a:	4692      	mov	sl, r2
 800299c:	469b      	mov	fp, r3
 800299e:	4623      	mov	r3, r4
 80029a0:	eb1a 0303 	adds.w	r3, sl, r3
 80029a4:	623b      	str	r3, [r7, #32]
 80029a6:	462b      	mov	r3, r5
 80029a8:	eb4b 0303 	adc.w	r3, fp, r3
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029ba:	4629      	mov	r1, r5
 80029bc:	028b      	lsls	r3, r1, #10
 80029be:	4621      	mov	r1, r4
 80029c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029c4:	4621      	mov	r1, r4
 80029c6:	028a      	lsls	r2, r1, #10
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029d0:	2200      	movs	r2, #0
 80029d2:	673b      	str	r3, [r7, #112]	; 0x70
 80029d4:	677a      	str	r2, [r7, #116]	; 0x74
 80029d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80029da:	f7fd fc13 	bl	8000204 <__aeabi_uldivmod>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4613      	mov	r3, r2
 80029e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029e8:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	3301      	adds	r3, #1
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80029fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a0a:	e0eb      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a0c:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a18:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d06b      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a36:	663b      	str	r3, [r7, #96]	; 0x60
 8002a38:	2300      	movs	r3, #0
 8002a3a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a40:	4622      	mov	r2, r4
 8002a42:	462b      	mov	r3, r5
 8002a44:	f04f 0000 	mov.w	r0, #0
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	0159      	lsls	r1, r3, #5
 8002a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a52:	0150      	lsls	r0, r2, #5
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4621      	mov	r1, r4
 8002a5a:	1a51      	subs	r1, r2, r1
 8002a5c:	61b9      	str	r1, [r7, #24]
 8002a5e:	4629      	mov	r1, r5
 8002a60:	eb63 0301 	sbc.w	r3, r3, r1
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a72:	4659      	mov	r1, fp
 8002a74:	018b      	lsls	r3, r1, #6
 8002a76:	4651      	mov	r1, sl
 8002a78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a7c:	4651      	mov	r1, sl
 8002a7e:	018a      	lsls	r2, r1, #6
 8002a80:	4651      	mov	r1, sl
 8002a82:	ebb2 0801 	subs.w	r8, r2, r1
 8002a86:	4659      	mov	r1, fp
 8002a88:	eb63 0901 	sbc.w	r9, r3, r1
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aa0:	4690      	mov	r8, r2
 8002aa2:	4699      	mov	r9, r3
 8002aa4:	4623      	mov	r3, r4
 8002aa6:	eb18 0303 	adds.w	r3, r8, r3
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	462b      	mov	r3, r5
 8002aae:	eb49 0303 	adc.w	r3, r9, r3
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	024b      	lsls	r3, r1, #9
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aca:	4621      	mov	r1, r4
 8002acc:	024a      	lsls	r2, r1, #9
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ada:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002adc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ae0:	f7fd fb90 	bl	8000204 <__aeabi_uldivmod>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aee:	e065      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x420>
 8002af0:	40023800 	.word	0x40023800
 8002af4:	00f42400 	.word	0x00f42400
 8002af8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afc:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	2200      	movs	r2, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	4611      	mov	r1, r2
 8002b08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8002b0e:	2300      	movs	r3, #0
 8002b10:	657b      	str	r3, [r7, #84]	; 0x54
 8002b12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002b16:	4642      	mov	r2, r8
 8002b18:	464b      	mov	r3, r9
 8002b1a:	f04f 0000 	mov.w	r0, #0
 8002b1e:	f04f 0100 	mov.w	r1, #0
 8002b22:	0159      	lsls	r1, r3, #5
 8002b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b28:	0150      	lsls	r0, r2, #5
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4641      	mov	r1, r8
 8002b30:	1a51      	subs	r1, r2, r1
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	4649      	mov	r1, r9
 8002b36:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b48:	4659      	mov	r1, fp
 8002b4a:	018b      	lsls	r3, r1, #6
 8002b4c:	4651      	mov	r1, sl
 8002b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b52:	4651      	mov	r1, sl
 8002b54:	018a      	lsls	r2, r1, #6
 8002b56:	4651      	mov	r1, sl
 8002b58:	1a54      	subs	r4, r2, r1
 8002b5a:	4659      	mov	r1, fp
 8002b5c:	eb63 0501 	sbc.w	r5, r3, r1
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	00eb      	lsls	r3, r5, #3
 8002b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b6e:	00e2      	lsls	r2, r4, #3
 8002b70:	4614      	mov	r4, r2
 8002b72:	461d      	mov	r5, r3
 8002b74:	4643      	mov	r3, r8
 8002b76:	18e3      	adds	r3, r4, r3
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	eb45 0303 	adc.w	r3, r5, r3
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	028b      	lsls	r3, r1, #10
 8002b92:	4621      	mov	r1, r4
 8002b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b98:	4621      	mov	r1, r4
 8002b9a:	028a      	lsls	r2, r1, #10
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ba8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002baa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bae:	f7fd fb29 	bl	8000204 <__aeabi_uldivmod>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0f1b      	lsrs	r3, r3, #28
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bda:	e003      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002be2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	37b8      	adds	r7, #184	; 0xb8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	00f42400 	.word	0x00f42400

08002bfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e28d      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 8083 	beq.w	8002d22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c1c:	4b94      	ldr	r3, [pc, #592]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d019      	beq.n	8002c5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c28:	4b91      	ldr	r3, [pc, #580]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c34:	4b8e      	ldr	r3, [pc, #568]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c40:	d00c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c42:	4b8b      	ldr	r3, [pc, #556]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d112      	bne.n	8002c74 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4b88      	ldr	r3, [pc, #544]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c5a:	d10b      	bne.n	8002c74 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	4b84      	ldr	r3, [pc, #528]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d05b      	beq.n	8002d20 <HAL_RCC_OscConfig+0x124>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d157      	bne.n	8002d20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e25a      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x90>
 8002c7e:	4b7c      	ldr	r3, [pc, #496]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7b      	ldr	r2, [pc, #492]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0xcc>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xb4>
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a75      	ldr	r2, [pc, #468]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a72      	ldr	r2, [pc, #456]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0xcc>
 8002cb0:	4b6f      	ldr	r3, [pc, #444]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a6b      	ldr	r2, [pc, #428]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7ff f918 	bl	8001f04 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7ff f914 	bl	8001f04 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e21f      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xdc>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7ff f904 	bl	8001f04 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d00:	f7ff f900 	bl	8001f04 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e20b      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	4b57      	ldr	r3, [pc, #348]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x104>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d06f      	beq.n	8002e0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d2e:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d017      	beq.n	8002d6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d105      	bne.n	8002d52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d52:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d11c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5e:	4b44      	ldr	r3, [pc, #272]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d116      	bne.n	8002d98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_RCC_OscConfig+0x186>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e1d3      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	4b3b      	ldr	r3, [pc, #236]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4937      	ldr	r1, [pc, #220]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d96:	e03a      	b.n	8002e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da0:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HAL_RCC_OscConfig+0x278>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da6:	f7ff f8ad 	bl	8001f04 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dae:	f7ff f8a9 	bl	8001f04 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e1b4      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4925      	ldr	r1, [pc, #148]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]
 8002de0:	e015      	b.n	8002e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_RCC_OscConfig+0x278>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7ff f88c 	bl	8001f04 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df0:	f7ff f888 	bl	8001f04 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e193      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d036      	beq.n	8002e88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d016      	beq.n	8002e50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f7ff f86c 	bl	8001f04 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e30:	f7ff f868 	bl	8001f04 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e173      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCC_OscConfig+0x274>)
 8002e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x234>
 8002e4e:	e01b      	b.n	8002e88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e50:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_OscConfig+0x27c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7ff f855 	bl	8001f04 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	e00e      	b.n	8002e7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5e:	f7ff f851 	bl	8001f04 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d907      	bls.n	8002e7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e15c      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
 8002e70:	40023800 	.word	0x40023800
 8002e74:	42470000 	.word	0x42470000
 8002e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e7c:	4b8a      	ldr	r3, [pc, #552]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1ea      	bne.n	8002e5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8097 	beq.w	8002fc4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e96:	2300      	movs	r3, #0
 8002e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9a:	4b83      	ldr	r3, [pc, #524]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10f      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	4b7f      	ldr	r3, [pc, #508]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	4a7e      	ldr	r2, [pc, #504]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb6:	4b7c      	ldr	r3, [pc, #496]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec6:	4b79      	ldr	r3, [pc, #484]	; (80030ac <HAL_RCC_OscConfig+0x4b0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d118      	bne.n	8002f04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed2:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x4b0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a75      	ldr	r2, [pc, #468]	; (80030ac <HAL_RCC_OscConfig+0x4b0>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ede:	f7ff f811 	bl	8001f04 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee6:	f7ff f80d 	bl	8001f04 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e118      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	4b6c      	ldr	r3, [pc, #432]	; (80030ac <HAL_RCC_OscConfig+0x4b0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x31e>
 8002f0c:	4b66      	ldr	r3, [pc, #408]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4a65      	ldr	r2, [pc, #404]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70
 8002f18:	e01c      	b.n	8002f54 <HAL_RCC_OscConfig+0x358>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x340>
 8002f22:	4b61      	ldr	r3, [pc, #388]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	4a60      	ldr	r2, [pc, #384]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2e:	4b5e      	ldr	r3, [pc, #376]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	4a5d      	ldr	r2, [pc, #372]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCC_OscConfig+0x358>
 8002f3c:	4b5a      	ldr	r3, [pc, #360]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a59      	ldr	r2, [pc, #356]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
 8002f48:	4b57      	ldr	r3, [pc, #348]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a56      	ldr	r2, [pc, #344]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f4e:	f023 0304 	bic.w	r3, r3, #4
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d015      	beq.n	8002f88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7fe ffd2 	bl	8001f04 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f64:	f7fe ffce 	bl	8001f04 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e0d7      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7a:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0ee      	beq.n	8002f64 <HAL_RCC_OscConfig+0x368>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7fe ffbc 	bl	8001f04 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f90:	f7fe ffb8 	bl	8001f04 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e0c1      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa6:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1ee      	bne.n	8002f90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb8:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	4a3a      	ldr	r2, [pc, #232]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80ad 	beq.w	8003128 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fce:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d060      	beq.n	800309c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d145      	bne.n	800306e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe2:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <HAL_RCC_OscConfig+0x4b4>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe ff8c 	bl	8001f04 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe ff88 	bl	8001f04 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e093      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	019b      	lsls	r3, r3, #6
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	3b01      	subs	r3, #1
 8003028:	041b      	lsls	r3, r3, #16
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	071b      	lsls	r3, r3, #28
 800303a:	491b      	ldr	r1, [pc, #108]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x4b4>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fe ff5d 	bl	8001f04 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe ff59 	bl	8001f04 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e064      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x452>
 800306c:	e05c      	b.n	8003128 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <HAL_RCC_OscConfig+0x4b4>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe ff46 	bl	8001f04 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe ff42 	bl	8001f04 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e04d      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_RCC_OscConfig+0x4ac>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x480>
 800309a:	e045      	b.n	8003128 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e040      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40007000 	.word	0x40007000
 80030b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <HAL_RCC_OscConfig+0x538>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d030      	beq.n	8003124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d129      	bne.n	8003124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d122      	bne.n	8003124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e4:	4013      	ands	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d119      	bne.n	8003124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	3b01      	subs	r3, #1
 80030fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d10f      	bne.n	8003124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800

08003138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e03f      	b.n	80031ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fdbc 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800317a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f9cb 	bl	8003518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b08a      	sub	sp, #40	; 0x28
 80031d6:	af02      	add	r7, sp, #8
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d17c      	bne.n	80032ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_UART_Transmit+0x2c>
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e075      	b.n	80032ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_UART_Transmit+0x3e>
 800320c:	2302      	movs	r3, #2
 800320e:	e06e      	b.n	80032ee <HAL_UART_Transmit+0x11c>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2221      	movs	r2, #33	; 0x21
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003226:	f7fe fe6d 	bl	8001f04 <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003240:	d108      	bne.n	8003254 <HAL_UART_Transmit+0x82>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d104      	bne.n	8003254 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	e003      	b.n	800325c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003264:	e02a      	b.n	80032bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	2180      	movs	r1, #128	; 0x80
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f8e2 	bl	800343a <UART_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e036      	b.n	80032ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003294:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	3302      	adds	r3, #2
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e007      	b.n	80032ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3301      	adds	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1cf      	bne.n	8003266 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2140      	movs	r1, #64	; 0x40
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f8b2 	bl	800343a <UART_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e006      	b.n	80032ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b08a      	sub	sp, #40	; 0x28
 80032fa:	af02      	add	r7, sp, #8
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b20      	cmp	r3, #32
 8003314:	f040 808c 	bne.w	8003430 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_UART_Receive+0x2e>
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e084      	b.n	8003432 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_UART_Receive+0x40>
 8003332:	2302      	movs	r3, #2
 8003334:	e07d      	b.n	8003432 <HAL_UART_Receive+0x13c>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2222      	movs	r2, #34	; 0x22
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003352:	f7fe fdd7 	bl	8001f04 <HAL_GetTick>
 8003356:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	88fa      	ldrh	r2, [r7, #6]
 800335c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	88fa      	ldrh	r2, [r7, #6]
 8003362:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336c:	d108      	bne.n	8003380 <HAL_UART_Receive+0x8a>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	e003      	b.n	8003388 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003390:	e043      	b.n	800341a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2200      	movs	r2, #0
 800339a:	2120      	movs	r1, #32
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f84c 	bl	800343a <UART_WaitOnFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e042      	b.n	8003432 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10c      	bne.n	80033cc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033be:	b29a      	uxth	r2, r3
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	3302      	adds	r3, #2
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	e01f      	b.n	800340c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d4:	d007      	beq.n	80033e6 <HAL_UART_Receive+0xf0>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <HAL_UART_Receive+0xfe>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e008      	b.n	8003406 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003400:	b2da      	uxtb	r2, r3
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3301      	adds	r3, #1
 800340a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1b6      	bne.n	8003392 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b090      	sub	sp, #64	; 0x40
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800344a:	e050      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003452:	d04c      	beq.n	80034ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <UART_WaitOnFlagUntilTimeout+0x30>
 800345a:	f7fe fd53 	bl	8001f04 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003466:	429a      	cmp	r2, r3
 8003468:	d241      	bcs.n	80034ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800348a:	637a      	str	r2, [r7, #52]	; 0x34
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e5      	bne.n	800346a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3314      	adds	r3, #20
 80034a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	613b      	str	r3, [r7, #16]
   return(result);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3314      	adds	r3, #20
 80034bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034be:	623a      	str	r2, [r7, #32]
 80034c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	69f9      	ldr	r1, [r7, #28]
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e5      	bne.n	800349e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e00f      	b.n	800350e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	429a      	cmp	r2, r3
 800350a:	d09f      	beq.n	800344c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3740      	adds	r7, #64	; 0x40
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800351c:	b0c0      	sub	sp, #256	; 0x100
 800351e:	af00      	add	r7, sp, #0
 8003520:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	68d9      	ldr	r1, [r3, #12]
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	ea40 0301 	orr.w	r3, r0, r1
 8003540:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	431a      	orrs	r2, r3
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	431a      	orrs	r2, r3
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003570:	f021 010c 	bic.w	r1, r1, #12
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800357e:	430b      	orrs	r3, r1
 8003580:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003592:	6999      	ldr	r1, [r3, #24]
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	ea40 0301 	orr.w	r3, r0, r1
 800359e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b8f      	ldr	r3, [pc, #572]	; (80037e4 <UART_SetConfig+0x2cc>)
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d005      	beq.n	80035b8 <UART_SetConfig+0xa0>
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4b8d      	ldr	r3, [pc, #564]	; (80037e8 <UART_SetConfig+0x2d0>)
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d104      	bne.n	80035c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035b8:	f7ff f8dc 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
 80035bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035c0:	e003      	b.n	80035ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035c2:	f7ff f8c3 	bl	800274c <HAL_RCC_GetPCLK1Freq>
 80035c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d4:	f040 810c 	bne.w	80037f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035dc:	2200      	movs	r2, #0
 80035de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035ea:	4622      	mov	r2, r4
 80035ec:	462b      	mov	r3, r5
 80035ee:	1891      	adds	r1, r2, r2
 80035f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80035f2:	415b      	adcs	r3, r3
 80035f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035fa:	4621      	mov	r1, r4
 80035fc:	eb12 0801 	adds.w	r8, r2, r1
 8003600:	4629      	mov	r1, r5
 8003602:	eb43 0901 	adc.w	r9, r3, r1
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003612:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003616:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800361a:	4690      	mov	r8, r2
 800361c:	4699      	mov	r9, r3
 800361e:	4623      	mov	r3, r4
 8003620:	eb18 0303 	adds.w	r3, r8, r3
 8003624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003628:	462b      	mov	r3, r5
 800362a:	eb49 0303 	adc.w	r3, r9, r3
 800362e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800363e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003642:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003646:	460b      	mov	r3, r1
 8003648:	18db      	adds	r3, r3, r3
 800364a:	653b      	str	r3, [r7, #80]	; 0x50
 800364c:	4613      	mov	r3, r2
 800364e:	eb42 0303 	adc.w	r3, r2, r3
 8003652:	657b      	str	r3, [r7, #84]	; 0x54
 8003654:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003658:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800365c:	f7fc fdd2 	bl	8000204 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <UART_SetConfig+0x2d4>)
 8003666:	fba3 2302 	umull	r2, r3, r3, r2
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	011c      	lsls	r4, r3, #4
 800366e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003672:	2200      	movs	r2, #0
 8003674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003678:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800367c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003680:	4642      	mov	r2, r8
 8003682:	464b      	mov	r3, r9
 8003684:	1891      	adds	r1, r2, r2
 8003686:	64b9      	str	r1, [r7, #72]	; 0x48
 8003688:	415b      	adcs	r3, r3
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003690:	4641      	mov	r1, r8
 8003692:	eb12 0a01 	adds.w	sl, r2, r1
 8003696:	4649      	mov	r1, r9
 8003698:	eb43 0b01 	adc.w	fp, r3, r1
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b0:	4692      	mov	sl, r2
 80036b2:	469b      	mov	fp, r3
 80036b4:	4643      	mov	r3, r8
 80036b6:	eb1a 0303 	adds.w	r3, sl, r3
 80036ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036be:	464b      	mov	r3, r9
 80036c0:	eb4b 0303 	adc.w	r3, fp, r3
 80036c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036dc:	460b      	mov	r3, r1
 80036de:	18db      	adds	r3, r3, r3
 80036e0:	643b      	str	r3, [r7, #64]	; 0x40
 80036e2:	4613      	mov	r3, r2
 80036e4:	eb42 0303 	adc.w	r3, r2, r3
 80036e8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036f2:	f7fc fd87 	bl	8000204 <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	4b3b      	ldr	r3, [pc, #236]	; (80037ec <UART_SetConfig+0x2d4>)
 80036fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2264      	movs	r2, #100	; 0x64
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	1acb      	subs	r3, r1, r3
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003712:	4b36      	ldr	r3, [pc, #216]	; (80037ec <UART_SetConfig+0x2d4>)
 8003714:	fba3 2302 	umull	r2, r3, r3, r2
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003720:	441c      	add	r4, r3
 8003722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003726:	2200      	movs	r2, #0
 8003728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800372c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003730:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	1891      	adds	r1, r2, r2
 800373a:	63b9      	str	r1, [r7, #56]	; 0x38
 800373c:	415b      	adcs	r3, r3
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003740:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003744:	4641      	mov	r1, r8
 8003746:	1851      	adds	r1, r2, r1
 8003748:	6339      	str	r1, [r7, #48]	; 0x30
 800374a:	4649      	mov	r1, r9
 800374c:	414b      	adcs	r3, r1
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800375c:	4659      	mov	r1, fp
 800375e:	00cb      	lsls	r3, r1, #3
 8003760:	4651      	mov	r1, sl
 8003762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003766:	4651      	mov	r1, sl
 8003768:	00ca      	lsls	r2, r1, #3
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	4603      	mov	r3, r0
 8003770:	4642      	mov	r2, r8
 8003772:	189b      	adds	r3, r3, r2
 8003774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003778:	464b      	mov	r3, r9
 800377a:	460a      	mov	r2, r1
 800377c:	eb42 0303 	adc.w	r3, r2, r3
 8003780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003790:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003794:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003798:	460b      	mov	r3, r1
 800379a:	18db      	adds	r3, r3, r3
 800379c:	62bb      	str	r3, [r7, #40]	; 0x28
 800379e:	4613      	mov	r3, r2
 80037a0:	eb42 0303 	adc.w	r3, r2, r3
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037ae:	f7fc fd29 	bl	8000204 <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <UART_SetConfig+0x2d4>)
 80037b8:	fba3 1302 	umull	r1, r3, r3, r2
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	2164      	movs	r1, #100	; 0x64
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	3332      	adds	r3, #50	; 0x32
 80037ca:	4a08      	ldr	r2, [pc, #32]	; (80037ec <UART_SetConfig+0x2d4>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	f003 0207 	and.w	r2, r3, #7
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4422      	add	r2, r4
 80037de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037e0:	e105      	b.n	80039ee <UART_SetConfig+0x4d6>
 80037e2:	bf00      	nop
 80037e4:	40011000 	.word	0x40011000
 80037e8:	40011400 	.word	0x40011400
 80037ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f4:	2200      	movs	r2, #0
 80037f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003802:	4642      	mov	r2, r8
 8003804:	464b      	mov	r3, r9
 8003806:	1891      	adds	r1, r2, r2
 8003808:	6239      	str	r1, [r7, #32]
 800380a:	415b      	adcs	r3, r3
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
 800380e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003812:	4641      	mov	r1, r8
 8003814:	1854      	adds	r4, r2, r1
 8003816:	4649      	mov	r1, r9
 8003818:	eb43 0501 	adc.w	r5, r3, r1
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	00eb      	lsls	r3, r5, #3
 8003826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800382a:	00e2      	lsls	r2, r4, #3
 800382c:	4614      	mov	r4, r2
 800382e:	461d      	mov	r5, r3
 8003830:	4643      	mov	r3, r8
 8003832:	18e3      	adds	r3, r4, r3
 8003834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003838:	464b      	mov	r3, r9
 800383a:	eb45 0303 	adc.w	r3, r5, r3
 800383e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800384e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800385e:	4629      	mov	r1, r5
 8003860:	008b      	lsls	r3, r1, #2
 8003862:	4621      	mov	r1, r4
 8003864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003868:	4621      	mov	r1, r4
 800386a:	008a      	lsls	r2, r1, #2
 800386c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003870:	f7fc fcc8 	bl	8000204 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4b60      	ldr	r3, [pc, #384]	; (80039fc <UART_SetConfig+0x4e4>)
 800387a:	fba3 2302 	umull	r2, r3, r3, r2
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	011c      	lsls	r4, r3, #4
 8003882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003886:	2200      	movs	r2, #0
 8003888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800388c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003890:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003894:	4642      	mov	r2, r8
 8003896:	464b      	mov	r3, r9
 8003898:	1891      	adds	r1, r2, r2
 800389a:	61b9      	str	r1, [r7, #24]
 800389c:	415b      	adcs	r3, r3
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a4:	4641      	mov	r1, r8
 80038a6:	1851      	adds	r1, r2, r1
 80038a8:	6139      	str	r1, [r7, #16]
 80038aa:	4649      	mov	r1, r9
 80038ac:	414b      	adcs	r3, r1
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038bc:	4659      	mov	r1, fp
 80038be:	00cb      	lsls	r3, r1, #3
 80038c0:	4651      	mov	r1, sl
 80038c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c6:	4651      	mov	r1, sl
 80038c8:	00ca      	lsls	r2, r1, #3
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	4642      	mov	r2, r8
 80038d2:	189b      	adds	r3, r3, r2
 80038d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038d8:	464b      	mov	r3, r9
 80038da:	460a      	mov	r2, r1
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038fc:	4649      	mov	r1, r9
 80038fe:	008b      	lsls	r3, r1, #2
 8003900:	4641      	mov	r1, r8
 8003902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003906:	4641      	mov	r1, r8
 8003908:	008a      	lsls	r2, r1, #2
 800390a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800390e:	f7fc fc79 	bl	8000204 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <UART_SetConfig+0x4e4>)
 8003918:	fba3 1302 	umull	r1, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	2164      	movs	r1, #100	; 0x64
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	3332      	adds	r3, #50	; 0x32
 800392a:	4a34      	ldr	r2, [pc, #208]	; (80039fc <UART_SetConfig+0x4e4>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003936:	441c      	add	r4, r3
 8003938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800393c:	2200      	movs	r2, #0
 800393e:	673b      	str	r3, [r7, #112]	; 0x70
 8003940:	677a      	str	r2, [r7, #116]	; 0x74
 8003942:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003946:	4642      	mov	r2, r8
 8003948:	464b      	mov	r3, r9
 800394a:	1891      	adds	r1, r2, r2
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	415b      	adcs	r3, r3
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003956:	4641      	mov	r1, r8
 8003958:	1851      	adds	r1, r2, r1
 800395a:	6039      	str	r1, [r7, #0]
 800395c:	4649      	mov	r1, r9
 800395e:	414b      	adcs	r3, r1
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800396e:	4659      	mov	r1, fp
 8003970:	00cb      	lsls	r3, r1, #3
 8003972:	4651      	mov	r1, sl
 8003974:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003978:	4651      	mov	r1, sl
 800397a:	00ca      	lsls	r2, r1, #3
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	4603      	mov	r3, r0
 8003982:	4642      	mov	r2, r8
 8003984:	189b      	adds	r3, r3, r2
 8003986:	66bb      	str	r3, [r7, #104]	; 0x68
 8003988:	464b      	mov	r3, r9
 800398a:	460a      	mov	r2, r1
 800398c:	eb42 0303 	adc.w	r3, r2, r3
 8003990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	663b      	str	r3, [r7, #96]	; 0x60
 800399c:	667a      	str	r2, [r7, #100]	; 0x64
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039aa:	4649      	mov	r1, r9
 80039ac:	008b      	lsls	r3, r1, #2
 80039ae:	4641      	mov	r1, r8
 80039b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039b4:	4641      	mov	r1, r8
 80039b6:	008a      	lsls	r2, r1, #2
 80039b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039bc:	f7fc fc22 	bl	8000204 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <UART_SetConfig+0x4e4>)
 80039c6:	fba3 1302 	umull	r1, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2164      	movs	r1, #100	; 0x64
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	3332      	adds	r3, #50	; 0x32
 80039d8:	4a08      	ldr	r2, [pc, #32]	; (80039fc <UART_SetConfig+0x4e4>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	f003 020f 	and.w	r2, r3, #15
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4422      	add	r2, r4
 80039ec:	609a      	str	r2, [r3, #8]
}
 80039ee:	bf00      	nop
 80039f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fa:	bf00      	nop
 80039fc:	51eb851f 	.word	0x51eb851f

08003a00 <__libc_init_array>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	4d0d      	ldr	r5, [pc, #52]	; (8003a38 <__libc_init_array+0x38>)
 8003a04:	4c0d      	ldr	r4, [pc, #52]	; (8003a3c <__libc_init_array+0x3c>)
 8003a06:	1b64      	subs	r4, r4, r5
 8003a08:	10a4      	asrs	r4, r4, #2
 8003a0a:	2600      	movs	r6, #0
 8003a0c:	42a6      	cmp	r6, r4
 8003a0e:	d109      	bne.n	8003a24 <__libc_init_array+0x24>
 8003a10:	4d0b      	ldr	r5, [pc, #44]	; (8003a40 <__libc_init_array+0x40>)
 8003a12:	4c0c      	ldr	r4, [pc, #48]	; (8003a44 <__libc_init_array+0x44>)
 8003a14:	f000 f820 	bl	8003a58 <_init>
 8003a18:	1b64      	subs	r4, r4, r5
 8003a1a:	10a4      	asrs	r4, r4, #2
 8003a1c:	2600      	movs	r6, #0
 8003a1e:	42a6      	cmp	r6, r4
 8003a20:	d105      	bne.n	8003a2e <__libc_init_array+0x2e>
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
 8003a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a28:	4798      	blx	r3
 8003a2a:	3601      	adds	r6, #1
 8003a2c:	e7ee      	b.n	8003a0c <__libc_init_array+0xc>
 8003a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a32:	4798      	blx	r3
 8003a34:	3601      	adds	r6, #1
 8003a36:	e7f2      	b.n	8003a1e <__libc_init_array+0x1e>
 8003a38:	08003a90 	.word	0x08003a90
 8003a3c:	08003a90 	.word	0x08003a90
 8003a40:	08003a90 	.word	0x08003a90
 8003a44:	08003a94 	.word	0x08003a94

08003a48 <memset>:
 8003a48:	4402      	add	r2, r0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d100      	bne.n	8003a52 <memset+0xa>
 8003a50:	4770      	bx	lr
 8003a52:	f803 1b01 	strb.w	r1, [r3], #1
 8003a56:	e7f9      	b.n	8003a4c <memset+0x4>

08003a58 <_init>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	bf00      	nop
 8003a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	469e      	mov	lr, r3
 8003a62:	4770      	bx	lr

08003a64 <_fini>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	bf00      	nop
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr
