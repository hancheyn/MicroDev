
F446RE_T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036b8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800387c  0800387c  0001387c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003894  08003894  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800389c  0800389c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  2000000c  080038b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  080038b0  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000928f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001825  00000000  00000000  000292cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d17  00000000  00000000  0002ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009da5  00000000  00000000  0004c72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7562  00000000  00000000  000564d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011da36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f28  00000000  00000000  0011da88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003864 	.word	0x08003864

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003864 	.word	0x08003864

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800050e:	f001 fba9 	bl	8001c64 <HAL_Init>
	SystemClock_Config();
 8000512:	f000 fcbd 	bl	8000e90 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000516:	f000 fd53 	bl	8000fc0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800051a:	f000 fd27 	bl	8000f6c <MX_USART2_UART_Init>

	//IO INITs
	init_pins(PINS_);
 800051e:	4819      	ldr	r0, [pc, #100]	; (8000584 <main+0x7c>)
 8000520:	f000 fdfe 	bl	8001120 <init_pins>
	// pinMode(0, OUTPUT);
	// digitalWrite(0, HIGH);

  	//GPIOC Input
  	RCC->AHB1ENR |= 4; //GPIOC clock
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <main+0x80>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000528:	4a17      	ldr	r2, [pc, #92]	; (8000588 <main+0x80>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6313      	str	r3, [r2, #48]	; 0x30
  	GPIOC->MODER &= ~0x0C000000;
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <main+0x84>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a15      	ldr	r2, [pc, #84]	; (800058c <main+0x84>)
 8000536:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800053a:	6013      	str	r3, [r2, #0]

    while (1) {
  	  if(GPIOC->IDR & 0x2000) {
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <main+0x84>)
 800053e:	691b      	ldr	r3, [r3, #16]
 8000540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0f9      	beq.n	800053c <main+0x34>
  		  // GPIOA->ODR |= 0x00000020; //turn on
  		  // digitalWrite(0, LOW);
  		  // delay(500);

  		    uint8_t RMSG[4] = {'\0'};
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]

  		    //Write Test
  			command_read(RMSG);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fbfe 	bl	8000d50 <command_read>
  			delay(50);	//delay is important
 8000554:	2032      	movs	r0, #50	; 0x32
 8000556:	f000 fda6 	bl	80010a6 <delay>

  			if(crc_decode(RMSG)){
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fc65 	bl	8000e2c <crc_decode>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d004      	beq.n	8000572 <main+0x6a>
  				//GPIOA->ODR &= ~0x00000020;
  				//digitalWrite(0, LOW);

  				//Interpret Instructions
  				run_tests(RMSG);
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f810 	bl	8000590 <run_tests>
 8000570:	e7e4      	b.n	800053c <main+0x34>

  				//Send Back Results
  				//command_write(RMSG[0], RMSG[1], RMSG[2]);
  			}
  			else {
  				command_write(RMSG[0], RMSG[1], RMSG[2]);
 8000572:	793b      	ldrb	r3, [r7, #4]
 8000574:	4618      	mov	r0, r3
 8000576:	797b      	ldrb	r3, [r7, #5]
 8000578:	4619      	mov	r1, r3
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	461a      	mov	r2, r3
 800057e:	f000 fbf9 	bl	8000d74 <command_write>
  	  if(GPIOC->IDR & 0x2000) {
 8000582:	e7db      	b.n	800053c <main+0x34>
 8000584:	20000028 	.word	0x20000028
 8000588:	40023800 	.word	0x40023800
 800058c:	40020800 	.word	0x40020800

08000590 <run_tests>:


/********************************************************/
//Tests
/********************************************************/
void run_tests(unsigned char data[]) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

	unsigned char pin = data[0];
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	73fb      	strb	r3, [r7, #15]
	unsigned char instruction = data[1];
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	785b      	ldrb	r3, [r3, #1]
 80005a2:	73bb      	strb	r3, [r7, #14]

	// Test #1
	if(data[2] == 1) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3302      	adds	r3, #2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d113      	bne.n	80005d6 <run_tests+0x46>
		else if(instruction == 0) {
			pinMode(pin, OUTPUT);
			digitalWrite(pin, 0);
		}
		*/
		configure_output(pin, instruction);
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	7bba      	ldrb	r2, [r7, #14]
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f8aa 	bl	800070e <configure_output>
		command_write(data[0], data[1], data[2]);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4619      	mov	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3302      	adds	r3, #2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	f000 fbd0 	bl	8000d74 <command_write>
			sleepmode(4);
		}

	}

}
 80005d4:	e097      	b.n	8000706 <run_tests+0x176>
	else if(data[2] == 2) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3302      	adds	r3, #2
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d113      	bne.n	8000608 <run_tests+0x78>
		configure_output(pin, instruction);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	7bba      	ldrb	r2, [r7, #14]
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f891 	bl	800070e <configure_output>
		command_write(data[0], data[1], data[2]);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3302      	adds	r3, #2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	f000 fbb7 	bl	8000d74 <command_write>
}
 8000606:	e07e      	b.n	8000706 <run_tests+0x176>
	else if(data[2] == 3) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3302      	adds	r3, #2
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b03      	cmp	r3, #3
 8000610:	d111      	bne.n	8000636 <run_tests+0xa6>
		configure_input_pullup(pin);
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f8a8 	bl	800076a <configure_input_pullup>
		command_write(data[0], data[1], data[2]);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	4618      	mov	r0, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4619      	mov	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3302      	adds	r3, #2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	f000 fba0 	bl	8000d74 <command_write>
}
 8000634:	e067      	b.n	8000706 <run_tests+0x176>
	else if(data[2] == 4) {
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3302      	adds	r3, #2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b04      	cmp	r3, #4
 800063e:	d111      	bne.n	8000664 <run_tests+0xd4>
		configure_input_pulldown(pin);
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f89e 	bl	8000784 <configure_input_pulldown>
		command_write(data[0], data[1], data[2]);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3301      	adds	r3, #1
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3302      	adds	r3, #2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	f000 fb89 	bl	8000d74 <command_write>
}
 8000662:	e050      	b.n	8000706 <run_tests+0x176>
	else if(data[2] == 5) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3302      	adds	r3, #2
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b05      	cmp	r3, #5
 800066c:	d116      	bne.n	800069c <run_tests+0x10c>
		data[1] = configure_input(pin);
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f868 	bl	8000746 <configure_input>
 8000676:	4602      	mov	r2, r0
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	701a      	strb	r2, [r3, #0]
		command_write(data[0], data[1], data[2]);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4618      	mov	r0, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3301      	adds	r3, #1
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3302      	adds	r3, #2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	f000 fb6d 	bl	8000d74 <command_write>
}
 800069a:	e034      	b.n	8000706 <run_tests+0x176>
	else if(data[2] == 6) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3302      	adds	r3, #2
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d116      	bne.n	80006d4 <run_tests+0x144>
		data[1] = configure_analog_input(pin);
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f878 	bl	800079e <configure_analog_input>
 80006ae:	4602      	mov	r2, r0
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3301      	adds	r3, #1
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	701a      	strb	r2, [r3, #0]
		command_write(data[0], data[1], data[2]);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3301      	adds	r3, #1
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3302      	adds	r3, #2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	f000 fb51 	bl	8000d74 <command_write>
}
 80006d2:	e018      	b.n	8000706 <run_tests+0x176>
	else if(data[2] == 7) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3302      	adds	r3, #2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b07      	cmp	r3, #7
 80006dc:	d113      	bne.n	8000706 <run_tests+0x176>
		if(instruction == 1) {
 80006de:	7bbb      	ldrb	r3, [r7, #14]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d103      	bne.n	80006ec <run_tests+0x15c>
			sleepmode(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 f868 	bl	80007ba <sleepmode>
}
 80006ea:	e00c      	b.n	8000706 <run_tests+0x176>
		else if(instruction == 2) {
 80006ec:	7bbb      	ldrb	r3, [r7, #14]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d103      	bne.n	80006fa <run_tests+0x16a>
			sleepmode(2);
 80006f2:	2002      	movs	r0, #2
 80006f4:	f000 f861 	bl	80007ba <sleepmode>
}
 80006f8:	e005      	b.n	8000706 <run_tests+0x176>
		else if(instruction == 3) {
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d102      	bne.n	8000706 <run_tests+0x176>
			sleepmode(4);
 8000700:	2004      	movs	r0, #4
 8000702:	f000 f85a 	bl	80007ba <sleepmode>
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <configure_output>:
 * Description: Configures GPIO pin as OUTPUT and turns the output to HIGH. Used for testing GPIO output voltage under load sourcing.
 * Accepts: unsigned int pin - the pin number to configure as OUTPUT
 *          unsigned int logic - HIGH or LOW logic
 * Returns: void
 */
void configure_output(unsigned int pin, unsigned int logic) {
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	6039      	str	r1, [r7, #0]
    pinMode(pin, OUTPUT);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2103      	movs	r1, #3
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f8df 	bl	80008e0 <pinMode>
    if(logic) {
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d005      	beq.n	8000734 <configure_output+0x26>
      digitalWrite(pin, HIGH);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2101      	movs	r1, #1
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fab9 	bl	8000ca4 <digitalWrite>
    }
    else {
      digitalWrite(pin, LOW);
    }
    return;
 8000732:	e005      	b.n	8000740 <configure_output+0x32>
      digitalWrite(pin, LOW);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fab3 	bl	8000ca4 <digitalWrite>
    return;
 800073e:	bf00      	nop
}
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <configure_input>:
 * Description: Configures GPIO pin as an INPUT. Used for testing input logic levels. The input pin cannot be a pullup,
 * as that would allow the pin to act as a current source and could damage the testing device's DAC.
 * Accepts: unsigned int pin - the pin number to configure as INPUT
 * Returns: int - 0 or 1 depending on input voltage of the pin (LOGIC LOW OR HIGH)
 */
int configure_input(unsigned int pin) {
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
    pinMode(pin, INPUT);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f8c4 	bl	80008e0 <pinMode>
    return digitalRead(pin);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fa7c 	bl	8000c58 <digitalRead>
 8000760:	4603      	mov	r3, r0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <configure_input_pullup>:
 * Description: Configures GPIO pin as INPUT_PULLUP. Used for testing the pin's unloaded pullup voltage and internal
 * resistance value.
 * Accepts: unsigned int pin - the pin number to configure as INPUT_PULLUP
 * Returns: void
 */
void configure_input_pullup(unsigned int pin) {
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
    pinMode(pin,INPUT_PULLUP);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2101      	movs	r1, #1
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f8b2 	bl	80008e0 <pinMode>
    return;
 800077c:	bf00      	nop
}
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <configure_input_pulldown>:
 * Description: Configures GPIO pin as INPUT_PULLDOWN. Used for testing the pin's unloaded pullup voltage and internal
 * resistance value.
 * Accepts: unsigned int pin - the pin number to configure as INPUT_PULLDOWN
 * Returns: void
 */
void configure_input_pulldown(unsigned int pin) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    pinMode(pin,INPUT_PULLDOWN);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2102      	movs	r1, #2
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f8a5 	bl	80008e0 <pinMode>
    return;
 8000796:	bf00      	nop
}
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <configure_analog_input>:
 * Description: Returns the analog reading of the selected analog pin (A0, A1, ..., A5). Used for testing the Arduino's
 * ADC.
 * Accepts: unsigned int analogPin - the analog pin number to read
 * Returns: int - 0 to 1023, depending on the voltage reading of the ADC. (0 = GND, 1023 = 5V)
 */
int configure_analog_input(unsigned int analogPin) {
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
   return (analogRead(analogPin) >> 2); //returns a value 0-1023 (0=GND, 1023 = 5V)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f835 	bl	8000818 <analogRead>
 80007ae:	4603      	mov	r3, r0
 80007b0:	109b      	asrs	r3, r3, #2
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <sleepmode>:
/********************************************************/
//IO  Sleep Modes / PINS
/********************************************************/

//
int sleepmode(int mode) {
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]

	// SLEEP == 1
	// Wake Up = A0
	if(mode == 1) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d10a      	bne.n	80007de <sleepmode+0x24>
		HAL_SuspendTick();
 80007c8:	f001 fabe 	bl	8001d48 <HAL_SuspendTick>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		//HAL_PWR_EnableSleepOnExit();
		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80007cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007d0:	f001 fd5e 	bl	8002290 <HAL_PWR_EnableWakeUpPin>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80007d4:	2101      	movs	r1, #1
 80007d6:	2000      	movs	r0, #0
 80007d8:	f001 fd6c 	bl	80022b4 <HAL_PWR_EnterSLEEPMode>
 80007dc:	e016      	b.n	800080c <sleepmode+0x52>
		//HAL_ResumeTick();
	}
	// STOP == 2
	// Wake Up = A0
	else if(mode == 2) {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d10a      	bne.n	80007fa <sleepmode+0x40>
		HAL_SuspendTick();
 80007e4:	f001 fab0 	bl	8001d48 <HAL_SuspendTick>
		//HAL_PWR_EnableSleepOnExit();
		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80007e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007ec:	f001 fd50 	bl	8002290 <HAL_PWR_EnableWakeUpPin>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80007f0:	2101      	movs	r1, #1
 80007f2:	2001      	movs	r0, #1
 80007f4:	f001 fd7a 	bl	80022ec <HAL_PWR_EnterSTOPMode>
 80007f8:	e008      	b.n	800080c <sleepmode+0x52>
		//HAL_ResumeTick();
	}
	// STANDBY == 4
	// Wake up Pin =
	else if(mode == 4) {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d105      	bne.n	800080c <sleepmode+0x52>
		//__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
		//__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000800:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000804:	f001 fd44 	bl	8002290 <HAL_PWR_EnableWakeUpPin>
		HAL_PWR_EnterSTANDBYMode();
 8000808:	f001 fd9c 	bl	8002344 <HAL_PWR_EnterSTANDBYMode>
	}

	return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <analogRead>:

/********************************************************/
// Read & Write Functions
/********************************************************/

int analogRead(int pin) { //!IN PROGRESS [NEED TO DEVELOP DEBUGGING METHOD]
 8000818:	b490      	push	{r4, r7}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

	int result;
	//SET REGESTERS p213

	//Pin Setup
	RCC->AHB1ENR |= PINS_[pin].clock;  //clock for pin
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <analogRead+0xbc>)
 8000822:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000824:	482c      	ldr	r0, [pc, #176]	; (80008d8 <analogRead+0xc0>)
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	4613      	mov	r3, r2
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4403      	add	r3, r0
 8000832:	330c      	adds	r3, #12
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a27      	ldr	r2, [pc, #156]	; (80008d4 <analogRead+0xbc>)
 8000838:	430b      	orrs	r3, r1
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
	PINS_[pin].GPIO->MODER |= (0x03 << (PINS_[pin].pin * 2)); // Set to ADC mode
 800083c:	4926      	ldr	r1, [pc, #152]	; (80008d8 <analogRead+0xc0>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	440b      	add	r3, r1
 800084a:	3310      	adds	r3, #16
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6819      	ldr	r1, [r3, #0]
 8000850:	4821      	ldr	r0, [pc, #132]	; (80008d8 <analogRead+0xc0>)
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	4403      	add	r3, r0
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2203      	movs	r2, #3
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	461c      	mov	r4, r3
 800086a:	481b      	ldr	r0, [pc, #108]	; (80008d8 <analogRead+0xc0>)
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	4403      	add	r3, r0
 8000878:	3310      	adds	r3, #16
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	ea41 0204 	orr.w	r2, r1, r4
 8000880:	601a      	str	r2, [r3, #0]

	//ADC1
	RCC->APB2ENR |= 0x00000100; /* Enable ADC1 clock */
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <analogRead+0xbc>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <analogRead+0xbc>)
 8000888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
	/* Setup for ACD1 */
	ADC1->CR2 = 0;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <analogRead+0xc4>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
	ADC1->SQR3 = 1;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <analogRead+0xc4>)
 8000896:	2201      	movs	r2, #1
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->SQR1 = 0;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <analogRead+0xc4>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->CR2 = 1;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <analogRead+0xc4>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	609a      	str	r2, [r3, #8]

	//FIND VALUE in ADC1
	ADC1->CR2 |= 0x40000000;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <analogRead+0xc4>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <analogRead+0xc4>)
 80008ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80008b0:	6093      	str	r3, [r2, #8]
	while(!(ADC1->SR & 2)) {}
 80008b2:	bf00      	nop
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <analogRead+0xc4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d0f9      	beq.n	80008b4 <analogRead+0x9c>
	result = ADC1->DR;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <analogRead+0xc4>)
 80008c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c4:	60fb      	str	r3, [r7, #12]

	return result;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc90      	pop	{r4, r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	20000028 	.word	0x20000028
 80008dc:	40012000 	.word	0x40012000

080008e0 <pinMode>:

void pinMode(int pin, int mode) {
 80008e0:	b490      	push	{r4, r7}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]

	if(mode == INPUT_PULLUP) {
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d179      	bne.n	80009e4 <pinMode+0x104>
		RCC->AHB1ENR |= PINS_[pin].clock;
 80008f0:	4ba7      	ldr	r3, [pc, #668]	; (8000b90 <pinMode+0x2b0>)
 80008f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80008f4:	48a7      	ldr	r0, [pc, #668]	; (8000b94 <pinMode+0x2b4>)
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	4403      	add	r3, r0
 8000902:	330c      	adds	r3, #12
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4aa2      	ldr	r2, [pc, #648]	; (8000b90 <pinMode+0x2b0>)
 8000908:	430b      	orrs	r3, r1
 800090a:	6313      	str	r3, [r2, #48]	; 0x30
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
 800090c:	49a1      	ldr	r1, [pc, #644]	; (8000b94 <pinMode+0x2b4>)
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	4613      	mov	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	4413      	add	r3, r2
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	440b      	add	r3, r1
 800091a:	3310      	adds	r3, #16
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6819      	ldr	r1, [r3, #0]
 8000920:	489c      	ldr	r0, [pc, #624]	; (8000b94 <pinMode+0x2b4>)
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	4613      	mov	r3, r2
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4413      	add	r3, r2
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	4403      	add	r3, r0
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2203      	movs	r2, #3
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	461c      	mov	r4, r3
 800093c:	4895      	ldr	r0, [pc, #596]	; (8000b94 <pinMode+0x2b4>)
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	4403      	add	r3, r0
 800094a:	3310      	adds	r3, #16
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	ea01 0204 	and.w	r2, r1, r4
 8000952:	601a      	str	r2, [r3, #0]
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Pull-up resister by setting bit 0x01 */
 8000954:	498f      	ldr	r1, [pc, #572]	; (8000b94 <pinMode+0x2b4>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	4613      	mov	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	440b      	add	r3, r1
 8000962:	3310      	adds	r3, #16
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68d9      	ldr	r1, [r3, #12]
 8000968:	488a      	ldr	r0, [pc, #552]	; (8000b94 <pinMode+0x2b4>)
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	4403      	add	r3, r0
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2203      	movs	r2, #3
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	461c      	mov	r4, r3
 8000984:	4883      	ldr	r0, [pc, #524]	; (8000b94 <pinMode+0x2b4>)
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4613      	mov	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	4413      	add	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	4403      	add	r3, r0
 8000992:	3310      	adds	r3, #16
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	ea01 0204 	and.w	r2, r1, r4
 800099a:	60da      	str	r2, [r3, #12]
		PINS_[pin].GPIO->PUPDR |= (0x01 << (PINS_[pin].pin * 2));
 800099c:	497d      	ldr	r1, [pc, #500]	; (8000b94 <pinMode+0x2b4>)
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	440b      	add	r3, r1
 80009aa:	3310      	adds	r3, #16
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68d9      	ldr	r1, [r3, #12]
 80009b0:	4878      	ldr	r0, [pc, #480]	; (8000b94 <pinMode+0x2b4>)
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4613      	mov	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	4403      	add	r3, r0
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2201      	movs	r2, #1
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	461c      	mov	r4, r3
 80009ca:	4872      	ldr	r0, [pc, #456]	; (8000b94 <pinMode+0x2b4>)
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4613      	mov	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4413      	add	r3, r2
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	4403      	add	r3, r0
 80009d8:	3310      	adds	r3, #16
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	ea41 0204 	orr.w	r2, r1, r4
 80009e0:	60da      	str	r2, [r3, #12]
		RCC->AHB1ENR |= PINS_[pin].clock;
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Floating by setting bit 0x01 */
	}

}
 80009e2:	e12f      	b.n	8000c44 <pinMode+0x364>
	else if(mode == INPUT_PULLDOWN) {
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d179      	bne.n	8000ade <pinMode+0x1fe>
		RCC->AHB1ENR |= PINS_[pin].clock;
 80009ea:	4b69      	ldr	r3, [pc, #420]	; (8000b90 <pinMode+0x2b0>)
 80009ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009ee:	4869      	ldr	r0, [pc, #420]	; (8000b94 <pinMode+0x2b4>)
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4403      	add	r3, r0
 80009fc:	330c      	adds	r3, #12
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a63      	ldr	r2, [pc, #396]	; (8000b90 <pinMode+0x2b0>)
 8000a02:	430b      	orrs	r3, r1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
 8000a06:	4963      	ldr	r1, [pc, #396]	; (8000b94 <pinMode+0x2b4>)
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	440b      	add	r3, r1
 8000a14:	3310      	adds	r3, #16
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6819      	ldr	r1, [r3, #0]
 8000a1a:	485e      	ldr	r0, [pc, #376]	; (8000b94 <pinMode+0x2b4>)
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	4413      	add	r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	4403      	add	r3, r0
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	461c      	mov	r4, r3
 8000a36:	4857      	ldr	r0, [pc, #348]	; (8000b94 <pinMode+0x2b4>)
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	4403      	add	r3, r0
 8000a44:	3310      	adds	r3, #16
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	ea01 0204 	and.w	r2, r1, r4
 8000a4c:	601a      	str	r2, [r3, #0]
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Pull-down resister by setting bit 0x02 */
 8000a4e:	4951      	ldr	r1, [pc, #324]	; (8000b94 <pinMode+0x2b4>)
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	4613      	mov	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	440b      	add	r3, r1
 8000a5c:	3310      	adds	r3, #16
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68d9      	ldr	r1, [r3, #12]
 8000a62:	484c      	ldr	r0, [pc, #304]	; (8000b94 <pinMode+0x2b4>)
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	4403      	add	r3, r0
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	461c      	mov	r4, r3
 8000a7e:	4845      	ldr	r0, [pc, #276]	; (8000b94 <pinMode+0x2b4>)
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	4403      	add	r3, r0
 8000a8c:	3310      	adds	r3, #16
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	ea01 0204 	and.w	r2, r1, r4
 8000a94:	60da      	str	r2, [r3, #12]
		PINS_[pin].GPIO->PUPDR |= (0x02 << (PINS_[pin].pin * 2));
 8000a96:	493f      	ldr	r1, [pc, #252]	; (8000b94 <pinMode+0x2b4>)
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	3310      	adds	r3, #16
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	68d9      	ldr	r1, [r3, #12]
 8000aaa:	483a      	ldr	r0, [pc, #232]	; (8000b94 <pinMode+0x2b4>)
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	4403      	add	r3, r0
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	2202      	movs	r2, #2
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	461c      	mov	r4, r3
 8000ac4:	4833      	ldr	r0, [pc, #204]	; (8000b94 <pinMode+0x2b4>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	4403      	add	r3, r0
 8000ad2:	3310      	adds	r3, #16
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	ea41 0204 	orr.w	r2, r1, r4
 8000ada:	60da      	str	r2, [r3, #12]
}
 8000adc:	e0b2      	b.n	8000c44 <pinMode+0x364>
	else if(mode == OUTPUT) {
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d159      	bne.n	8000b98 <pinMode+0x2b8>
		RCC->AHB1ENR |= PINS_[pin].clock; 							/* Enable Port Clock */
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <pinMode+0x2b0>)
 8000ae6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ae8:	482a      	ldr	r0, [pc, #168]	; (8000b94 <pinMode+0x2b4>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	4403      	add	r3, r0
 8000af6:	330c      	adds	r3, #12
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a25      	ldr	r2, [pc, #148]	; (8000b90 <pinMode+0x2b0>)
 8000afc:	430b      	orrs	r3, r1
 8000afe:	6313      	str	r3, [r2, #48]	; 0x30
		(PINS_[pin].GPIO)->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode */
 8000b00:	4924      	ldr	r1, [pc, #144]	; (8000b94 <pinMode+0x2b4>)
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	440b      	add	r3, r1
 8000b0e:	3310      	adds	r3, #16
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6819      	ldr	r1, [r3, #0]
 8000b14:	481f      	ldr	r0, [pc, #124]	; (8000b94 <pinMode+0x2b4>)
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	4403      	add	r3, r0
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2203      	movs	r2, #3
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	461c      	mov	r4, r3
 8000b30:	4818      	ldr	r0, [pc, #96]	; (8000b94 <pinMode+0x2b4>)
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	4613      	mov	r3, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	4413      	add	r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	4403      	add	r3, r0
 8000b3e:	3310      	adds	r3, #16
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	ea01 0204 	and.w	r2, r1, r4
 8000b46:	601a      	str	r2, [r3, #0]
		(PINS_[pin].GPIO)->MODER |= (0x01 << (PINS_[pin].pin * 2));			/* Set Mode to Output */
 8000b48:	4912      	ldr	r1, [pc, #72]	; (8000b94 <pinMode+0x2b4>)
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	4413      	add	r3, r2
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	440b      	add	r3, r1
 8000b56:	3310      	adds	r3, #16
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6819      	ldr	r1, [r3, #0]
 8000b5c:	480d      	ldr	r0, [pc, #52]	; (8000b94 <pinMode+0x2b4>)
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	4403      	add	r3, r0
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	2201      	movs	r2, #1
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	461c      	mov	r4, r3
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <pinMode+0x2b4>)
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	4403      	add	r3, r0
 8000b84:	3310      	adds	r3, #16
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	ea41 0204 	orr.w	r2, r1, r4
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	e059      	b.n	8000c44 <pinMode+0x364>
 8000b90:	40023800 	.word	0x40023800
 8000b94:	20000028 	.word	0x20000028
		RCC->AHB1ENR |= PINS_[pin].clock;
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <pinMode+0x370>)
 8000b9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b9c:	482d      	ldr	r0, [pc, #180]	; (8000c54 <pinMode+0x374>)
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	4403      	add	r3, r0
 8000baa:	330c      	adds	r3, #12
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <pinMode+0x370>)
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
		PINS_[pin].GPIO->MODER &= ~(0x03 << (PINS_[pin].pin * 2)); 		/* Clear Mode to Input */
 8000bb4:	4927      	ldr	r1, [pc, #156]	; (8000c54 <pinMode+0x374>)
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3310      	adds	r3, #16
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6819      	ldr	r1, [r3, #0]
 8000bc8:	4822      	ldr	r0, [pc, #136]	; (8000c54 <pinMode+0x374>)
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	4403      	add	r3, r0
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	461c      	mov	r4, r3
 8000be4:	481b      	ldr	r0, [pc, #108]	; (8000c54 <pinMode+0x374>)
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	4403      	add	r3, r0
 8000bf2:	3310      	adds	r3, #16
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	ea01 0204 	and.w	r2, r1, r4
 8000bfa:	601a      	str	r2, [r3, #0]
		PINS_[pin].GPIO->PUPDR &= ~(0x03 << (PINS_[pin].pin * 2)); 	/* Enable Floating by setting bit 0x01 */
 8000bfc:	4915      	ldr	r1, [pc, #84]	; (8000c54 <pinMode+0x374>)
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	4613      	mov	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	440b      	add	r3, r1
 8000c0a:	3310      	adds	r3, #16
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68d9      	ldr	r1, [r3, #12]
 8000c10:	4810      	ldr	r0, [pc, #64]	; (8000c54 <pinMode+0x374>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4403      	add	r3, r0
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	461c      	mov	r4, r3
 8000c2c:	4809      	ldr	r0, [pc, #36]	; (8000c54 <pinMode+0x374>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4613      	mov	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	4413      	add	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	4403      	add	r3, r0
 8000c3a:	3310      	adds	r3, #16
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	ea01 0204 	and.w	r2, r1, r4
 8000c42:	60da      	str	r2, [r3, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc90      	pop	{r4, r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800
 8000c54:	20000028 	.word	0x20000028

08000c58 <digitalRead>:

int digitalRead(int pin_num) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

	//RCC->AHB1ENR |= PINS_[pin_num].clock;
	//PINS_[pin_num].GPIO->MODER &= ~PINS_[pin_num].pin_clear_mode; 	/* Clear Mode to Input */
	//PINS_[pin_num].GPIO->PUPDR |= 0x00 << (PINS_[pin_num].pin * 2); 	/* Enable Pull-up resister by setting bit 0x01 */

	int out = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]

 	if(PINS_[pin_num].GPIO->IDR & PINS_[pin_num].pin) {
 8000c64:	490e      	ldr	r1, [pc, #56]	; (8000ca0 <digitalRead+0x48>)
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3310      	adds	r3, #16
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6919      	ldr	r1, [r3, #16]
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <digitalRead+0x48>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4403      	add	r3, r0
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	400b      	ands	r3, r1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <digitalRead+0x3a>
 		out = 1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 	}

	return out;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000028 	.word	0x20000028

08000ca4 <digitalWrite>:


void digitalWrite(int pin, int logic) {
 8000ca4:	b490      	push	{r4, r7}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	//RCC->AHB1ENR |= PINS_[pin].clock; 						/* Enable Port Clock */
	//PINS_[pin].GPIO->MODER &= ~PINS_[pin].pin_clear_mode; 	/* Clear Mode */
	//PINS_[pin].GPIO->MODER |= PINS_[pin].pin_out_mode;		/* Set Mode to Output */

	if(logic) {
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d022      	beq.n	8000cfa <digitalWrite+0x56>
		PINS_[pin].GPIO->BSRR |= 0x01 << PINS_[pin].pin;
 8000cb4:	4925      	ldr	r1, [pc, #148]	; (8000d4c <digitalWrite+0xa8>)
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	440b      	add	r3, r1
 8000cc2:	3310      	adds	r3, #16
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6999      	ldr	r1, [r3, #24]
 8000cc8:	4820      	ldr	r0, [pc, #128]	; (8000d4c <digitalWrite+0xa8>)
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4413      	add	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	4403      	add	r3, r0
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	461c      	mov	r4, r3
 8000ce0:	481a      	ldr	r0, [pc, #104]	; (8000d4c <digitalWrite+0xa8>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4413      	add	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4403      	add	r3, r0
 8000cee:	3310      	adds	r3, #16
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	ea41 0204 	orr.w	r2, r1, r4
 8000cf6:	619a      	str	r2, [r3, #24]
	}
	else {
		PINS_[pin].GPIO->BSRR |= 0x01 << (PINS_[pin].pin + 16);
	}

}
 8000cf8:	e022      	b.n	8000d40 <digitalWrite+0x9c>
		PINS_[pin].GPIO->BSRR |= 0x01 << (PINS_[pin].pin + 16);
 8000cfa:	4914      	ldr	r1, [pc, #80]	; (8000d4c <digitalWrite+0xa8>)
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	440b      	add	r3, r1
 8000d08:	3310      	adds	r3, #16
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6999      	ldr	r1, [r3, #24]
 8000d0e:	480f      	ldr	r0, [pc, #60]	; (8000d4c <digitalWrite+0xa8>)
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	4403      	add	r3, r0
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3310      	adds	r3, #16
 8000d20:	2201      	movs	r2, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	461c      	mov	r4, r3
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <digitalWrite+0xa8>)
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	4403      	add	r3, r0
 8000d36:	3310      	adds	r3, #16
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	ea41 0204 	orr.w	r2, r1, r4
 8000d3e:	619a      	str	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc90      	pop	{r4, r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000028 	.word	0x20000028

08000d50 <command_read>:
/********************************************************/
//SERIAL
/********************************************************/


int command_read(unsigned char data[]) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(&huart2, data, 3, 10000);
 8000d58:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <command_read+0x20>)
 8000d62:	f002 f9ce 	bl	8003102 <HAL_UART_Receive>
	return 0;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000628 	.word	0x20000628

08000d74 <command_write>:

int command_write(unsigned int pin, unsigned int result, unsigned int test) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	//Write
	unsigned char data[3];
	crc_encode(data, pin, result, test);
 8000d80:	f107 0014 	add.w	r0, r7, #20
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	68f9      	ldr	r1, [r7, #12]
 8000d8a:	f000 f80f 	bl	8000dac <crc_encode>
	HAL_UART_Transmit(&huart2, data, 3, 100);
 8000d8e:	f107 0114 	add.w	r1, r7, #20
 8000d92:	2364      	movs	r3, #100	; 0x64
 8000d94:	2203      	movs	r2, #3
 8000d96:	4804      	ldr	r0, [pc, #16]	; (8000da8 <command_write+0x34>)
 8000d98:	f002 f921 	bl	8002fde <HAL_UART_Transmit>
	return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000628 	.word	0x20000628

08000dac <crc_encode>:

int crc_encode(unsigned char data[], unsigned int pin, unsigned int result, unsigned int test) {
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	603b      	str	r3, [r7, #0]
	// Find the data
	unsigned long int crc_packet = ((pin << 16) & 0xFF0000) + ((result << 8) & 0xFF00) + ((test << 4) & 0xF0);
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	041b      	lsls	r3, r3, #16
 8000dbe:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4413      	add	r3, r2
 8000dd2:	61fb      	str	r3, [r7, #28]

	// Calculate CRC Number
	unsigned int remainder = crc_packet % CRC_KEY;
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <crc_encode+0x7c>)
 8000dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8000ddc:	0899      	lsrs	r1, r3, #2
 8000dde:	460b      	mov	r3, r1
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	440b      	add	r3, r1
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	61bb      	str	r3, [r7, #24]
	unsigned int crc = CRC_KEY - remainder;
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	f1c3 0305 	rsb	r3, r3, #5
 8000dee:	617b      	str	r3, [r7, #20]

	crc_packet += crc;
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4413      	add	r3, r2
 8000df6:	61fb      	str	r3, [r7, #28]

	data[0] = ((crc_packet >> 16)) & 0xFF;
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	0c1b      	lsrs	r3, r3, #16
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	701a      	strb	r2, [r3, #0]
	data[1] = ((crc_packet >> 8)) & 0xFF;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	0a1a      	lsrs	r2, r3, #8
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	701a      	strb	r2, [r3, #0]
	data[2] = ((crc_packet) & 0xFF);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	3302      	adds	r3, #2
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	701a      	strb	r2, [r3, #0]

	return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	cccccccd 	.word	0xcccccccd

08000e2c <crc_decode>:


int crc_decode(unsigned char data[]) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

	// Find the data
	unsigned long int crc_packet = (((unsigned long int)data[0] << 16) & 0xFF0000)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
			+ (((unsigned long int)data[1] << 8) & 0xFF00) + (((unsigned long int)data[2]));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3301      	adds	r3, #1
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	3202      	adds	r2, #2
 8000e4e:	7812      	ldrb	r2, [r2, #0]
	unsigned long int crc_packet = (((unsigned long int)data[0] << 16) & 0xFF0000)
 8000e50:	4413      	add	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]

	if(crc_packet % CRC_KEY) {
 8000e54:	68f9      	ldr	r1, [r7, #12]
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <crc_decode+0x60>)
 8000e58:	fba3 2301 	umull	r2, r3, r3, r1
 8000e5c:	089a      	lsrs	r2, r3, #2
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	1aca      	subs	r2, r1, r3
 8000e66:	2a00      	cmp	r2, #0
 8000e68:	d001      	beq.n	8000e6e <crc_decode+0x42>
		return 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e008      	b.n	8000e80 <crc_decode+0x54>
	}

	data[2] = (data[2] & 0xF0) >> 4;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3302      	adds	r3, #2
 8000e72:	781a      	ldrb	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3302      	adds	r3, #2
 8000e78:	0912      	lsrs	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	701a      	strb	r2, [r3, #0]

	return 1;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	cccccccd 	.word	0xcccccccd

08000e90 <SystemClock_Config>:

/***********************************************************/
/********* BASIC AUTO-GENERATED STM CONFIGURATIONS *********/
/***********************************************************/
void SystemClock_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b094      	sub	sp, #80	; 0x50
 8000e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	2234      	movs	r2, #52	; 0x34
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fcd8 	bl	8003854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <SystemClock_Config+0xd4>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	4a29      	ldr	r2, [pc, #164]	; (8000f64 <SystemClock_Config+0xd4>)
 8000ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec4:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <SystemClock_Config+0xd4>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <SystemClock_Config+0xd8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000edc:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <SystemClock_Config+0xd8>)
 8000ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <SystemClock_Config+0xd8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f04:	2310      	movs	r3, #16
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f08:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fd72 	bl	8002a08 <HAL_RCC_OscConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f2a:	f000 f8b7 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f32:	2302      	movs	r3, #2
 8000f34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fa12 	bl	8002374 <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f56:	f000 f8a1 	bl	800109c <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3750      	adds	r7, #80	; 0x50
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <MX_USART2_UART_Init+0x50>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	f001 ffce 	bl	8002f44 <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fae:	f000 f875 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000628 	.word	0x20000628
 8000fbc:	40004400 	.word	0x40004400

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <MX_GPIO_Init+0xd0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a2c      	ldr	r2, [pc, #176]	; (8001090 <MX_GPIO_Init+0xd0>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <MX_GPIO_Init+0xd0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b26      	ldr	r3, [pc, #152]	; (8001090 <MX_GPIO_Init+0xd0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a25      	ldr	r2, [pc, #148]	; (8001090 <MX_GPIO_Init+0xd0>)
 8000ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <MX_GPIO_Init+0xd0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1e      	ldr	r2, [pc, #120]	; (8001090 <MX_GPIO_Init+0xd0>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_GPIO_Init+0xd0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <MX_GPIO_Init+0xd0>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_GPIO_Init+0xd0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2120      	movs	r1, #32
 800104a:	4812      	ldr	r0, [pc, #72]	; (8001094 <MX_GPIO_Init+0xd4>)
 800104c:	f001 f906 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001056:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	480c      	ldr	r0, [pc, #48]	; (8001098 <MX_GPIO_Init+0xd8>)
 8001068:	f000 ff64 	bl	8001f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800106c:	2320      	movs	r3, #32
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_GPIO_Init+0xd4>)
 8001084:	f000 ff56 	bl	8001f34 <HAL_GPIO_Init>

}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020800 	.word	0x40020800

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>

080010a6 <delay>:
#include "main.h"
#include "setup.h"


//Basic Delay
void delay(int n) {
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	int i;
	for(; n > 0; n--) {
 80010ae:	e00d      	b.n	80010cc <delay+0x26>
		for(i =0; i < 3195; i++);
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e002      	b.n	80010bc <delay+0x16>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3301      	adds	r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f640 427a 	movw	r2, #3194	; 0xc7a
 80010c2:	4293      	cmp	r3, r2
 80010c4:	ddf7      	ble.n	80010b6 <delay+0x10>
	for(; n > 0; n--) {
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dcee      	bgt.n	80010b0 <delay+0xa>
	}

}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <pin_set>:

struct pin pin_set(uint32_t pin, uint32_t clock, GPIO_TypeDef * gpio,  uint8_t pin_id) {
 80010e0:	b4b0      	push	{r4, r5, r7}
 80010e2:	b08b      	sub	sp, #44	; 0x2c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]

	struct pin P;
	P.pin = pin;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	613b      	str	r3, [r7, #16]
	P.pin_id = pin_id;
 80010f2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80010f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	P.clock = clock;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	61fb      	str	r3, [r7, #28]
	P.GPIO = gpio;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	623b      	str	r3, [r7, #32]

	return P;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	461d      	mov	r5, r3
 8001106:	f107 0410 	add.w	r4, r7, #16
 800110a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001112:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	372c      	adds	r7, #44	; 0x2c
 800111a:	46bd      	mov	sp, r7
 800111c:	bcb0      	pop	{r4, r5, r7}
 800111e:	4770      	bx	lr

08001120 <init_pins>:

//Initialize pin struct array
void init_pins(struct pin pins[]) {
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af02      	add	r7, sp, #8
 8001126:	61f8      	str	r0, [r7, #28]

	//Pin 0 Example | PA5
	pins[0] = pin_set(0x05, 0x01, GPIOA, 0);
 8001128:	69fc      	ldr	r4, [r7, #28]
 800112a:	4638      	mov	r0, r7
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	4bc9      	ldr	r3, [pc, #804]	; (8001458 <init_pins+0x338>)
 8001132:	2201      	movs	r2, #1
 8001134:	2105      	movs	r1, #5
 8001136:	f7ff ffd3 	bl	80010e0 <pin_set>
 800113a:	4625      	mov	r5, r4
 800113c:	463c      	mov	r4, r7
 800113e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001142:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001146:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 1 | PD2
	pins[1] = pin_set(0x02, 0x08, GPIOD, 1);
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f103 0418 	add.w	r4, r3, #24
 8001150:	4638      	mov	r0, r7
 8001152:	2301      	movs	r3, #1
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	4bc1      	ldr	r3, [pc, #772]	; (800145c <init_pins+0x33c>)
 8001158:	2208      	movs	r2, #8
 800115a:	2102      	movs	r1, #2
 800115c:	f7ff ffc0 	bl	80010e0 <pin_set>
 8001160:	4625      	mov	r5, r4
 8001162:	463c      	mov	r4, r7
 8001164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001168:	e894 0003 	ldmia.w	r4, {r0, r1}
 800116c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 2 | PC12
	pins[2] = pin_set(0x0C, 0x04, GPIOC, 2);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001176:	4638      	mov	r0, r7
 8001178:	2302      	movs	r3, #2
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4bb8      	ldr	r3, [pc, #736]	; (8001460 <init_pins+0x340>)
 800117e:	2204      	movs	r2, #4
 8001180:	210c      	movs	r1, #12
 8001182:	f7ff ffad 	bl	80010e0 <pin_set>
 8001186:	4625      	mov	r5, r4
 8001188:	463c      	mov	r4, r7
 800118a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001192:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 3 | PC11
	pins[3] = pin_set(0x0B, 0x04, GPIOC, 3);
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800119c:	4638      	mov	r0, r7
 800119e:	2303      	movs	r3, #3
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4baf      	ldr	r3, [pc, #700]	; (8001460 <init_pins+0x340>)
 80011a4:	2204      	movs	r2, #4
 80011a6:	210b      	movs	r1, #11
 80011a8:	f7ff ff9a 	bl	80010e0 <pin_set>
 80011ac:	4625      	mov	r5, r4
 80011ae:	463c      	mov	r4, r7
 80011b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011b8:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 4 | PC10
	pins[4] = pin_set(0x0A, 0x04, GPIOC, 4);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80011c2:	4638      	mov	r0, r7
 80011c4:	2304      	movs	r3, #4
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	4ba5      	ldr	r3, [pc, #660]	; (8001460 <init_pins+0x340>)
 80011ca:	2204      	movs	r2, #4
 80011cc:	210a      	movs	r1, #10
 80011ce:	f7ff ff87 	bl	80010e0 <pin_set>
 80011d2:	4625      	mov	r5, r4
 80011d4:	463c      	mov	r4, r7
 80011d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011de:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 5 | PB8
	pins[5] = pin_set(0x08, 0x02, GPIOB, 5);
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80011e8:	4638      	mov	r0, r7
 80011ea:	2305      	movs	r3, #5
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4b9d      	ldr	r3, [pc, #628]	; (8001464 <init_pins+0x344>)
 80011f0:	2202      	movs	r2, #2
 80011f2:	2108      	movs	r1, #8
 80011f4:	f7ff ff74 	bl	80010e0 <pin_set>
 80011f8:	4625      	mov	r5, r4
 80011fa:	463c      	mov	r4, r7
 80011fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001200:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001204:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 6 | PC6
	pins[6] = pin_set(0x06, 0x04, GPIOC, 6);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800120e:	4638      	mov	r0, r7
 8001210:	2306      	movs	r3, #6
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4b92      	ldr	r3, [pc, #584]	; (8001460 <init_pins+0x340>)
 8001216:	2204      	movs	r2, #4
 8001218:	2106      	movs	r1, #6
 800121a:	f7ff ff61 	bl	80010e0 <pin_set>
 800121e:	4625      	mov	r5, r4
 8001220:	463c      	mov	r4, r7
 8001222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001226:	e894 0003 	ldmia.w	r4, {r0, r1}
 800122a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 7 | PC9
	pins[7] = pin_set(0x09, 0x04, GPIOC, 7);
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8001234:	4638      	mov	r0, r7
 8001236:	2307      	movs	r3, #7
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	4b89      	ldr	r3, [pc, #548]	; (8001460 <init_pins+0x340>)
 800123c:	2204      	movs	r2, #4
 800123e:	2109      	movs	r1, #9
 8001240:	f7ff ff4e 	bl	80010e0 <pin_set>
 8001244:	4625      	mov	r5, r4
 8001246:	463c      	mov	r4, r7
 8001248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001250:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 8 | PC8
	pins[8] = pin_set(0x08, 0x04, GPIOC, 8);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 800125a:	4638      	mov	r0, r7
 800125c:	2308      	movs	r3, #8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4b7f      	ldr	r3, [pc, #508]	; (8001460 <init_pins+0x340>)
 8001262:	2204      	movs	r2, #4
 8001264:	2108      	movs	r1, #8
 8001266:	f7ff ff3b 	bl	80010e0 <pin_set>
 800126a:	4625      	mov	r5, r4
 800126c:	463c      	mov	r4, r7
 800126e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001276:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 9 | REF
	pins[9] = pin_set(0x00, 0x00, GPIOA, 9);
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8001280:	4638      	mov	r0, r7
 8001282:	2309      	movs	r3, #9
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	4b74      	ldr	r3, [pc, #464]	; (8001458 <init_pins+0x338>)
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	f7ff ff28 	bl	80010e0 <pin_set>
 8001290:	4625      	mov	r5, r4
 8001292:	463c      	mov	r4, r7
 8001294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001298:	e894 0003 	ldmia.w	r4, {r0, r1}
 800129c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 10 | BOOT0
	pins[10] = pin_set(0x00, 0x00, GPIOA, 10);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80012a6:	4638      	mov	r0, r7
 80012a8:	230a      	movs	r3, #10
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <init_pins+0x338>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	f7ff ff15 	bl	80010e0 <pin_set>
 80012b6:	4625      	mov	r5, r4
 80012b8:	463c      	mov	r4, r7
 80012ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012c2:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 11 | E5V
	pins[11] = pin_set(0x00, 0x00, GPIOA, 11);
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f503 7484 	add.w	r4, r3, #264	; 0x108
 80012cc:	4638      	mov	r0, r7
 80012ce:	230b      	movs	r3, #11
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	4b61      	ldr	r3, [pc, #388]	; (8001458 <init_pins+0x338>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	f7ff ff02 	bl	80010e0 <pin_set>
 80012dc:	4625      	mov	r5, r4
 80012de:	463c      	mov	r4, r7
 80012e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e8:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 12 | VDD
	pins[12] = pin_set(0x00, 0x00, GPIOA, 12);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80012f2:	4638      	mov	r0, r7
 80012f4:	230c      	movs	r3, #12
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	4b57      	ldr	r3, [pc, #348]	; (8001458 <init_pins+0x338>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	f7ff feef 	bl	80010e0 <pin_set>
 8001302:	4625      	mov	r5, r4
 8001304:	463c      	mov	r4, r7
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800130e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 13 | AVDD
	pins[13] = pin_set(0x00, 0x00, GPIOA, 13);
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8001318:	4638      	mov	r0, r7
 800131a:	230d      	movs	r3, #13
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4b4e      	ldr	r3, [pc, #312]	; (8001458 <init_pins+0x338>)
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	f7ff fedc 	bl	80010e0 <pin_set>
 8001328:	4625      	mov	r5, r4
 800132a:	463c      	mov	r4, r7
 800132c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001330:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001334:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 14 | U5V
	pins[14] = pin_set(0x00, 0x00, GPIOA, 14);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 800133e:	4638      	mov	r0, r7
 8001340:	230e      	movs	r3, #14
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	4b44      	ldr	r3, [pc, #272]	; (8001458 <init_pins+0x338>)
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	f7ff fec9 	bl	80010e0 <pin_set>
 800134e:	4625      	mov	r5, r4
 8001350:	463c      	mov	r4, r7
 8001352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001356:	e894 0003 	ldmia.w	r4, {r0, r1}
 800135a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 15 | PB9
	pins[15] = pin_set(0x09, 0x04, GPIOC, 15);
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8001364:	4638      	mov	r0, r7
 8001366:	230f      	movs	r3, #15
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <init_pins+0x340>)
 800136c:	2204      	movs	r2, #4
 800136e:	2109      	movs	r1, #9
 8001370:	f7ff feb6 	bl	80010e0 <pin_set>
 8001374:	4625      	mov	r5, r4
 8001376:	463c      	mov	r4, r7
 8001378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001380:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 16 | PC5
	pins[16] = pin_set(0x05, 0x04, GPIOC, 16);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f503 74c0 	add.w	r4, r3, #384	; 0x180
 800138a:	4638      	mov	r0, r7
 800138c:	2310      	movs	r3, #16
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <init_pins+0x340>)
 8001392:	2204      	movs	r2, #4
 8001394:	2105      	movs	r1, #5
 8001396:	f7ff fea3 	bl	80010e0 <pin_set>
 800139a:	4625      	mov	r5, r4
 800139c:	463c      	mov	r4, r7
 800139e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013a6:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 17 | PA14
	pins[17] = pin_set(0x0E, 0x01, GPIOA, 17);
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 80013b0:	4638      	mov	r0, r7
 80013b2:	2311      	movs	r3, #17
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <init_pins+0x338>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	210e      	movs	r1, #14
 80013bc:	f7ff fe90 	bl	80010e0 <pin_set>
 80013c0:	4625      	mov	r5, r4
 80013c2:	463c      	mov	r4, r7
 80013c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013cc:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 18 | 3V3
	pins[18] = pin_set(0x00, 0x00, GPIOA, 18);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 80013d6:	4638      	mov	r0, r7
 80013d8:	2312      	movs	r3, #18
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <init_pins+0x338>)
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	f7ff fe7d 	bl	80010e0 <pin_set>
 80013e6:	4625      	mov	r5, r4
 80013e8:	463c      	mov	r4, r7
 80013ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013f2:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 19 | PA13
	pins[19] = pin_set(0x0D, 0x01, GPIOA, 19);
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 80013fc:	4638      	mov	r0, r7
 80013fe:	2313      	movs	r3, #19
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <init_pins+0x338>)
 8001404:	2201      	movs	r2, #1
 8001406:	210d      	movs	r1, #13
 8001408:	f7ff fe6a 	bl	80010e0 <pin_set>
 800140c:	4625      	mov	r5, r4
 800140e:	463c      	mov	r4, r7
 8001410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001418:	e885 0003 	stmia.w	r5, {r0, r1}


	//Pin 20 | RESET
	pins[20] = pin_set(0x00, 0x00, GPIOA, 20);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8001422:	4638      	mov	r0, r7
 8001424:	2314      	movs	r3, #20
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <init_pins+0x338>)
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	f7ff fe57 	bl	80010e0 <pin_set>
 8001432:	4625      	mov	r5, r4
 8001434:	463c      	mov	r4, r7
 8001436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800143e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 21 | PA6
	pins[21] = pin_set(0x06, 0x01, GPIOA, 21);
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8001448:	4638      	mov	r0, r7
 800144a:	2315      	movs	r3, #21
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	4b02      	ldr	r3, [pc, #8]	; (8001458 <init_pins+0x338>)
 8001450:	2201      	movs	r2, #1
 8001452:	2106      	movs	r1, #6
 8001454:	e008      	b.n	8001468 <init_pins+0x348>
 8001456:	bf00      	nop
 8001458:	40020000 	.word	0x40020000
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40020800 	.word	0x40020800
 8001464:	40020400 	.word	0x40020400
 8001468:	f7ff fe3a 	bl	80010e0 <pin_set>
 800146c:	4625      	mov	r5, r4
 800146e:	463c      	mov	r4, r7
 8001470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001474:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001478:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 22 | PA11
	pins[22] = pin_set(0x0B, 0x01, GPIOA, 22);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f503 7404 	add.w	r4, r3, #528	; 0x210
 8001482:	4638      	mov	r0, r7
 8001484:	2316      	movs	r3, #22
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4bc9      	ldr	r3, [pc, #804]	; (80017b0 <init_pins+0x690>)
 800148a:	2201      	movs	r2, #1
 800148c:	210b      	movs	r1, #11
 800148e:	f7ff fe27 	bl	80010e0 <pin_set>
 8001492:	4625      	mov	r5, r4
 8001494:	463c      	mov	r4, r7
 8001496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800149e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 23 | PA5
	pins[23] = pin_set(0x05, 0x01, GPIOA, 23);
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f503 740a 	add.w	r4, r3, #552	; 0x228
 80014a8:	4638      	mov	r0, r7
 80014aa:	2317      	movs	r3, #23
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	4bc0      	ldr	r3, [pc, #768]	; (80017b0 <init_pins+0x690>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	2105      	movs	r1, #5
 80014b4:	f7ff fe14 	bl	80010e0 <pin_set>
 80014b8:	4625      	mov	r5, r4
 80014ba:	463c      	mov	r4, r7
 80014bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c4:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 24 | PA12
	pins[24] = pin_set(0x0C, 0x01, GPIOA, 24);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f503 7410 	add.w	r4, r3, #576	; 0x240
 80014ce:	4638      	mov	r0, r7
 80014d0:	2318      	movs	r3, #24
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4bb6      	ldr	r3, [pc, #728]	; (80017b0 <init_pins+0x690>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	210c      	movs	r1, #12
 80014da:	f7ff fe01 	bl	80010e0 <pin_set>
 80014de:	4625      	mov	r5, r4
 80014e0:	463c      	mov	r4, r7
 80014e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ea:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 25 | PC13
	pins[25] = pin_set(0x0D, 0x04, GPIOC, 25);
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f503 7416 	add.w	r4, r3, #600	; 0x258
 80014f4:	4638      	mov	r0, r7
 80014f6:	2319      	movs	r3, #25
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	4bae      	ldr	r3, [pc, #696]	; (80017b4 <init_pins+0x694>)
 80014fc:	2204      	movs	r2, #4
 80014fe:	210d      	movs	r1, #13
 8001500:	f7ff fdee 	bl	80010e0 <pin_set>
 8001504:	4625      	mov	r5, r4
 8001506:	463c      	mov	r4, r7
 8001508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001510:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 26 | PB7
	pins[26] = pin_set(0x07, 0x02, GPIOB, 26);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f503 741c 	add.w	r4, r3, #624	; 0x270
 800151a:	4638      	mov	r0, r7
 800151c:	231a      	movs	r3, #26
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4ba5      	ldr	r3, [pc, #660]	; (80017b8 <init_pins+0x698>)
 8001522:	2202      	movs	r2, #2
 8001524:	2107      	movs	r1, #7
 8001526:	f7ff fddb 	bl	80010e0 <pin_set>
 800152a:	4625      	mov	r5, r4
 800152c:	463c      	mov	r4, r7
 800152e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001532:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001536:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 27 | PA15
	pins[27] = pin_set(0x0F, 0x01, GPIOA, 27);
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f503 7422 	add.w	r4, r3, #648	; 0x288
 8001540:	4638      	mov	r0, r7
 8001542:	231b      	movs	r3, #27
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	4b9a      	ldr	r3, [pc, #616]	; (80017b0 <init_pins+0x690>)
 8001548:	2201      	movs	r2, #1
 800154a:	210f      	movs	r1, #15
 800154c:	f7ff fdc8 	bl	80010e0 <pin_set>
 8001550:	4625      	mov	r5, r4
 8001552:	463c      	mov	r4, r7
 8001554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001558:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 28 | 5V
	pins[28] = pin_set(0x00, 0x00, GPIOA, 28);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8001566:	4638      	mov	r0, r7
 8001568:	231c      	movs	r3, #28
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4b90      	ldr	r3, [pc, #576]	; (80017b0 <init_pins+0x690>)
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	f7ff fdb5 	bl	80010e0 <pin_set>
 8001576:	4625      	mov	r5, r4
 8001578:	463c      	mov	r4, r7
 800157a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001582:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 29 | PB2
	pins[29] = pin_set(0x02, 0x02, GPIOB, 29);
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f503 742e 	add.w	r4, r3, #696	; 0x2b8
 800158c:	4638      	mov	r0, r7
 800158e:	231d      	movs	r3, #29
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4b89      	ldr	r3, [pc, #548]	; (80017b8 <init_pins+0x698>)
 8001594:	2202      	movs	r2, #2
 8001596:	2102      	movs	r1, #2
 8001598:	f7ff fda2 	bl	80010e0 <pin_set>
 800159c:	4625      	mov	r5, r4
 800159e:	463c      	mov	r4, r7
 80015a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a8:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 30 | PB6
	pins[30] = pin_set(0x06, 0x02, GPIOB, 30);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 80015b2:	4638      	mov	r0, r7
 80015b4:	231e      	movs	r3, #30
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	4b7f      	ldr	r3, [pc, #508]	; (80017b8 <init_pins+0x698>)
 80015ba:	2202      	movs	r2, #2
 80015bc:	2106      	movs	r1, #6
 80015be:	f7ff fd8f 	bl	80010e0 <pin_set>
 80015c2:	4625      	mov	r5, r4
 80015c4:	463c      	mov	r4, r7
 80015c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ce:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 31 | PB12
	pins[31] = pin_set(0x0C, 0x02, GPIOC, 31);
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 80015d8:	4638      	mov	r0, r7
 80015da:	231f      	movs	r3, #31
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <init_pins+0x694>)
 80015e0:	2202      	movs	r2, #2
 80015e2:	210c      	movs	r1, #12
 80015e4:	f7ff fd7c 	bl	80010e0 <pin_set>
 80015e8:	4625      	mov	r5, r4
 80015ea:	463c      	mov	r4, r7
 80015ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f4:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 32 | PA7
	pins[32] = pin_set(0x07, 0x01, GPIOA, 32);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f503 7440 	add.w	r4, r3, #768	; 0x300
 80015fe:	4638      	mov	r0, r7
 8001600:	2320      	movs	r3, #32
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <init_pins+0x690>)
 8001606:	2201      	movs	r2, #1
 8001608:	2107      	movs	r1, #7
 800160a:	f7ff fd69 	bl	80010e0 <pin_set>
 800160e:	4625      	mov	r5, r4
 8001610:	463c      	mov	r4, r7
 8001612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800161a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 33 | PC15
	pins[33] = pin_set(0x0F, 0x04, GPIOC, 33);
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f503 7446 	add.w	r4, r3, #792	; 0x318
 8001624:	4638      	mov	r0, r7
 8001626:	2321      	movs	r3, #33	; 0x21
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <init_pins+0x694>)
 800162c:	2204      	movs	r2, #4
 800162e:	210f      	movs	r1, #15
 8001630:	f7ff fd56 	bl	80010e0 <pin_set>
 8001634:	4625      	mov	r5, r4
 8001636:	463c      	mov	r4, r7
 8001638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001640:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 34 | PA0
	pins[34] = pin_set(0x00, 0x01, GPIOA, 34);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f503 744c 	add.w	r4, r3, #816	; 0x330
 800164a:	4638      	mov	r0, r7
 800164c:	2322      	movs	r3, #34	; 0x22
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <init_pins+0x690>)
 8001652:	2201      	movs	r2, #1
 8001654:	2100      	movs	r1, #0
 8001656:	f7ff fd43 	bl	80010e0 <pin_set>
 800165a:	4625      	mov	r5, r4
 800165c:	463c      	mov	r4, r7
 800165e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001666:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 35 | PC14
	pins[35] = pin_set(0x0E, 0x04, GPIOC, 35);
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f503 7452 	add.w	r4, r3, #840	; 0x348
 8001670:	4638      	mov	r0, r7
 8001672:	2323      	movs	r3, #35	; 0x23
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <init_pins+0x694>)
 8001678:	2204      	movs	r2, #4
 800167a:	210e      	movs	r1, #14
 800167c:	f7ff fd30 	bl	80010e0 <pin_set>
 8001680:	4625      	mov	r5, r4
 8001682:	463c      	mov	r4, r7
 8001684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001688:	e894 0003 	ldmia.w	r4, {r0, r1}
 800168c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 36 | VIN
	pins[36] = pin_set(0x00, 0x00, GPIOA, 36);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f503 7458 	add.w	r4, r3, #864	; 0x360
 8001696:	4638      	mov	r0, r7
 8001698:	2324      	movs	r3, #36	; 0x24
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <init_pins+0x690>)
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	f7ff fd1d 	bl	80010e0 <pin_set>
 80016a6:	4625      	mov	r5, r4
 80016a8:	463c      	mov	r4, r7
 80016aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016b2:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 37 | PA8
	pins[37] = pin_set(0x08, 0x01, GPIOA, 37);
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f503 745e 	add.w	r4, r3, #888	; 0x378
 80016bc:	4638      	mov	r0, r7
 80016be:	2325      	movs	r3, #37	; 0x25
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <init_pins+0x690>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	2108      	movs	r1, #8
 80016c8:	f7ff fd0a 	bl	80010e0 <pin_set>
 80016cc:	4625      	mov	r5, r4
 80016ce:	463c      	mov	r4, r7
 80016d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d8:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 38 | PB1
	pins[38] = pin_set(0x01, 0x02, GPIOB, 38);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f503 7464 	add.w	r4, r3, #912	; 0x390
 80016e2:	4638      	mov	r0, r7
 80016e4:	2326      	movs	r3, #38	; 0x26
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <init_pins+0x698>)
 80016ea:	2202      	movs	r2, #2
 80016ec:	2101      	movs	r1, #1
 80016ee:	f7ff fcf7 	bl	80010e0 <pin_set>
 80016f2:	4625      	mov	r5, r4
 80016f4:	463c      	mov	r4, r7
 80016f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016fe:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 39 | PA9
	pins[39] = pin_set(0x09, 0x01, GPIOA, 39);
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f503 746a 	add.w	r4, r3, #936	; 0x3a8
 8001708:	4638      	mov	r0, r7
 800170a:	2327      	movs	r3, #39	; 0x27
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <init_pins+0x690>)
 8001710:	2201      	movs	r2, #1
 8001712:	2109      	movs	r1, #9
 8001714:	f7ff fce4 	bl	80010e0 <pin_set>
 8001718:	4625      	mov	r5, r4
 800171a:	463c      	mov	r4, r7
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001724:	e885 0003 	stmia.w	r5, {r0, r1}


	//Pin 40 | PC7
	pins[40] = pin_set(0x07, 0x04, GPIOC, 40);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f503 7470 	add.w	r4, r3, #960	; 0x3c0
 800172e:	4638      	mov	r0, r7
 8001730:	2328      	movs	r3, #40	; 0x28
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <init_pins+0x694>)
 8001736:	2204      	movs	r2, #4
 8001738:	2107      	movs	r1, #7
 800173a:	f7ff fcd1 	bl	80010e0 <pin_set>
 800173e:	4625      	mov	r5, r4
 8001740:	463c      	mov	r4, r7
 8001742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001746:	e894 0003 	ldmia.w	r4, {r0, r1}
 800174a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 41 | PH1
	pins[41] = pin_set(0x00, 0x00, GPIOA, 41);
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f503 7476 	add.w	r4, r3, #984	; 0x3d8
 8001754:	4638      	mov	r0, r7
 8001756:	2329      	movs	r3, #41	; 0x29
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <init_pins+0x690>)
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	f7ff fcbe 	bl	80010e0 <pin_set>
 8001764:	4625      	mov	r5, r4
 8001766:	463c      	mov	r4, r7
 8001768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001770:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 42 | PA4
	pins[42] = pin_set(0x04, 0x01, GPIOA, 42);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f503 747c 	add.w	r4, r3, #1008	; 0x3f0
 800177a:	4638      	mov	r0, r7
 800177c:	232a      	movs	r3, #42	; 0x2a
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <init_pins+0x690>)
 8001782:	2201      	movs	r2, #1
 8001784:	2104      	movs	r1, #4
 8001786:	f7ff fcab 	bl	80010e0 <pin_set>
 800178a:	4625      	mov	r5, r4
 800178c:	463c      	mov	r4, r7
 800178e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001792:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001796:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 43 | PH0
	pins[43] = pin_set(0x00, 0x00, GPIOA, 43);
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f503 6481 	add.w	r4, r3, #1032	; 0x408
 80017a0:	4638      	mov	r0, r7
 80017a2:	232b      	movs	r3, #43	; 0x2b
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <init_pins+0x690>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	e006      	b.n	80017bc <init_pins+0x69c>
 80017ae:	bf00      	nop
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40020400 	.word	0x40020400
 80017bc:	f7ff fc90 	bl	80010e0 <pin_set>
 80017c0:	4625      	mov	r5, r4
 80017c2:	463c      	mov	r4, r7
 80017c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017cc:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 44 | PA1
	pins[44] = pin_set(0x01, 0x01, GPIOA, 44);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f503 6484 	add.w	r4, r3, #1056	; 0x420
 80017d6:	4638      	mov	r0, r7
 80017d8:	232c      	movs	r3, #44	; 0x2c
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4bb3      	ldr	r3, [pc, #716]	; (8001aac <init_pins+0x98c>)
 80017de:	2201      	movs	r2, #1
 80017e0:	2101      	movs	r1, #1
 80017e2:	f7ff fc7d 	bl	80010e0 <pin_set>
 80017e6:	4625      	mov	r5, r4
 80017e8:	463c      	mov	r4, r7
 80017ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f2:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 45 | PB4
	pins[45] = pin_set(0x04, 0x02, GPIOB, 45);
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f503 6487 	add.w	r4, r3, #1080	; 0x438
 80017fc:	4638      	mov	r0, r7
 80017fe:	232d      	movs	r3, #45	; 0x2d
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	4bab      	ldr	r3, [pc, #684]	; (8001ab0 <init_pins+0x990>)
 8001804:	2202      	movs	r2, #2
 8001806:	2104      	movs	r1, #4
 8001808:	f7ff fc6a 	bl	80010e0 <pin_set>
 800180c:	4625      	mov	r5, r4
 800180e:	463c      	mov	r4, r7
 8001810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001814:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001818:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 46 | PB14
	pins[46] = pin_set(0x0E, 0x02, GPIOB, 46);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 8001822:	4638      	mov	r0, r7
 8001824:	232e      	movs	r3, #46	; 0x2e
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	4ba1      	ldr	r3, [pc, #644]	; (8001ab0 <init_pins+0x990>)
 800182a:	2202      	movs	r2, #2
 800182c:	210e      	movs	r1, #14
 800182e:	f7ff fc57 	bl	80010e0 <pin_set>
 8001832:	4625      	mov	r5, r4
 8001834:	463c      	mov	r4, r7
 8001836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800183e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 47 | PB10
	pins[47] = pin_set(0x0A, 0x02, GPIOB, 47);
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f503 648d 	add.w	r4, r3, #1128	; 0x468
 8001848:	4638      	mov	r0, r7
 800184a:	232f      	movs	r3, #47	; 0x2f
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	4b98      	ldr	r3, [pc, #608]	; (8001ab0 <init_pins+0x990>)
 8001850:	2202      	movs	r2, #2
 8001852:	210a      	movs	r1, #10
 8001854:	f7ff fc44 	bl	80010e0 <pin_set>
 8001858:	4625      	mov	r5, r4
 800185a:	463c      	mov	r4, r7
 800185c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001860:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001864:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 48 | PB15
	pins[48] = pin_set(0x0F, 0x02, GPIOB, 48);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f503 6490 	add.w	r4, r3, #1152	; 0x480
 800186e:	4638      	mov	r0, r7
 8001870:	2330      	movs	r3, #48	; 0x30
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	4b8e      	ldr	r3, [pc, #568]	; (8001ab0 <init_pins+0x990>)
 8001876:	2202      	movs	r2, #2
 8001878:	210f      	movs	r1, #15
 800187a:	f7ff fc31 	bl	80010e0 <pin_set>
 800187e:	4625      	mov	r5, r4
 8001880:	463c      	mov	r4, r7
 8001882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800188a:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 49 | PC2
	pins[49] = pin_set(0x02, 0x04, GPIOC, 49);
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8001894:	4638      	mov	r0, r7
 8001896:	2331      	movs	r3, #49	; 0x31
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4b86      	ldr	r3, [pc, #536]	; (8001ab4 <init_pins+0x994>)
 800189c:	2204      	movs	r2, #4
 800189e:	2102      	movs	r1, #2
 80018a0:	f7ff fc1e 	bl	80010e0 <pin_set>
 80018a4:	4625      	mov	r5, r4
 80018a6:	463c      	mov	r4, r7
 80018a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018b0:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 50 | PC1
	pins[50] = pin_set(0x01, 0x04, GPIOC, 50);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f503 6496 	add.w	r4, r3, #1200	; 0x4b0
 80018ba:	4638      	mov	r0, r7
 80018bc:	2332      	movs	r3, #50	; 0x32
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	4b7c      	ldr	r3, [pc, #496]	; (8001ab4 <init_pins+0x994>)
 80018c2:	2204      	movs	r2, #4
 80018c4:	2101      	movs	r1, #1
 80018c6:	f7ff fc0b 	bl	80010e0 <pin_set>
 80018ca:	4625      	mov	r5, r4
 80018cc:	463c      	mov	r4, r7
 80018ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018d6:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 51 | VBAT
	pins[51] = pin_set(0x00, 0x00, GPIOA, 51);
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 80018e0:	4638      	mov	r0, r7
 80018e2:	2333      	movs	r3, #51	; 0x33
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	4b71      	ldr	r3, [pc, #452]	; (8001aac <init_pins+0x98c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	f7ff fbf8 	bl	80010e0 <pin_set>
 80018f0:	4625      	mov	r5, r4
 80018f2:	463c      	mov	r4, r7
 80018f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018fc:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 52 | PB0
	pins[52] = pin_set(0x00, 0x02, GPIOB, 52);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f503 649c 	add.w	r4, r3, #1248	; 0x4e0
 8001906:	4638      	mov	r0, r7
 8001908:	2334      	movs	r3, #52	; 0x34
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <init_pins+0x990>)
 800190e:	2202      	movs	r2, #2
 8001910:	2100      	movs	r1, #0
 8001912:	f7ff fbe5 	bl	80010e0 <pin_set>
 8001916:	4625      	mov	r5, r4
 8001918:	463c      	mov	r4, r7
 800191a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001922:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 53 | PB3
	pins[53] = pin_set(0x03, 0x02, GPIOB, 53);
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f503 649f 	add.w	r4, r3, #1272	; 0x4f8
 800192c:	4638      	mov	r0, r7
 800192e:	2335      	movs	r3, #53	; 0x35
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <init_pins+0x990>)
 8001934:	2202      	movs	r2, #2
 8001936:	2103      	movs	r1, #3
 8001938:	f7ff fbd2 	bl	80010e0 <pin_set>
 800193c:	4625      	mov	r5, r4
 800193e:	463c      	mov	r4, r7
 8001940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001944:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001948:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 54 | AGND
	pins[54] = pin_set(0x00, 0x00, GPIOA, 54);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f503 64a2 	add.w	r4, r3, #1296	; 0x510
 8001952:	4638      	mov	r0, r7
 8001954:	2336      	movs	r3, #54	; 0x36
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4b54      	ldr	r3, [pc, #336]	; (8001aac <init_pins+0x98c>)
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	f7ff fbbf 	bl	80010e0 <pin_set>
 8001962:	4625      	mov	r5, r4
 8001964:	463c      	mov	r4, r7
 8001966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800196e:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 55 | PB5
	pins[55] = pin_set(0x05, 0x02, GPIOB, 55);
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f503 64a5 	add.w	r4, r3, #1320	; 0x528
 8001978:	4638      	mov	r0, r7
 800197a:	2337      	movs	r3, #55	; 0x37
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <init_pins+0x990>)
 8001980:	2202      	movs	r2, #2
 8001982:	2105      	movs	r1, #5
 8001984:	f7ff fbac 	bl	80010e0 <pin_set>
 8001988:	4625      	mov	r5, r4
 800198a:	463c      	mov	r4, r7
 800198c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001990:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001994:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 56 | PB13
	pins[56] = pin_set(0x0D, 0x02, GPIOB, 56);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f503 64a8 	add.w	r4, r3, #1344	; 0x540
 800199e:	4638      	mov	r0, r7
 80019a0:	2338      	movs	r3, #56	; 0x38
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <init_pins+0x990>)
 80019a6:	2202      	movs	r2, #2
 80019a8:	210d      	movs	r1, #13
 80019aa:	f7ff fb99 	bl	80010e0 <pin_set>
 80019ae:	4625      	mov	r5, r4
 80019b0:	463c      	mov	r4, r7
 80019b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ba:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 57 | PC3
	pins[57] = pin_set(0x03, 0x04, GPIOC, 57);
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f503 64ab 	add.w	r4, r3, #1368	; 0x558
 80019c4:	4638      	mov	r0, r7
 80019c6:	2339      	movs	r3, #57	; 0x39
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <init_pins+0x994>)
 80019cc:	2204      	movs	r2, #4
 80019ce:	2103      	movs	r1, #3
 80019d0:	f7ff fb86 	bl	80010e0 <pin_set>
 80019d4:	4625      	mov	r5, r4
 80019d6:	463c      	mov	r4, r7
 80019d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019e0:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 58 | PC0
	pins[58] = pin_set(0x00, 0x04, GPIOC, 58);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f503 64ae 	add.w	r4, r3, #1392	; 0x570
 80019ea:	4638      	mov	r0, r7
 80019ec:	233a      	movs	r3, #58	; 0x3a
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <init_pins+0x994>)
 80019f2:	2204      	movs	r2, #4
 80019f4:	2100      	movs	r1, #0
 80019f6:	f7ff fb73 	bl	80010e0 <pin_set>
 80019fa:	4625      	mov	r5, r4
 80019fc:	463c      	mov	r4, r7
 80019fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a06:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 59 | PA3
	pins[59] = pin_set(0x03, 0x01, GPIOA, 59);
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f503 64b1 	add.w	r4, r3, #1416	; 0x588
 8001a10:	4638      	mov	r0, r7
 8001a12:	233b      	movs	r3, #59	; 0x3b
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <init_pins+0x98c>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	f7ff fb60 	bl	80010e0 <pin_set>
 8001a20:	4625      	mov	r5, r4
 8001a22:	463c      	mov	r4, r7
 8001a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a2c:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 60 | PA2
	pins[60] = pin_set(0x02, 0x01, GPIOA, 60);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8001a36:	4638      	mov	r0, r7
 8001a38:	233c      	movs	r3, #60	; 0x3c
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <init_pins+0x98c>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2102      	movs	r1, #2
 8001a42:	f7ff fb4d 	bl	80010e0 <pin_set>
 8001a46:	4625      	mov	r5, r4
 8001a48:	463c      	mov	r4, r7
 8001a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a52:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 61 | PA10
	pins[61] = pin_set(0x0A, 0x01, GPIOA, 61);
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f503 64b7 	add.w	r4, r3, #1464	; 0x5b8
 8001a5c:	4638      	mov	r0, r7
 8001a5e:	233d      	movs	r3, #61	; 0x3d
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <init_pins+0x98c>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	210a      	movs	r1, #10
 8001a68:	f7ff fb3a 	bl	80010e0 <pin_set>
 8001a6c:	4625      	mov	r5, r4
 8001a6e:	463c      	mov	r4, r7
 8001a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a78:	e885 0003 	stmia.w	r5, {r0, r1}

	//Pin 62 | PC4
	pins[62] = pin_set(0x04, 0x04, GPIOC, 62);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f503 64ba 	add.w	r4, r3, #1488	; 0x5d0
 8001a82:	4638      	mov	r0, r7
 8001a84:	233e      	movs	r3, #62	; 0x3e
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <init_pins+0x994>)
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	f7ff fb27 	bl	80010e0 <pin_set>
 8001a92:	4625      	mov	r5, r4
 8001a94:	463c      	mov	r4, r7
 8001a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a9e:	e885 0003 	stmia.w	r5, {r0, r1}

}
 8001aa2:	bf00      	nop
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020800 	.word	0x40020800

08001ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_MspInit+0x4c>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <HAL_MspInit+0x4c>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_MspInit+0x4c>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_MspInit+0x4c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_MspInit+0x4c>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_MspInit+0x4c>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001af6:	2007      	movs	r0, #7
 8001af8:	f000 f9e8 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800

08001b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_UART_MspInit+0x84>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d12b      	bne.n	8001b82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_UART_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b62:	230c      	movs	r3, #12
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b72:	2307      	movs	r3, #7
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <HAL_UART_MspInit+0x8c>)
 8001b7e:	f000 f9d9 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	; 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004400 	.word	0x40004400
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <NMI_Handler+0x4>

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be4:	f000 f890 	bl	8001d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <SystemInit+0x20>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <SystemInit+0x20>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c16:	490e      	ldr	r1, [pc, #56]	; (8001c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c2c:	4c0b      	ldr	r4, [pc, #44]	; (8001c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c3a:	f7ff ffd7 	bl	8001bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f001 fde5 	bl	800380c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c42:	f7fe fc61 	bl	8000508 <main>
  bx  lr    
 8001c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c54:	080038a4 	.word	0x080038a4
  ldr r2, =_sbss
 8001c58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c5c:	20000670 	.word	0x20000670

08001c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c68:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <HAL_Init+0x40>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_Init+0x40>)
 8001c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_Init+0x40>)
 8001c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 f91d 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f000 f808 	bl	8001ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c98:	f7ff ff0e 	bl	8001ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_InitTick+0x54>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_InitTick+0x58>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f927 	bl	8001f1a <HAL_SYSTICK_Config>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00e      	b.n	8001cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b0f      	cmp	r3, #15
 8001cda:	d80a      	bhi.n	8001cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce4:	f000 f8fd 	bl	8001ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce8:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <HAL_InitTick+0x5c>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x20>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_IncTick+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_IncTick+0x24>)
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	2000066c 	.word	0x2000066c

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	2000066c 	.word	0x2000066c

08001d48 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_SuspendTick+0x1c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_SuspendTick+0x1c>)
 8001d52:	f023 0302 	bic.w	r3, r3, #2
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d84:	4013      	ands	r3, r2
 8001d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9a:	4a04      	ldr	r2, [pc, #16]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60d3      	str	r3, [r2, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	f003 0307 	and.w	r3, r3, #7
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eac:	f7ff ff8e 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff47 	bl	8001d68 <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef4:	f7ff ff5c 	bl	8001db0 <__NVIC_GetPriorityGrouping>
 8001ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f7ff ff8e 	bl	8001e20 <NVIC_EncodePriority>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff5d 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffb0 	bl	8001e88 <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e165      	b.n	800221c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f50:	2201      	movs	r2, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	f040 8154 	bne.w	8002216 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d005      	beq.n	8001f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d130      	bne.n	8001fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 0201 	and.w	r2, r3, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d017      	beq.n	8002024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d123      	bne.n	8002078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	08da      	lsrs	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	69b9      	ldr	r1, [r7, #24]
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80ae 	beq.w	8002216 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_GPIO_Init+0x300>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a5c      	ldr	r2, [pc, #368]	; (8002234 <HAL_GPIO_Init+0x300>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <HAL_GPIO_Init+0x300>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d6:	4a58      	ldr	r2, [pc, #352]	; (8002238 <HAL_GPIO_Init+0x304>)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4f      	ldr	r2, [pc, #316]	; (800223c <HAL_GPIO_Init+0x308>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d025      	beq.n	800214e <HAL_GPIO_Init+0x21a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4e      	ldr	r2, [pc, #312]	; (8002240 <HAL_GPIO_Init+0x30c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01f      	beq.n	800214a <HAL_GPIO_Init+0x216>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4d      	ldr	r2, [pc, #308]	; (8002244 <HAL_GPIO_Init+0x310>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0x212>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4c      	ldr	r2, [pc, #304]	; (8002248 <HAL_GPIO_Init+0x314>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0x20e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4b      	ldr	r2, [pc, #300]	; (800224c <HAL_GPIO_Init+0x318>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x20a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4a      	ldr	r2, [pc, #296]	; (8002250 <HAL_GPIO_Init+0x31c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x206>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a49      	ldr	r2, [pc, #292]	; (8002254 <HAL_GPIO_Init+0x320>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x202>
 8002132:	2306      	movs	r3, #6
 8002134:	e00c      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 8002136:	2307      	movs	r3, #7
 8002138:	e00a      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800213a:	2305      	movs	r3, #5
 800213c:	e008      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800213e:	2304      	movs	r3, #4
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 8002142:	2303      	movs	r3, #3
 8002144:	e004      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 8002146:	2302      	movs	r3, #2
 8002148:	e002      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x21c>
 800214e:	2300      	movs	r3, #0
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	f002 0203 	and.w	r2, r2, #3
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	4093      	lsls	r3, r2
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002160:	4935      	ldr	r1, [pc, #212]	; (8002238 <HAL_GPIO_Init+0x304>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800216e:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <HAL_GPIO_Init+0x324>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002192:	4a31      	ldr	r2, [pc, #196]	; (8002258 <HAL_GPIO_Init+0x324>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002198:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <HAL_GPIO_Init+0x324>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021bc:	4a26      	ldr	r2, [pc, #152]	; (8002258 <HAL_GPIO_Init+0x324>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <HAL_GPIO_Init+0x324>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e6:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_GPIO_Init+0x324>)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_GPIO_Init+0x324>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <HAL_GPIO_Init+0x324>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	f67f ae96 	bls.w	8001f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40013800 	.word	0x40013800
 800223c:	40020000 	.word	0x40020000
 8002240:	40020400 	.word	0x40020400
 8002244:	40020800 	.word	0x40020800
 8002248:	40020c00 	.word	0x40020c00
 800224c:	40021000 	.word	0x40021000
 8002250:	40021400 	.word	0x40021400
 8002254:	40021800 	.word	0x40021800
 8002258:	40013c00 	.word	0x40013c00

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002278:	e003      	b.n	8002282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	619a      	str	r2, [r3, #24]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_PWR_EnableWakeUpPin+0x20>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4904      	ldr	r1, [pc, #16]	; (80022b0 <HAL_PWR_EnableWakeUpPin+0x20>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40007000 	.word	0x40007000

080022b4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_PWR_EnterSLEEPMode+0x34>)
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <HAL_PWR_EnterSLEEPMode+0x34>)
 80022c6:	f023 0304 	bic.w	r3, r3, #4
 80022ca:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80022d2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80022d4:	e002      	b.n	80022dc <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80022d6:	bf40      	sev
    __WFE();
 80022d8:	bf20      	wfe
    __WFE();
 80022da:	bf20      	wfe
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 80022f8:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_PWR_EnterSTOPMode+0x50>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 0203 	bic.w	r2, r3, #3
 8002300:	490e      	ldr	r1, [pc, #56]	; (800233c <HAL_PWR_EnterSTOPMode+0x50>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_PWR_EnterSTOPMode+0x54>)
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <HAL_PWR_EnterSTOPMode+0x54>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800231a:	bf30      	wfi
 800231c:	e002      	b.n	8002324 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800231e:	bf40      	sev
    __WFE();
 8002320:	bf20      	wfe
    __WFE();
 8002322:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_PWR_EnterSTOPMode+0x54>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	4a05      	ldr	r2, [pc, #20]	; (8002340 <HAL_PWR_EnterSTOPMode+0x54>)
 800232a:	f023 0304 	bic.w	r3, r3, #4
 800232e:	6113      	str	r3, [r2, #16]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40007000 	.word	0x40007000
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a07      	ldr	r2, [pc, #28]	; (800236c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	4a05      	ldr	r2, [pc, #20]	; (8002370 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002360:	bf30      	wfi
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40007000 	.word	0x40007000
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0cc      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b68      	ldr	r3, [pc, #416]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d90c      	bls.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0b8      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d020      	beq.n	80023fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c8:	4b59      	ldr	r3, [pc, #356]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a58      	ldr	r2, [pc, #352]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a52      	ldr	r2, [pc, #328]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	494d      	ldr	r1, [pc, #308]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d044      	beq.n	8002494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d119      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d003      	beq.n	8002432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242e:	2b03      	cmp	r3, #3
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e067      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b37      	ldr	r3, [pc, #220]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4934      	ldr	r1, [pc, #208]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7ff fc64 	bl	8001d30 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7ff fc60 	bl	8001d30 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e04f      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d20c      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e032      	b.n	8002522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4916      	ldr	r1, [pc, #88]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	490e      	ldr	r1, [pc, #56]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fa:	f000 f855 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 80024fe:	4602      	mov	r2, r0
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	490a      	ldr	r1, [pc, #40]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	5ccb      	ldrb	r3, [r1, r3]
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fbc4 	bl	8001ca8 <HAL_InitTick>

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00
 8002530:	40023800 	.word	0x40023800
 8002534:	0800387c 	.word	0x0800387c
 8002538:	20000000 	.word	0x20000000
 800253c:	20000004 	.word	0x20000004

08002540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <HAL_RCC_GetHCLKFreq+0x14>)
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000000 	.word	0x20000000

08002558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800255c:	f7ff fff0 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 8002560:	4602      	mov	r2, r0
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	0a9b      	lsrs	r3, r3, #10
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	4903      	ldr	r1, [pc, #12]	; (800257c <HAL_RCC_GetPCLK1Freq+0x24>)
 800256e:	5ccb      	ldrb	r3, [r1, r3]
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40023800 	.word	0x40023800
 800257c:	0800388c 	.word	0x0800388c

08002580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002584:	f7ff ffdc 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	0b5b      	lsrs	r3, r3, #13
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4903      	ldr	r1, [pc, #12]	; (80025a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40023800 	.word	0x40023800
 80025a4:	0800388c 	.word	0x0800388c

080025a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ac:	b0ae      	sub	sp, #184	; 0xb8
 80025ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ce:	4bcb      	ldr	r3, [pc, #812]	; (80028fc <HAL_RCC_GetSysClockFreq+0x354>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	f200 8206 	bhi.w	80029e8 <HAL_RCC_GetSysClockFreq+0x440>
 80025dc:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	08002619 	.word	0x08002619
 80025e8:	080029e9 	.word	0x080029e9
 80025ec:	080029e9 	.word	0x080029e9
 80025f0:	080029e9 	.word	0x080029e9
 80025f4:	08002621 	.word	0x08002621
 80025f8:	080029e9 	.word	0x080029e9
 80025fc:	080029e9 	.word	0x080029e9
 8002600:	080029e9 	.word	0x080029e9
 8002604:	08002629 	.word	0x08002629
 8002608:	080029e9 	.word	0x080029e9
 800260c:	080029e9 	.word	0x080029e9
 8002610:	080029e9 	.word	0x080029e9
 8002614:	08002819 	.word	0x08002819
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002618:	4bb9      	ldr	r3, [pc, #740]	; (8002900 <HAL_RCC_GetSysClockFreq+0x358>)
 800261a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800261e:	e1e7      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002620:	4bb8      	ldr	r3, [pc, #736]	; (8002904 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002626:	e1e3      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002628:	4bb4      	ldr	r3, [pc, #720]	; (80028fc <HAL_RCC_GetSysClockFreq+0x354>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002634:	4bb1      	ldr	r3, [pc, #708]	; (80028fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d071      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002640:	4bae      	ldr	r3, [pc, #696]	; (80028fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	2200      	movs	r2, #0
 8002648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800264c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002650:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002658:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002666:	4622      	mov	r2, r4
 8002668:	462b      	mov	r3, r5
 800266a:	f04f 0000 	mov.w	r0, #0
 800266e:	f04f 0100 	mov.w	r1, #0
 8002672:	0159      	lsls	r1, r3, #5
 8002674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002678:	0150      	lsls	r0, r2, #5
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4621      	mov	r1, r4
 8002680:	1a51      	subs	r1, r2, r1
 8002682:	6439      	str	r1, [r7, #64]	; 0x40
 8002684:	4629      	mov	r1, r5
 8002686:	eb63 0301 	sbc.w	r3, r3, r1
 800268a:	647b      	str	r3, [r7, #68]	; 0x44
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002698:	4649      	mov	r1, r9
 800269a:	018b      	lsls	r3, r1, #6
 800269c:	4641      	mov	r1, r8
 800269e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a2:	4641      	mov	r1, r8
 80026a4:	018a      	lsls	r2, r1, #6
 80026a6:	4641      	mov	r1, r8
 80026a8:	1a51      	subs	r1, r2, r1
 80026aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80026ac:	4649      	mov	r1, r9
 80026ae:	eb63 0301 	sbc.w	r3, r3, r1
 80026b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80026c0:	4649      	mov	r1, r9
 80026c2:	00cb      	lsls	r3, r1, #3
 80026c4:	4641      	mov	r1, r8
 80026c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ca:	4641      	mov	r1, r8
 80026cc:	00ca      	lsls	r2, r1, #3
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	4622      	mov	r2, r4
 80026d6:	189b      	adds	r3, r3, r2
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30
 80026da:	462b      	mov	r3, r5
 80026dc:	460a      	mov	r2, r1
 80026de:	eb42 0303 	adc.w	r3, r2, r3
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026f0:	4629      	mov	r1, r5
 80026f2:	024b      	lsls	r3, r1, #9
 80026f4:	4621      	mov	r1, r4
 80026f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026fa:	4621      	mov	r1, r4
 80026fc:	024a      	lsls	r2, r1, #9
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002706:	2200      	movs	r2, #0
 8002708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800270c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002710:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002714:	f7fd fd76 	bl	8000204 <__aeabi_uldivmod>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4613      	mov	r3, r2
 800271e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002722:	e067      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002724:	4b75      	ldr	r3, [pc, #468]	; (80028fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	099b      	lsrs	r3, r3, #6
 800272a:	2200      	movs	r2, #0
 800272c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002730:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002734:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273c:	67bb      	str	r3, [r7, #120]	; 0x78
 800273e:	2300      	movs	r3, #0
 8002740:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002742:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002746:	4622      	mov	r2, r4
 8002748:	462b      	mov	r3, r5
 800274a:	f04f 0000 	mov.w	r0, #0
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	0159      	lsls	r1, r3, #5
 8002754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002758:	0150      	lsls	r0, r2, #5
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4621      	mov	r1, r4
 8002760:	1a51      	subs	r1, r2, r1
 8002762:	62b9      	str	r1, [r7, #40]	; 0x28
 8002764:	4629      	mov	r1, r5
 8002766:	eb63 0301 	sbc.w	r3, r3, r1
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002778:	4649      	mov	r1, r9
 800277a:	018b      	lsls	r3, r1, #6
 800277c:	4641      	mov	r1, r8
 800277e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002782:	4641      	mov	r1, r8
 8002784:	018a      	lsls	r2, r1, #6
 8002786:	4641      	mov	r1, r8
 8002788:	ebb2 0a01 	subs.w	sl, r2, r1
 800278c:	4649      	mov	r1, r9
 800278e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800279e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027a6:	4692      	mov	sl, r2
 80027a8:	469b      	mov	fp, r3
 80027aa:	4623      	mov	r3, r4
 80027ac:	eb1a 0303 	adds.w	r3, sl, r3
 80027b0:	623b      	str	r3, [r7, #32]
 80027b2:	462b      	mov	r3, r5
 80027b4:	eb4b 0303 	adc.w	r3, fp, r3
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027c6:	4629      	mov	r1, r5
 80027c8:	028b      	lsls	r3, r1, #10
 80027ca:	4621      	mov	r1, r4
 80027cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d0:	4621      	mov	r1, r4
 80027d2:	028a      	lsls	r2, r1, #10
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027dc:	2200      	movs	r2, #0
 80027de:	673b      	str	r3, [r7, #112]	; 0x70
 80027e0:	677a      	str	r2, [r7, #116]	; 0x74
 80027e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80027e6:	f7fd fd0d 	bl	8000204 <__aeabi_uldivmod>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4613      	mov	r3, r2
 80027f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f4:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCC_GetSysClockFreq+0x354>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800280a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002816:	e0eb      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <HAL_RCC_GetSysClockFreq+0x354>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d06b      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <HAL_RCC_GetSysClockFreq+0x354>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	2200      	movs	r2, #0
 8002838:	66bb      	str	r3, [r7, #104]	; 0x68
 800283a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800283c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800283e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002842:	663b      	str	r3, [r7, #96]	; 0x60
 8002844:	2300      	movs	r3, #0
 8002846:	667b      	str	r3, [r7, #100]	; 0x64
 8002848:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800284c:	4622      	mov	r2, r4
 800284e:	462b      	mov	r3, r5
 8002850:	f04f 0000 	mov.w	r0, #0
 8002854:	f04f 0100 	mov.w	r1, #0
 8002858:	0159      	lsls	r1, r3, #5
 800285a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800285e:	0150      	lsls	r0, r2, #5
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4621      	mov	r1, r4
 8002866:	1a51      	subs	r1, r2, r1
 8002868:	61b9      	str	r1, [r7, #24]
 800286a:	4629      	mov	r1, r5
 800286c:	eb63 0301 	sbc.w	r3, r3, r1
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800287e:	4659      	mov	r1, fp
 8002880:	018b      	lsls	r3, r1, #6
 8002882:	4651      	mov	r1, sl
 8002884:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002888:	4651      	mov	r1, sl
 800288a:	018a      	lsls	r2, r1, #6
 800288c:	4651      	mov	r1, sl
 800288e:	ebb2 0801 	subs.w	r8, r2, r1
 8002892:	4659      	mov	r1, fp
 8002894:	eb63 0901 	sbc.w	r9, r3, r1
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ac:	4690      	mov	r8, r2
 80028ae:	4699      	mov	r9, r3
 80028b0:	4623      	mov	r3, r4
 80028b2:	eb18 0303 	adds.w	r3, r8, r3
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	462b      	mov	r3, r5
 80028ba:	eb49 0303 	adc.w	r3, r9, r3
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028cc:	4629      	mov	r1, r5
 80028ce:	024b      	lsls	r3, r1, #9
 80028d0:	4621      	mov	r1, r4
 80028d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028d6:	4621      	mov	r1, r4
 80028d8:	024a      	lsls	r2, r1, #9
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028e2:	2200      	movs	r2, #0
 80028e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80028e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028ec:	f7fd fc8a 	bl	8000204 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4613      	mov	r3, r2
 80028f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028fa:	e065      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x420>
 80028fc:	40023800 	.word	0x40023800
 8002900:	00f42400 	.word	0x00f42400
 8002904:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002908:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x458>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	2200      	movs	r2, #0
 8002910:	4618      	mov	r0, r3
 8002912:	4611      	mov	r1, r2
 8002914:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002918:	653b      	str	r3, [r7, #80]	; 0x50
 800291a:	2300      	movs	r3, #0
 800291c:	657b      	str	r3, [r7, #84]	; 0x54
 800291e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002922:	4642      	mov	r2, r8
 8002924:	464b      	mov	r3, r9
 8002926:	f04f 0000 	mov.w	r0, #0
 800292a:	f04f 0100 	mov.w	r1, #0
 800292e:	0159      	lsls	r1, r3, #5
 8002930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002934:	0150      	lsls	r0, r2, #5
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4641      	mov	r1, r8
 800293c:	1a51      	subs	r1, r2, r1
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	4649      	mov	r1, r9
 8002942:	eb63 0301 	sbc.w	r3, r3, r1
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002954:	4659      	mov	r1, fp
 8002956:	018b      	lsls	r3, r1, #6
 8002958:	4651      	mov	r1, sl
 800295a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800295e:	4651      	mov	r1, sl
 8002960:	018a      	lsls	r2, r1, #6
 8002962:	4651      	mov	r1, sl
 8002964:	1a54      	subs	r4, r2, r1
 8002966:	4659      	mov	r1, fp
 8002968:	eb63 0501 	sbc.w	r5, r3, r1
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	00eb      	lsls	r3, r5, #3
 8002976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800297a:	00e2      	lsls	r2, r4, #3
 800297c:	4614      	mov	r4, r2
 800297e:	461d      	mov	r5, r3
 8002980:	4643      	mov	r3, r8
 8002982:	18e3      	adds	r3, r4, r3
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	464b      	mov	r3, r9
 8002988:	eb45 0303 	adc.w	r3, r5, r3
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800299a:	4629      	mov	r1, r5
 800299c:	028b      	lsls	r3, r1, #10
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a4:	4621      	mov	r1, r4
 80029a6:	028a      	lsls	r2, r1, #10
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029b0:	2200      	movs	r2, #0
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80029b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80029b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029ba:	f7fd fc23 	bl	8000204 <__aeabi_uldivmod>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4613      	mov	r3, r2
 80029c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x458>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	0f1b      	lsrs	r3, r3, #28
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80029d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029e6:	e003      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x45c>)
 80029ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	37b8      	adds	r7, #184	; 0xb8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	00f42400 	.word	0x00f42400

08002a08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e28d      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8083 	beq.w	8002b2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a28:	4b94      	ldr	r3, [pc, #592]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d019      	beq.n	8002a68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a34:	4b91      	ldr	r3, [pc, #580]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a40:	4b8e      	ldr	r3, [pc, #568]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4c:	d00c      	beq.n	8002a68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4e:	4b8b      	ldr	r3, [pc, #556]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d112      	bne.n	8002a80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5a:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a66:	d10b      	bne.n	8002a80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	4b84      	ldr	r3, [pc, #528]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d05b      	beq.n	8002b2c <HAL_RCC_OscConfig+0x124>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d157      	bne.n	8002b2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e25a      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d106      	bne.n	8002a98 <HAL_RCC_OscConfig+0x90>
 8002a8a:	4b7c      	ldr	r3, [pc, #496]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a7b      	ldr	r2, [pc, #492]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e01d      	b.n	8002ad4 <HAL_RCC_OscConfig+0xcc>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0xb4>
 8002aa2:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a75      	ldr	r2, [pc, #468]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b73      	ldr	r3, [pc, #460]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a72      	ldr	r2, [pc, #456]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCC_OscConfig+0xcc>
 8002abc:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a6e      	ldr	r2, [pc, #440]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b6c      	ldr	r3, [pc, #432]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a6b      	ldr	r2, [pc, #428]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d013      	beq.n	8002b04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7ff f928 	bl	8001d30 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7ff f924 	bl	8001d30 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e21f      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b61      	ldr	r3, [pc, #388]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xdc>
 8002b02:	e014      	b.n	8002b2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7ff f914 	bl	8001d30 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7ff f910 	bl	8001d30 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e20b      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	4b57      	ldr	r3, [pc, #348]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x104>
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d06f      	beq.n	8002c1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b3a:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d017      	beq.n	8002b76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b46:	4b4d      	ldr	r3, [pc, #308]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d105      	bne.n	8002b5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b52:	4b4a      	ldr	r3, [pc, #296]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d11c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6a:	4b44      	ldr	r3, [pc, #272]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d116      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	4b41      	ldr	r3, [pc, #260]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_RCC_OscConfig+0x186>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e1d3      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4937      	ldr	r1, [pc, #220]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	e03a      	b.n	8002c1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bac:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_RCC_OscConfig+0x278>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb2:	f7ff f8bd 	bl	8001d30 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bba:	f7ff f8b9 	bl	8001d30 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e1b4      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd8:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4925      	ldr	r1, [pc, #148]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]
 8002bec:	e015      	b.n	8002c1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <HAL_RCC_OscConfig+0x278>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7ff f89c 	bl	8001d30 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfc:	f7ff f898 	bl	8001d30 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e193      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d036      	beq.n	8002c94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d016      	beq.n	8002c5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_RCC_OscConfig+0x27c>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7ff f87c 	bl	8001d30 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3c:	f7ff f878 	bl	8001d30 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e173      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x234>
 8002c5a:	e01b      	b.n	8002c94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_OscConfig+0x27c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c62:	f7ff f865 	bl	8001d30 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c68:	e00e      	b.n	8002c88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c6a:	f7ff f861 	bl	8001d30 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d907      	bls.n	8002c88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e15c      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	42470000 	.word	0x42470000
 8002c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	4b8a      	ldr	r3, [pc, #552]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ea      	bne.n	8002c6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8097 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca6:	4b83      	ldr	r3, [pc, #524]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10f      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	4a7e      	ldr	r2, [pc, #504]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc2:	4b7c      	ldr	r3, [pc, #496]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b79      	ldr	r3, [pc, #484]	; (8002eb8 <HAL_RCC_OscConfig+0x4b0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d118      	bne.n	8002d10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cde:	4b76      	ldr	r3, [pc, #472]	; (8002eb8 <HAL_RCC_OscConfig+0x4b0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a75      	ldr	r2, [pc, #468]	; (8002eb8 <HAL_RCC_OscConfig+0x4b0>)
 8002ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cea:	f7ff f821 	bl	8001d30 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf2:	f7ff f81d 	bl	8001d30 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e118      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	4b6c      	ldr	r3, [pc, #432]	; (8002eb8 <HAL_RCC_OscConfig+0x4b0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x31e>
 8002d18:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70
 8002d24:	e01c      	b.n	8002d60 <HAL_RCC_OscConfig+0x358>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x340>
 8002d2e:	4b61      	ldr	r3, [pc, #388]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a60      	ldr	r2, [pc, #384]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3a:	4b5e      	ldr	r3, [pc, #376]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a5d      	ldr	r2, [pc, #372]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0x358>
 8002d48:	4b5a      	ldr	r3, [pc, #360]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4a59      	ldr	r2, [pc, #356]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	6713      	str	r3, [r2, #112]	; 0x70
 8002d54:	4b57      	ldr	r3, [pc, #348]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	4a56      	ldr	r2, [pc, #344]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002d5a:	f023 0304 	bic.w	r3, r3, #4
 8002d5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d015      	beq.n	8002d94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7fe ffe2 	bl	8001d30 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f7fe ffde 	bl	8001d30 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e0d7      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d86:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0ee      	beq.n	8002d70 <HAL_RCC_OscConfig+0x368>
 8002d92:	e014      	b.n	8002dbe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7fe ffcc 	bl	8001d30 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fe ffc8 	bl	8001d30 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0c1      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db2:	4b40      	ldr	r3, [pc, #256]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1ee      	bne.n	8002d9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc4:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	4a3a      	ldr	r2, [pc, #232]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80ad 	beq.w	8002f34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dda:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d060      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d145      	bne.n	8002e7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	4b33      	ldr	r3, [pc, #204]	; (8002ebc <HAL_RCC_OscConfig+0x4b4>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe ff9c 	bl	8001d30 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fe ff98 	bl	8001d30 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e093      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	019b      	lsls	r3, r3, #6
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	3b01      	subs	r3, #1
 8002e34:	041b      	lsls	r3, r3, #16
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	061b      	lsls	r3, r3, #24
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	071b      	lsls	r3, r3, #28
 8002e46:	491b      	ldr	r1, [pc, #108]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_RCC_OscConfig+0x4b4>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fe ff6d 	bl	8001d30 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe ff69 	bl	8001d30 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e064      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x452>
 8002e78:	e05c      	b.n	8002f34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_RCC_OscConfig+0x4b4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe ff56 	bl	8001d30 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe ff52 	bl	8001d30 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e04d      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_RCC_OscConfig+0x4ac>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x480>
 8002ea6:	e045      	b.n	8002f34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e040      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_RCC_OscConfig+0x538>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d030      	beq.n	8002f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d129      	bne.n	8002f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d122      	bne.n	8002f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d119      	bne.n	8002f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d10f      	bne.n	8002f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800

08002f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e03f      	b.n	8002fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fe fdcc 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2224      	movs	r2, #36	; 0x24
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f9cb 	bl	8003324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b08a      	sub	sp, #40	; 0x28
 8002fe2:	af02      	add	r7, sp, #8
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	4613      	mov	r3, r2
 8002fec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d17c      	bne.n	80030f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_UART_Transmit+0x2c>
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e075      	b.n	80030fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_UART_Transmit+0x3e>
 8003018:	2302      	movs	r3, #2
 800301a:	e06e      	b.n	80030fa <HAL_UART_Transmit+0x11c>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2221      	movs	r2, #33	; 0x21
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003032:	f7fe fe7d 	bl	8001d30 <HAL_GetTick>
 8003036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	88fa      	ldrh	r2, [r7, #6]
 800303c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	88fa      	ldrh	r2, [r7, #6]
 8003042:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304c:	d108      	bne.n	8003060 <HAL_UART_Transmit+0x82>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e003      	b.n	8003068 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003070:	e02a      	b.n	80030c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f8e2 	bl	8003246 <UART_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e036      	b.n	80030fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	3302      	adds	r3, #2
 80030a6:	61bb      	str	r3, [r7, #24]
 80030a8:	e007      	b.n	80030ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	3301      	adds	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1cf      	bne.n	8003072 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2200      	movs	r2, #0
 80030da:	2140      	movs	r1, #64	; 0x40
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f8b2 	bl	8003246 <UART_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e006      	b.n	80030fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e000      	b.n	80030fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
  }
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b08a      	sub	sp, #40	; 0x28
 8003106:	af02      	add	r7, sp, #8
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b20      	cmp	r3, #32
 8003120:	f040 808c 	bne.w	800323c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_UART_Receive+0x2e>
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e084      	b.n	800323e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_UART_Receive+0x40>
 800313e:	2302      	movs	r3, #2
 8003140:	e07d      	b.n	800323e <HAL_UART_Receive+0x13c>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2222      	movs	r2, #34	; 0x22
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800315e:	f7fe fde7 	bl	8001d30 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	88fa      	ldrh	r2, [r7, #6]
 8003168:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003178:	d108      	bne.n	800318c <HAL_UART_Receive+0x8a>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	e003      	b.n	8003194 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800319c:	e043      	b.n	8003226 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2200      	movs	r2, #0
 80031a6:	2120      	movs	r1, #32
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f84c 	bl	8003246 <UART_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e042      	b.n	800323e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10c      	bne.n	80031d8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	3302      	adds	r3, #2
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	e01f      	b.n	8003218 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e0:	d007      	beq.n	80031f2 <HAL_UART_Receive+0xf0>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <HAL_UART_Receive+0xfe>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e008      	b.n	8003212 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800320c:	b2da      	uxtb	r2, r3
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3301      	adds	r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1b6      	bne.n	800319e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	4618      	mov	r0, r3
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b090      	sub	sp, #64	; 0x40
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003256:	e050      	b.n	80032fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800325e:	d04c      	beq.n	80032fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <UART_WaitOnFlagUntilTimeout+0x30>
 8003266:	f7fe fd63 	bl	8001d30 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003272:	429a      	cmp	r2, r3
 8003274:	d241      	bcs.n	80032fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	330c      	adds	r3, #12
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800328c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003296:	637a      	str	r2, [r7, #52]	; 0x34
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800329c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e5      	bne.n	8003276 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3314      	adds	r3, #20
 80032b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	e853 3f00 	ldrex	r3, [r3]
 80032b8:	613b      	str	r3, [r7, #16]
   return(result);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	3314      	adds	r3, #20
 80032c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032ca:	623a      	str	r2, [r7, #32]
 80032cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ce:	69f9      	ldr	r1, [r7, #28]
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	e841 2300 	strex	r3, r2, [r1]
 80032d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e5      	bne.n	80032aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e00f      	b.n	800331a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	429a      	cmp	r2, r3
 8003308:	bf0c      	ite	eq
 800330a:	2301      	moveq	r3, #1
 800330c:	2300      	movne	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	429a      	cmp	r2, r3
 8003316:	d09f      	beq.n	8003258 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3740      	adds	r7, #64	; 0x40
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003328:	b0c0      	sub	sp, #256	; 0x100
 800332a:	af00      	add	r7, sp, #0
 800332c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	68d9      	ldr	r1, [r3, #12]
 8003342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	ea40 0301 	orr.w	r3, r0, r1
 800334c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	431a      	orrs	r2, r3
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	431a      	orrs	r2, r3
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800337c:	f021 010c 	bic.w	r1, r1, #12
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800338a:	430b      	orrs	r3, r1
 800338c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	6999      	ldr	r1, [r3, #24]
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	ea40 0301 	orr.w	r3, r0, r1
 80033aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4b8f      	ldr	r3, [pc, #572]	; (80035f0 <UART_SetConfig+0x2cc>)
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d005      	beq.n	80033c4 <UART_SetConfig+0xa0>
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b8d      	ldr	r3, [pc, #564]	; (80035f4 <UART_SetConfig+0x2d0>)
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d104      	bne.n	80033ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033c4:	f7ff f8dc 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 80033c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033cc:	e003      	b.n	80033d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ce:	f7ff f8c3 	bl	8002558 <HAL_RCC_GetPCLK1Freq>
 80033d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e0:	f040 810c 	bne.w	80035fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033f6:	4622      	mov	r2, r4
 80033f8:	462b      	mov	r3, r5
 80033fa:	1891      	adds	r1, r2, r2
 80033fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80033fe:	415b      	adcs	r3, r3
 8003400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003402:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003406:	4621      	mov	r1, r4
 8003408:	eb12 0801 	adds.w	r8, r2, r1
 800340c:	4629      	mov	r1, r5
 800340e:	eb43 0901 	adc.w	r9, r3, r1
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800341e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003426:	4690      	mov	r8, r2
 8003428:	4699      	mov	r9, r3
 800342a:	4623      	mov	r3, r4
 800342c:	eb18 0303 	adds.w	r3, r8, r3
 8003430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003434:	462b      	mov	r3, r5
 8003436:	eb49 0303 	adc.w	r3, r9, r3
 800343a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800344a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800344e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003452:	460b      	mov	r3, r1
 8003454:	18db      	adds	r3, r3, r3
 8003456:	653b      	str	r3, [r7, #80]	; 0x50
 8003458:	4613      	mov	r3, r2
 800345a:	eb42 0303 	adc.w	r3, r2, r3
 800345e:	657b      	str	r3, [r7, #84]	; 0x54
 8003460:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003464:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003468:	f7fc fecc 	bl	8000204 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4b61      	ldr	r3, [pc, #388]	; (80035f8 <UART_SetConfig+0x2d4>)
 8003472:	fba3 2302 	umull	r2, r3, r3, r2
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	011c      	lsls	r4, r3, #4
 800347a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347e:	2200      	movs	r2, #0
 8003480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003484:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003488:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800348c:	4642      	mov	r2, r8
 800348e:	464b      	mov	r3, r9
 8003490:	1891      	adds	r1, r2, r2
 8003492:	64b9      	str	r1, [r7, #72]	; 0x48
 8003494:	415b      	adcs	r3, r3
 8003496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003498:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800349c:	4641      	mov	r1, r8
 800349e:	eb12 0a01 	adds.w	sl, r2, r1
 80034a2:	4649      	mov	r1, r9
 80034a4:	eb43 0b01 	adc.w	fp, r3, r1
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034bc:	4692      	mov	sl, r2
 80034be:	469b      	mov	fp, r3
 80034c0:	4643      	mov	r3, r8
 80034c2:	eb1a 0303 	adds.w	r3, sl, r3
 80034c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ca:	464b      	mov	r3, r9
 80034cc:	eb4b 0303 	adc.w	r3, fp, r3
 80034d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034e8:	460b      	mov	r3, r1
 80034ea:	18db      	adds	r3, r3, r3
 80034ec:	643b      	str	r3, [r7, #64]	; 0x40
 80034ee:	4613      	mov	r3, r2
 80034f0:	eb42 0303 	adc.w	r3, r2, r3
 80034f4:	647b      	str	r3, [r7, #68]	; 0x44
 80034f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034fe:	f7fc fe81 	bl	8000204 <__aeabi_uldivmod>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4611      	mov	r1, r2
 8003508:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <UART_SetConfig+0x2d4>)
 800350a:	fba3 2301 	umull	r2, r3, r3, r1
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2264      	movs	r2, #100	; 0x64
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	1acb      	subs	r3, r1, r3
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800351e:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <UART_SetConfig+0x2d4>)
 8003520:	fba3 2302 	umull	r2, r3, r3, r2
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800352c:	441c      	add	r4, r3
 800352e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003532:	2200      	movs	r2, #0
 8003534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003538:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800353c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003540:	4642      	mov	r2, r8
 8003542:	464b      	mov	r3, r9
 8003544:	1891      	adds	r1, r2, r2
 8003546:	63b9      	str	r1, [r7, #56]	; 0x38
 8003548:	415b      	adcs	r3, r3
 800354a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800354c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003550:	4641      	mov	r1, r8
 8003552:	1851      	adds	r1, r2, r1
 8003554:	6339      	str	r1, [r7, #48]	; 0x30
 8003556:	4649      	mov	r1, r9
 8003558:	414b      	adcs	r3, r1
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003568:	4659      	mov	r1, fp
 800356a:	00cb      	lsls	r3, r1, #3
 800356c:	4651      	mov	r1, sl
 800356e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003572:	4651      	mov	r1, sl
 8003574:	00ca      	lsls	r2, r1, #3
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	4603      	mov	r3, r0
 800357c:	4642      	mov	r2, r8
 800357e:	189b      	adds	r3, r3, r2
 8003580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003584:	464b      	mov	r3, r9
 8003586:	460a      	mov	r2, r1
 8003588:	eb42 0303 	adc.w	r3, r2, r3
 800358c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800359c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035a4:	460b      	mov	r3, r1
 80035a6:	18db      	adds	r3, r3, r3
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035aa:	4613      	mov	r3, r2
 80035ac:	eb42 0303 	adc.w	r3, r2, r3
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035ba:	f7fc fe23 	bl	8000204 <__aeabi_uldivmod>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <UART_SetConfig+0x2d4>)
 80035c4:	fba3 1302 	umull	r1, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	2164      	movs	r1, #100	; 0x64
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	3332      	adds	r3, #50	; 0x32
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <UART_SetConfig+0x2d4>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	f003 0207 	and.w	r2, r3, #7
 80035e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4422      	add	r2, r4
 80035ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035ec:	e105      	b.n	80037fa <UART_SetConfig+0x4d6>
 80035ee:	bf00      	nop
 80035f0:	40011000 	.word	0x40011000
 80035f4:	40011400 	.word	0x40011400
 80035f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003600:	2200      	movs	r2, #0
 8003602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003606:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800360a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800360e:	4642      	mov	r2, r8
 8003610:	464b      	mov	r3, r9
 8003612:	1891      	adds	r1, r2, r2
 8003614:	6239      	str	r1, [r7, #32]
 8003616:	415b      	adcs	r3, r3
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
 800361a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800361e:	4641      	mov	r1, r8
 8003620:	1854      	adds	r4, r2, r1
 8003622:	4649      	mov	r1, r9
 8003624:	eb43 0501 	adc.w	r5, r3, r1
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	00eb      	lsls	r3, r5, #3
 8003632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003636:	00e2      	lsls	r2, r4, #3
 8003638:	4614      	mov	r4, r2
 800363a:	461d      	mov	r5, r3
 800363c:	4643      	mov	r3, r8
 800363e:	18e3      	adds	r3, r4, r3
 8003640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003644:	464b      	mov	r3, r9
 8003646:	eb45 0303 	adc.w	r3, r5, r3
 800364a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800365a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800366a:	4629      	mov	r1, r5
 800366c:	008b      	lsls	r3, r1, #2
 800366e:	4621      	mov	r1, r4
 8003670:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003674:	4621      	mov	r1, r4
 8003676:	008a      	lsls	r2, r1, #2
 8003678:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800367c:	f7fc fdc2 	bl	8000204 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4b60      	ldr	r3, [pc, #384]	; (8003808 <UART_SetConfig+0x4e4>)
 8003686:	fba3 2302 	umull	r2, r3, r3, r2
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	011c      	lsls	r4, r3, #4
 800368e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003692:	2200      	movs	r2, #0
 8003694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003698:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800369c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036a0:	4642      	mov	r2, r8
 80036a2:	464b      	mov	r3, r9
 80036a4:	1891      	adds	r1, r2, r2
 80036a6:	61b9      	str	r1, [r7, #24]
 80036a8:	415b      	adcs	r3, r3
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b0:	4641      	mov	r1, r8
 80036b2:	1851      	adds	r1, r2, r1
 80036b4:	6139      	str	r1, [r7, #16]
 80036b6:	4649      	mov	r1, r9
 80036b8:	414b      	adcs	r3, r1
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036c8:	4659      	mov	r1, fp
 80036ca:	00cb      	lsls	r3, r1, #3
 80036cc:	4651      	mov	r1, sl
 80036ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d2:	4651      	mov	r1, sl
 80036d4:	00ca      	lsls	r2, r1, #3
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	4603      	mov	r3, r0
 80036dc:	4642      	mov	r2, r8
 80036de:	189b      	adds	r3, r3, r2
 80036e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036e4:	464b      	mov	r3, r9
 80036e6:	460a      	mov	r2, r1
 80036e8:	eb42 0303 	adc.w	r3, r2, r3
 80036ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80036fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003708:	4649      	mov	r1, r9
 800370a:	008b      	lsls	r3, r1, #2
 800370c:	4641      	mov	r1, r8
 800370e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003712:	4641      	mov	r1, r8
 8003714:	008a      	lsls	r2, r1, #2
 8003716:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800371a:	f7fc fd73 	bl	8000204 <__aeabi_uldivmod>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4b39      	ldr	r3, [pc, #228]	; (8003808 <UART_SetConfig+0x4e4>)
 8003724:	fba3 1302 	umull	r1, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2164      	movs	r1, #100	; 0x64
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	3332      	adds	r3, #50	; 0x32
 8003736:	4a34      	ldr	r2, [pc, #208]	; (8003808 <UART_SetConfig+0x4e4>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003742:	441c      	add	r4, r3
 8003744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003748:	2200      	movs	r2, #0
 800374a:	673b      	str	r3, [r7, #112]	; 0x70
 800374c:	677a      	str	r2, [r7, #116]	; 0x74
 800374e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003752:	4642      	mov	r2, r8
 8003754:	464b      	mov	r3, r9
 8003756:	1891      	adds	r1, r2, r2
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	415b      	adcs	r3, r3
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003762:	4641      	mov	r1, r8
 8003764:	1851      	adds	r1, r2, r1
 8003766:	6039      	str	r1, [r7, #0]
 8003768:	4649      	mov	r1, r9
 800376a:	414b      	adcs	r3, r1
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800377a:	4659      	mov	r1, fp
 800377c:	00cb      	lsls	r3, r1, #3
 800377e:	4651      	mov	r1, sl
 8003780:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003784:	4651      	mov	r1, sl
 8003786:	00ca      	lsls	r2, r1, #3
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	4603      	mov	r3, r0
 800378e:	4642      	mov	r2, r8
 8003790:	189b      	adds	r3, r3, r2
 8003792:	66bb      	str	r3, [r7, #104]	; 0x68
 8003794:	464b      	mov	r3, r9
 8003796:	460a      	mov	r2, r1
 8003798:	eb42 0303 	adc.w	r3, r2, r3
 800379c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	663b      	str	r3, [r7, #96]	; 0x60
 80037a8:	667a      	str	r2, [r7, #100]	; 0x64
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037b6:	4649      	mov	r1, r9
 80037b8:	008b      	lsls	r3, r1, #2
 80037ba:	4641      	mov	r1, r8
 80037bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037c0:	4641      	mov	r1, r8
 80037c2:	008a      	lsls	r2, r1, #2
 80037c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037c8:	f7fc fd1c 	bl	8000204 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <UART_SetConfig+0x4e4>)
 80037d2:	fba3 1302 	umull	r1, r3, r3, r2
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2164      	movs	r1, #100	; 0x64
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	3332      	adds	r3, #50	; 0x32
 80037e4:	4a08      	ldr	r2, [pc, #32]	; (8003808 <UART_SetConfig+0x4e4>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	f003 020f 	and.w	r2, r3, #15
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4422      	add	r2, r4
 80037f8:	609a      	str	r2, [r3, #8]
}
 80037fa:	bf00      	nop
 80037fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003800:	46bd      	mov	sp, r7
 8003802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003806:	bf00      	nop
 8003808:	51eb851f 	.word	0x51eb851f

0800380c <__libc_init_array>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	4d0d      	ldr	r5, [pc, #52]	; (8003844 <__libc_init_array+0x38>)
 8003810:	4c0d      	ldr	r4, [pc, #52]	; (8003848 <__libc_init_array+0x3c>)
 8003812:	1b64      	subs	r4, r4, r5
 8003814:	10a4      	asrs	r4, r4, #2
 8003816:	2600      	movs	r6, #0
 8003818:	42a6      	cmp	r6, r4
 800381a:	d109      	bne.n	8003830 <__libc_init_array+0x24>
 800381c:	4d0b      	ldr	r5, [pc, #44]	; (800384c <__libc_init_array+0x40>)
 800381e:	4c0c      	ldr	r4, [pc, #48]	; (8003850 <__libc_init_array+0x44>)
 8003820:	f000 f820 	bl	8003864 <_init>
 8003824:	1b64      	subs	r4, r4, r5
 8003826:	10a4      	asrs	r4, r4, #2
 8003828:	2600      	movs	r6, #0
 800382a:	42a6      	cmp	r6, r4
 800382c:	d105      	bne.n	800383a <__libc_init_array+0x2e>
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	f855 3b04 	ldr.w	r3, [r5], #4
 8003834:	4798      	blx	r3
 8003836:	3601      	adds	r6, #1
 8003838:	e7ee      	b.n	8003818 <__libc_init_array+0xc>
 800383a:	f855 3b04 	ldr.w	r3, [r5], #4
 800383e:	4798      	blx	r3
 8003840:	3601      	adds	r6, #1
 8003842:	e7f2      	b.n	800382a <__libc_init_array+0x1e>
 8003844:	0800389c 	.word	0x0800389c
 8003848:	0800389c 	.word	0x0800389c
 800384c:	0800389c 	.word	0x0800389c
 8003850:	080038a0 	.word	0x080038a0

08003854 <memset>:
 8003854:	4402      	add	r2, r0
 8003856:	4603      	mov	r3, r0
 8003858:	4293      	cmp	r3, r2
 800385a:	d100      	bne.n	800385e <memset+0xa>
 800385c:	4770      	bx	lr
 800385e:	f803 1b01 	strb.w	r1, [r3], #1
 8003862:	e7f9      	b.n	8003858 <memset+0x4>

08003864 <_init>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr

08003870 <_fini>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr
